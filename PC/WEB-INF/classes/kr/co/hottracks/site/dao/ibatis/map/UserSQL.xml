<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sqlMap PUBLIC "-//ibatis.apache.org//DTD SQL Map 2.0//EN" "http://ibatis.apache.org/dtd/sql-map-2.dtd">
<sqlMap namespace="UserSQL">
    <typeAlias alias="user" type="kr.co.hottracks.site.model.common.User"/>
    <typeAlias alias="motherMallUser" type="kr.co.hottracks.site.model.common.MotherMallUser"/>
    <typeAlias alias="userGradeChangeHistory" type="kr.co.hottracks.site.model.common.UserGradeChangeHistory"/>
    <typeAlias alias="userAddress" type="kr.co.hottracks.site.model.common.UserAddress"/>
    <typeAlias alias="deposit" type="kr.co.hottracks.site.model.common.Deposit"/>
    <typeAlias alias="userKey" type="kr.co.hottracks.site.model.common.UserKey"/>
    <typeAlias alias="userParam" type="kr.co.hottracks.site.model.common.UserParam"/>
    <typeAlias alias="userCriteria" type="kr.co.hottracks.site.model.common.UserCriteria"/>
    <typeAlias alias="listUserCriteria" type="kr.co.hottracks.site.model.backoffice.user.ListUserCriteria"/>
    <typeAlias alias="listUserData" type="kr.co.hottracks.site.model.backoffice.user.ListUserData"/>
    <typeAlias alias="savedParam" type="kr.co.hottracks.site.model.common.SavedParam"/>
    <typeAlias alias="savedCriteria" type="kr.co.hottracks.site.model.common.SavedCriteria"/>
    <typeAlias alias="userGradeMaster" type="kr.co.hottracks.site.model.common.UserGradeMaster"/>
    <typeAlias alias="userProperty" type="kr.co.hottracks.site.model.common.UserProperty"/>
    <typeAlias alias="userCouponListData" type="kr.co.hottracks.site.model.common.coupon.UserCouponListData"/>
    <typeAlias alias="userOrder" type="kr.co.hottracks.site.model.common.UserOrder"/>
    <typeAlias alias="couponParam" type="kr.co.hottracks.site.model.common.coupon.CouponParam"/>
    <typeAlias alias="couponCriteria" type="kr.co.hottracks.site.model.common.coupon.CouponCriteria"/>
    <typeAlias alias="userSavedError" type="kr.co.hottracks.site.model.backoffice.user.UserSavedError"/>
    <typeAlias alias="depositReturnCriteria" type="kr.co.hottracks.site.model.backoffice.user.DepositReturnCriteria"/>
    <typeAlias alias="depositListData" type="kr.co.hottracks.site.model.backoffice.user.DepositListData"/>
    <typeAlias alias="userAddressParam" type="kr.co.hottracks.site.model.common.UserAddressParam"/>
    <typeAlias alias="interestArea" type="kr.co.hottracks.site.model.common.InterestArea"/>
    <typeAlias alias="userOrderInfo" type="kr.co.hottracks.site.model.backoffice.user.UserOrderInfo"/>
    <typeAlias alias="returnExchangeParam" type="kr.co.hottracks.site.model.backoffice.order.ReturnExchangeParam"/>
    <typeAlias alias="depositApp" type="kr.co.hottracks.site.model.common.DepositAppParam"/>
    <typeAlias alias="gsPointParam" type="kr.co.hottracks.site.model.frontoffice.order.GsPointParam"/>
    <typeAlias alias="totMileParam" type="kr.co.hottracks.site.model.common.TotMileParam"/>
    <typeAlias alias="okPointParam" type="kr.co.hottracks.site.model.frontoffice.order.OkPointParam"/>

    <insert id="saveUser" parameterClass="user">
        INSERT INTO tb_user (
            user_num,
            user_id,
            user_name
        ) VALUES (
            #num#,
            #id#,
            #name#
        ) 
    </insert>
    
    <select id="getUserById" parameterClass="userKey" resultClass="user">
        SELECT
               A.user_num         num,
               A.user_id          id,
               B.user_name        name,
               B.user_hdphn_num   handphoneNum,
               B.anvsy_alt_code   annyversaryAlertCode,
               B.user_email_addr  emailAddress,
               B.user_addr        address,
               B.user_dtl_addr    detailAddress,
               B.post_num         postNum,
               B.mall_id          mallId,
               B.agre_dt          agreeDate
          FROM tb_user A, tb_mall_user_detail B
         WHERE A.user_num = B.user_num
           AND B.USER_GRADE_ID IS NOT NULL
           AND A.user_id = #userId# 
           AND B.mall_id = #mallId#
    </select>
    
    <select id="getUserByMotherMall" parameterClass="userKey" resultClass="user">
        /* UserSQL.getUserByMotherMall */
        SELECT A.user_id id
             , B.user_name name
             , B.user_num num
             , nvl((select SA.USER_GUBUN from TB_SPECIAL_USER SA where SA.USER_NUM = A.USER_NUM and SA.USER_USEYN = 'Y'), B.user_grade_id) gradeId
             , B.music_shop_user_grade_id musicShopUserGradeId
             , B.agre_dt agreeDate
             , B.email_recv_yn emailRecvYn
             , B.sms_recv_yn smsRecvYn
             , B.mall_id mallId
             , nvl(B.birth_dt, '00000000') birthDt
             , B.user_gbn userGbn
             , (select 'N' from TB_BLACK_USER SA where SA.USER_NUM = A.USER_NUM and SA.BLACK_GRADE = '01') annyversaryAlertCode
          FROM tb_user A
             , tb_mall_user_detail B
         WHERE A.user_num = B.user_num
           AND B.USER_GRADE_ID IS NOT NULL
           AND A.user_id = #userId#
           AND B.mall_id = #mallId#
    </select>
    
    <select id="getMainUserAddress" parameterClass="user" resultClass="UserAddress">
        SELECT user_num userNum,
               mall_id mallId,
               addr_seq addrSequence,
               name name,
               main_addr_yn mainAddrYn, 
               post_num1 postNum1,
               post_num2 postNum2,
               addr1 addr1,
               addr2 addr2,
               addr3 addr3,
               addr4 addr4,
               tel_num telNum,
               hdphn_num handPhoneNum,
               regst_dtm regstDtm,
               addr_title addrTitle, 
               email_addr emailAddr
          FROM tb_user_address C
         WHERE C.main_addr_yn = 'Y'
           AND user_num = #num#
           AND mall_id = #mallId#
           AND rownum <![CDATA[ < ]]> 2    
    </select>
    
    <update id="updateUserInfoForEvent" parameterClass="user">
        UPDATE tb_mall_user_detail
           SET user_name        = #name#,
               user_hdphn_num   = #handphoneNum#,
               user_email_addr  = #emailAddress#,
               user_addr        = #address#,
               user_dtl_addr    = #detailAddress#,
               post_num         = #postNum#
         WHERE user_num = #num#
           AND mall_id = #mallId#
    </update>
    
    <select id="getUserListByNum" parameterClass="userParam" resultClass="user">
        SELECT
               B.user_num         num,
               A.user_id          id,
               B.user_name        name,
               B.user_hdphn_num   handphoneNum,
               B.anvsy_alt_code   annyversaryAlertCode,
               B.user_email_addr  emailAddress,
               B.user_addr        address,
               B.user_dtl_addr    detailAddress,
               B.post_num         postNum,
               B.mall_id          mallId,
               B.agre_dt          agreeDate
          FROM tb_user A,
               tb_mall_user_detail B
         WHERE A.user_num = B.user_num
           AND B.mall_id = #mallId#
           AND B.user_num IN
            <iterate open="(" close=")" property="userNums" conjunction=",">
                #userNums[]#
            </iterate>
    </select>
    
    <select id="saveUserMallDetail" parameterClass="user">
        INSERT INTO tb_mall_user_detail (
            user_num,
            mall_id, 
            user_name,
            user_hdphn_num,
            user_email_addr,
            user_addr,
            user_dtl_addr,
            post_num
        ) VALUES (
            #num#,
            #mallId#,
            #name#,
            #handphoneNum#,
            #emailAddress#,
            #address#,
            #detailAddress#,
            #postNum#
        ) 
    </select>
    
    <select id="getSimpleUserList" parameterClass="userCriteria" resultClass="user">
        SELECT
               B.user_num num,
               A.user_id id,
               B.user_name name
          FROM tb_user A,
               tb_mall_user_detail B
         WHERE A.user_num = B.user_num
           AND B.mall_id = #mallId#
         <isNotEmpty property="userId" prepend="AND">
            UPPER(A.user_id) like '%' || UPPER(#userId#) || '%'
         </isNotEmpty>
         <isNotEmpty property="userName" prepend="AND">
            UPPER(B.user_name) like '%' || UPPER(#userName#) || '%'
         </isNotEmpty>
         <isNotEmpty property="userNum" prepend="AND">
            A.user_num = #userNum#
         </isNotEmpty>
    </select>
    
    <select id="getSimpleUserCount" parameterClass="userCriteria" resultClass="int">
        SELECT count(*)
          FROM tb_user A,
               tb_mall_user_detail B
         WHERE A.user_num = B.user_num
           AND B.mall_id = #mallId#
         <isNotEmpty property="userId" prepend="AND">
            UPPER(A.user_id) like '%' || UPPER(#userId#) || '%'
         </isNotEmpty>
         <isNotEmpty property="userName" prepend="AND">
            UPPER(B.user_name) like '%' || UPPER(#userName#) || '%'
         </isNotEmpty>
         <isNotEmpty property="userNum" prepend="AND">
            A.user_num = #userNum#
         </isNotEmpty>
    </select> 

    <select id="getSimpleUser" parameterClass="userCriteria" resultClass="user">
        SELECT B.user_num num,
               A.user_id id,
               B.user_name name
          FROM tb_user A,
               tb_mall_user_detail B
         WHERE A.user_num = B.user_num
           AND B.mall_id = #mallId#
           AND A.user_num = #userNum#
    </select>

    <sql id="userCondition">
        <isNotEmpty property="userId" prepend="AND">
            UPPER(A.user_id) like '%' || UPPER(#userId#) || '%'
        </isNotEmpty>
        <isNotEmpty property="userName" prepend="AND">
            UPPER(B.user_name) like '%' || UPPER(#userName#) || '%'
        </isNotEmpty>
        <isNotEmpty property="userNum" prepend="AND">
            A.user_num = #userNum#
        </isNotEmpty>
        <isNotEmpty property="orderNum" prepend="AND">
            A.user_num = (SELECT user_num FROM tb_order WHERE order_num = #orderNum#)
        </isNotEmpty>
        <isNotEmpty property="userGradeId" prepend="AND">
            B.user_grade_id = #userGradeId#
        </isNotEmpty>
        <isNotEmpty property="musicShopUserGradeId" prepend="AND">
            B.music_shop_user_grade_id = #musicShopUserGradeId#
        </isNotEmpty>
        <isNotEmpty property="selectedUsers" prepend="AND">
            A.user_num not in
            <iterate property="selectedUsers" conjunction="," open="(" close=")">
                #selectedUsers[]#
            </iterate> 
        </isNotEmpty>
        <isNotEmpty property="beginOrderDate" prepend="AND">
            EXISTS (SELECT * FROM tb_order A0 WHERE A0.order_dtm <![CDATA[ > ]]> to_date(#beginOrderDate#) and A0.user_num = B.user_num)
        </isNotEmpty>
        <isNotEmpty property="endOrderDate" prepend="AND">
            EXISTS (SELECT * FROM tb_order A1 WHERE A1.order_dtm <![CDATA[ < ]]> to_date(#endOrderDate#) and A1.user_num = B.user_num)
        </isNotEmpty>
        <isNotEmpty property="orderNum" prepend="AND">
            EXISTS (SELECT * FROM tb_order A2 WHERE A2.order_num = #orderNum# and A2.user_num = B.user_num)
        </isNotEmpty>
        <isEqual property="depositYn" prepend="AND" compareValue="true">
            FC_GET_USER_DEPOSIT(B.user_num, B.mall_id) != 0
        </isEqual>
    </sql>
    
    <select id="getUserList" parameterClass="listUserCriteria" resultClass="listUserData">
        SELECT
               B.user_num userNum,
               A.user_id userId,
               B.user_name userName,
               B.user_grade_id userGradeId,
               B.music_shop_user_grade_id musicShopUserGradeId,
               0 saved,
               FC_GET_USER_DEPOSIT(B.user_num, B.mall_id) deposit,
               B.mall_id mallId,
               B.agre_dt agreeDate,
               sum(FC_GET_USER_DEPOSIT(B.user_num, B.mall_id)) over() totAmt
          FROM tb_user A,
               tb_mall_user_detail B
         WHERE A.user_num = B.user_num
           AND B.mall_id = #mallId#
         <dynamic prepend="AND">
             <include refid="userCondition"/>
         </dynamic>
    </select>
    
    <select id="getUserListCount" parameterClass="listUserCriteria" resultClass="int">
        SELECT count(*)
          FROM tb_user A,
               tb_mall_user_detail B
         WHERE A.user_num = B.user_num
           AND B.mall_id = #mallId#
           AND rownum <![CDATA[ < ]]> #topCount# + 1
         <dynamic prepend="AND">
             <include refid="userCondition"/>
         </dynamic>
    </select>
    
    <select id="getSelectedUsers" parameterClass="listUserCriteria" resultClass="listUserData">
        SELECT
               B.user_num userNum,
               A.user_id userId,
               B.user_name userName,
               B.user_grade_id userGradeId,
               B.music_shop_user_grade_id musicShopUserGradeId,
               0 saved,
               B.mall_id mallId,
               FC_GET_USER_DEPOSIT(B.user_num, B.mall_id) deposit
          FROM tb_user A,
               tb_mall_user_detail B
         WHERE A.user_num = B.user_num
           AND B.mall_id = #mallId#
           AND A.user_num in
            <iterate property="selectedUsers" conjunction="," open="(" close=")">
                #selectedUsers[]#
            </iterate> 
    </select>
    
    <insert id="insertUserSaved" parameterClass="savedParam">
        <selectKey keyProperty="savedSeq" resultClass="int" type="pre">
            SELECT nvl(max(SAVED_SEQ),0)+1 savedSeq FROM tb_user_saved WHERE USER_NUM =#userNum# AND MALL_ID=#mallId#
        </selectKey>
        INSERT INTO tb_user_saved
        (
            USER_NUM
            , MALL_ID
            , SAVED_SEQ
            , CHNG_AMT
            , MOD_DTM
            , MOD_RSN_CODE
            , ORDER_NUM
            , ORDER_PRDT_INSEQ
            , MOD_RSN_CONT
            , SAVED_ID
            , admin_id
        ) 
        VALUES
        (
            #userNum#
            , #mallId#
            , #savedSeq#
            , #chngAmt#
            , SYSDATE
            , #modRsnCode#
            , #orderNum#
            , #orderPrdtInseq#
            , #modRsnCont#
            , #savedId#
            , #adminId#
        )
    </insert>
    
    <insert id="insertTotUserSaved" parameterClass="totMileParam">
        <selectKey keyProperty="totsavedSeq" resultClass="int" type="pre">
            SELECT nvl(max(SAVED_SEQ),0)+1 totsavedSeq FROM tb_user_totsaved WHERE USER_NUM =#v_sUser_Num# AND MALL_ID='02'
        </selectKey>
        INSERT INTO tb_user_totsaved
        (
            USER_NUM
            , MALL_ID
            , SAVED_SEQ
            , CHNG_AMT
            , MOD_DTM
            , MOD_RSN_CODE
            , ORDER_NUM
            , ORDER_PRDT_INSEQ
            , MOD_RSN_CONT
            , SAVED_ID
            , admin_id
        ) 
        VALUES
        (
              #v_sUser_Num#
            , '02'
            , #totsavedSeq#
            , #v_sUse_Amt#
            , SYSDATE
            , #v_sPoint_Kind#
            , #v_sJumun_Num#
            , ''
            , ''
            , #v_sJumun_Num#
            , ''
        )
    </insert>
    
    <insert id="saveMileagePopupApp" parameterClass="savedParam">
        insert into TB_USER_SAVED_APPLY ( APPLYDT
                                     , SEQ
                                     , APPLYST
                                     , APPLYAMT
                                     , APPLYCONT
                                     , REGID
                                     , REGDT
                                     , REGTM
                                     , CONFORMID
                                     , CONFORMDT
                                     , CONFORMTM
                                     , CONFORMCONT 
                                     , USERNUM )
                                select to_char(sysdate,'yyyymmdd') APPLYDT
                                     , nvl(max(SEQ),0) + 1 SEQ 
                                     , '01' APPLYST
                                     , #chngAmt# APPLYAMT
                                     , #modRsnCont# APPLYCONT
                                     , #adminId# REGID
                                     , to_char(sysdate,'yyyymmdd') REGDT
                                     , to_char(sysdate,'HH24MISS') REGTM
                                     , '' CONFORMID
                                     , '' CONFORMDT
                                     , '' CONFORMTM
                                     , '' CONFORMCONT 
                                     , #userNum#
                                  from TB_USER_SAVED_APPLY
    </insert>
    
    <select id="selectPopupListMileage" parameterClass="savedCriteria" resultClass="savedParam">
        SELECT 
               A.USER_NUM userNum
               , A.MALL_ID mallId
               , A.SAVED_SEQ savedSeq
               , A.CHNG_AMT chngAmt
               , A.MOD_DTM modDtm
               , A.MOD_RSN_CODE modRsnCode
               , A.ORDER_NUM orderNum
               , A.ORDER_PRDT_INSEQ orderPrdt
               , A.MOD_RSN_CONT modRsnCont
               , B.admin_id adminId
               , B.admin_name adminName
          FROM tb_user_saved A, tb_admin B
         WHERE A.USER_NUM =#userNum#
           AND A.MALL_ID =#mallId# 
           AND A.admin_id = B.admin_id(+)
      ORDER BY SAVED_SEQ desc
      
    </select>
    
    <select id="selectPopupListMileageCount" parameterClass="savedCriteria" resultClass="Integer">
        SELECT 
               count(USER_NUM)
          FROM tb_user_saved
         WHERE USER_NUM =#userNum# 
           AND MALL_ID =#mallId#
    </select>
    
    <insert id="saveDeposit" parameterClass="deposit">
        <selectKey keyProperty="sequence" resultClass="int" type="pre">
            SELECT dpst_seq.nextval FROM dual
        </selectKey>
        INSERT INTO tb_deposit (
            dpst_seq,
            chng_amt,
            mod_dtm,
            dpst_chng_rsn_code,
            non_user_order_num,
            pymnt_order_num,
            pymnt_inseq,
            rpmnt_acnt_num,
            rtn_seq,
            chng_rsn_cont,
            user_num,
            mall_id,
            user_yn,
            bank_code,
            anct_hldr_name,
            rpmnt_req_dtm,
            rpmnt_cmplt_dtm,
            mngr_admin_id,
            pre_acnt_hldr_name,
            pre_rpmnt_acnt_num,
            pre_bank_code,
            pre_proc_yn
        ) VALUES (
            #sequence#,
            #changeAmount#,
            sysdate,
            #changeReasonCode#,
            #nonUserOrderNum#,
            #paymentOrderNum#,
            #paymentInnerSequence#,
            #paymentAccountNum#,
            #returnSequence#,
            #changeReasonContent#,
            #userNum#,
            #mallId#,
            #userYn#,
            #bankCode#,
            #accountHolderName#,
            #repaymentRequestDatetime#,
            #repaymentCompleteDatetime#,
            #managerAdminId#,
            #preAccountHolderName#,
            #prePaymentAccountNum#,
            #preBankCode#,
            #preProcessYn#
        ) 
    </insert>
    <select id="getDepositListByUser" parameterClass="userCriteria" resultClass="deposit">
        SELECT 
               dpst_seq sequence,
               chng_amt changeAmount,
               mod_dtm modifyDatetime,
               dpst_chng_rsn_code changeReasonCode,
               non_user_order_num nonUserOrderNum,
               pymnt_order_num paymentOrderNum,
               pymnt_inseq paymentInnerSequence,
               rpmnt_acnt_num paymentAccountNum,
               rtn_seq returnSequence,
               chng_rsn_cont changeReasonContent,
               user_num userNum,
               mall_id mallId,
               user_yn userYn,
               bank_code bankCode,
               anct_hldr_name accountHolderName,
               rpmnt_req_dtm repaymentRequestDatetime,
               rpmnt_cmplt_dtm repaymentCompleteDatetime,
               mngr_admin_id managerAdminId,
               pre_acnt_hldr_name preAccountHolderName,
               pre_rpmnt_acnt_num prePaymentAccountNum,
               pre_bank_code preBankCode,
               pre_proc_yn preProcessYn
          FROM tb_deposit
         WHERE user_yn = 'Y'
           AND user_num = #userNum#
           AND mall_id = #mallId#
         ORDER BY dpst_seq DESC
    </select> 
    
    <select id="getDepositListByUserCount" parameterClass="userCriteria" resultClass="int">
        SELECT count(*) 
          FROM tb_deposit
         WHERE user_yn = 'Y'
           AND user_num = #userNum#
           AND mall_id = #mallId#
    </select>
    
    <cacheModel type="LRU" id="userGradeMasterChache" readOnly="true">
        <flushInterval hours="24"/>
        <property name="size" value="10"/>
    </cacheModel>
    
    <cacheModel type="LRU" id="musicShopUserGradeChache" readOnly="true">
        <flushInterval hours="24"/>
        <property name="size" value="10"/>
    </cacheModel>
    
    <select id="selectUserGradeMasterList" resultClass="userGradeMaster" cacheModel="userGradeMasterChache">
        SELECT  user_grade_id userGradeId
              , user_grade_name userGradeName
          FROM  tb_user_grade_master
    </select>
    
    <select id="selectMusicShopUserGradeList" resultClass="userGradeMaster" cacheModel="musicShopUserGradeChache">
        SELECT  music_shop_user_grade_id userGradeId
              , user_grade_name userGradeName
          FROM  tb_music_shop_user_grade
    </select>
    
    <select id="selectUserPropertyInfo" parameterClass="user" resultClass="userProperty">
        SELECT  nvl((select SA.USER_GUBUN from TB_SPECIAL_USER SA where SA.USER_NUM = A.USER_NUM and SA.USER_USEYN = 'Y'), B.user_grade_id) gradeId
              , FC_GET_USER_DEPOSIT(B.user_num, B.mall_id) deposit
              , (SELECT COUNT(*)
                   FROM  tb_user_coupon C
                  WHERE  C.user_num = A.user_num
                    AND  C.mall_id = B.mall_id
                    AND  TO_CHAR(SYSDATE, 'yyyyMMdd') <![CDATA[<=]]> C.cpn_valid_dt
                    AND  C.user_cpn_stat_code = 'C0611'
                ) usableCouponCount
             , FC_GET_STEP_LIMITAMT(A.USER_NUM) limitAmt
          FROM  tb_user A
              , tb_mall_user_detail B
         WHERE  A.user_num = B.user_num
           AND  A.user_num = #num#
           AND  B.mall_id = #mallId#
    </select>
    
    <select id="selectUserCoupon" parameterClass="userCriteria" resultClass="userCouponListData">
        SELECT a.user_num user_num
               , a.mall_id                mallId
               , a.user_cpn_seq         userCouponSequence
               , a.cpn_gain_dtm         couponGainDatetime
               , a.order_num             orderNum
               , a.order_prdt_inseq     orderProductInnerSequence
               , a.cpn_use_dtm             couponUseDatetime
               , a.kyobo_cpn_id         kyoboCouponId
               , a.cpn_valid_dt            couponValidDate
               , a.user_cpn_stat_code     userCouponStatusCode
               , a.cpn_id                 couponId
               , c.cpn_name                couponName
               , c.scope_gbn            scopeGbn
               , C.CPN_APPLY_START_DT   couponApplyStartDate
               , C.CPN_APPLY_END_DT     couponApplyEndDate
               , CASE
                    WHEN to_char(sysdate, 'yyyyMMdd') <![CDATA[>]]> C.cpn_apply_end_dt THEN 'X'
                    WHEN C.use_yn = 'N' THEN 'X'
                    WHEN a.user_cpn_stat_code = 'C0611' 
                     AND to_char(sysdate, 'yyyyMMdd') <![CDATA[<=]]> C.cpn_apply_end_dt 
                     AND to_char(sysdate, 'yyyyMMdd') <![CDATA[<=]]> a.cpn_valid_dt THEN 'C'
                    WHEN a.user_cpn_stat_code = 'C0613' 
                     AND to_char(sysdate, 'yyyyMMdd') <![CDATA[<=]]> C.cpn_apply_end_dt 
                     AND to_char(sysdate, 'yyyyMMdd') <![CDATA[<=]]> a.cpn_valid_dt
                     AND EXISTS (SELECT * 
                                   FROM tb_user_coupon X1 
                                  WHERE X1.cpn_id = A.cpn_id
                                    AND X1.kyobo_cpn_id = A.kyobo_cpn_id
                                    AND X1.user_cpn_stat_code = 'C0611'
                                    AND to_char(sysdate, 'yyyyMMdd') <![CDATA[<=]]> X1.cpn_valid_dt) THEN 'XU'
                    WHEN a.user_cpn_stat_code = 'C0613'
                     AND to_char(sysdate, 'yyyyMMdd') <![CDATA[<=]]> C.cpn_apply_end_dt 
                     AND to_char(sysdate, 'yyyyMMdd') <![CDATA[<=]]> a.cpn_valid_dt
                     AND NOT EXISTS (SELECT * 
                                       FROM tb_user_coupon X1 
                                      WHERE X1.cpn_id = A.cpn_id
                                        AND X1.kyobo_cpn_id = A.kyobo_cpn_id
                                        AND X1.user_cpn_stat_code = 'C0611'
                                        AND to_char(sysdate, 'yyyyMMdd') <![CDATA[<=]]> X1.cpn_valid_dt) THEN 'U'
                    WHEN to_char(sysdate, 'yyyyMMdd') <![CDATA[<=]]> C.cpn_apply_end_dt 
                     AND EXISTS (SELECT * 
                                   FROM tb_user_coupon X1 
                                  WHERE X1.cpn_id = A.cpn_id
                                    AND X1.kyobo_cpn_id = A.kyobo_cpn_id
                                    AND X1.user_cpn_stat_code = 'C0611'
                                    AND to_char(sysdate, 'yyyyMMdd') <![CDATA[<=]]> X1.cpn_valid_dt) THEN 'XR'
                    ELSE 'R'
                 END couponStatusGbn
          FROM tb_user_coupon a, 
                 tb_mall_user_detail b,
                  tb_coupon_master c,
               tb_user d
         WHERE a.user_num = b.user_num
           AND a.mall_id = b.mall_id
           AND a.cpn_id = c.cpn_id
           AND d.user_num = b.user_num
           AND B.user_num = #userNum#
           AND B.mall_id = #mallId#
         ORDER BY A.user_cpn_seq DESC
    </select>
    
    <select id="selectUserCouponCount" parameterClass="userCriteria" resultClass="Integer">
        SELECT count(a.cpn_id)
          FROM tb_user_coupon a, 
                 tb_mall_user_detail b,
                  tb_coupon_master c,
               tb_user d
         WHERE a.user_num = b.user_num
           AND a.mall_id = b.mall_id
           AND a.cpn_id = c.cpn_id
           AND d.user_num = b.user_num
           AND B.user_num = #userNum#
           AND B.mall_id = #mallId#   
    </select>
    
    <sql id="fromGetListUserInfo">
        FROM
            tb_user a
        JOIN
            tb_mall_user_detail b ON (b.user_num = a.user_num)
        LEFT OUTER JOIN
            tb_user_address c ON (c.user_num = b.user_num and c.mall_id = b.mall_id and c.main_addr_yn = 'Y')
        WHERE
            b.mall_id = '02'
        <isNotEmpty prepend="AND" property="joinStartDate">
            b.agre_dt <![CDATA[>=]]> #joinStartDate#
        </isNotEmpty>
        <isNotEmpty prepend="AND" property="joinEndDate">
            b.agre_dt <![CDATA[<=]]> #joinEndDate#
        </isNotEmpty>
        <isNotEmpty prepend="AND" property="userName">
            UPPER(b.user_name) LIKE '%'||UPPER(#userName#)||'%'
        </isNotEmpty>
        <isNotEmpty prepend="AND" property="userId">
            UPPER(a.user_id) LIKE '%'||UPPER(#userId#)||'%'
        </isNotEmpty>
        <isNotEmpty prepend="AND" property="userWarnCode">
            user_warn_code = #userWarnCode#
        </isNotEmpty>
        <isNotEmpty prepend="AND" property="userGradeId">
            user_grade_id = #userGradeId#
        </isNotEmpty>
        <isNotEmpty prepend="AND" property="musicShopUserGradeId">
            music_shop_user_grade_id = #musicShopUserGradeId#
        </isNotEmpty>
    </sql>
    
    <select id="getListUserInfo" parameterClass="userCriteria" resultClass="userParam">
        /*UserSQL.getListUserInfo*/
        SELECT
              a.user_id         id
            , a.user_num        num
            , b.htrs_user_num   hottracksNum
            , b.user_name       name
            , b.user_grade_id   gradeId
            , b.agre_dt         agreeDate
            , (select user_grade_name
               from tb_user_grade_master
               where user_grade_id = b.user_grade_id) gradeName 
            , c.tel_num         telNum
            , c.hdphn_num       handphoneNum
            , c.email_addr      emailAddress
        <include refid="fromGetListUserInfo"/>
        ORDER BY
            <isEqual property="orderBy" compareValue="joinDateAsc">
                b.agre_dt ASC
            </isEqual>
            <isEqual property="orderBy" compareValue="joinDateDesc">
                b.agre_dt DESC
            </isEqual>
            <isEqual property="orderBy" compareValue="userNameAsc">
                b.user_name ASC
            </isEqual>
            <isEqual property="orderBy" compareValue="userNameDesc">
                b.user_name Desc
            </isEqual>
            <isEqual property="orderBy" compareValue="userIdAsc">
                a.user_id ASC
            </isEqual>
            <isEqual property="orderBy" compareValue="userIdDesc">
                a.user_id DESC
            </isEqual>
    </select>
    
    <select id="getCountOfListUserInfo" parameterClass="userCriteria" resultClass="int">
        /*UserSQL.getCountOfListUserInfo*/
        SELECT
            COUNT(*)
        <include refid="fromGetListUserInfo"/>
        AND
            rownum <![CDATA[ < ]]> #topCount# + 1
    </select>
    
    <select id="getUserInfoByHottracksNum" parameterClass="string" resultClass="userParam">
        SELECT a.user_id id ,
          b.user_grade_id gradeId ,
          b.user_warn_code userWarnCode ,
          b.htrs_user_num hottracksNum ,
          b.agre_dt agreeDate ,
          b.email_recv_yn emailReceiveYn ,
          b.sms_recv_yn smsReceiveYn ,
          c.han_name name ,
          c.jumin_no1 juminNo1 ,
          c.jumin_no2 juminNo2 ,
          c.birth_date birthDate ,
          c.birth_gubun birthGubun ,
          c.marry_date marryDate ,
          c.marry_gubun marryGubun ,
          d.post_num1 postNum1 ,
          d.post_num2 postNum2 ,
          d.addr1 address1 ,
          d.addr2 address2 ,
          d.addr3 address3 ,
          d.addr4 address4 ,
          d.tel_num telNum ,
          d.hdphn_num handphoneNum ,
          d.email_addr emailAddress ,
          b.mall_id mallId ,
          NVL(d.addr_seq,0) addrSeq ,
          b.user_num num,
          d.addr_gbn addrGbn,
          d.addr_title addrTitle,
          B.user_gbn userGbn
        FROM TB_USER a,
          TB_MALL_USER_DETAIL b
          LEFT OUTER JOIN TB_USER_ADDRESS d
          ON b.USER_NUM      = d.USER_NUM
          AND d.MAIN_ADDR_YN = 'Y',
          MEM_MASTER@MEM c
        WHERE a.USER_NUM    = b.USER_NUM
        AND b.MALL_ID = '02'
        AND a.USER_NUM      = #userNum#
        AND c.CARD_GUBUN    = SUBSTR(b.HTRS_USER_NUM, 1, 2)
        AND c.CARD_NO       = SUBSTR(b.HTRS_USER_NUM, 3, 6)
        AND c.CARD_CHECK    = SUBSTR(b.HTRS_USER_NUM, 9)
    </select>
    
    <select id="getListUserByGrade" parameterClass="string" resultClass="user">
        /*UserSQL.getListUserByGrade*/
        SELECT user_num    num, 
               mall_id   mallId
          FROM tb_mall_user_detail
         WHERE user_grade_id = #gradeId#
           AND mall_id = '02'
            
    </select>
    
    <select id="getListUserForFirstPurchase" resultClass="user">
        SELECT B.user_id id, 
               A.user_num num,
               A.mall_id mallId 
          FROM tb_mall_user_detail A,
               tb_user B
         WHERE A.user_num = B.user_num
           AND A.mall_id = '02'
           AND EXISTS (SELECT * FROM tb_order A1 WHERE user_num = A.user_num AND A1.order_user_yn = 'Y')
           AND NOT EXISTS (SELECT *
                             FROM tb_user_coupon A1, 
                                  tb_htrs_mall_user_plcy_cpn B1
                            WHERE A1.cpn_id = B1.cpn_id
                              AND B1.plcy_id in ('04')
                              AND A1.user_num = A.user_num
                              AND A1.mall_id = A.mall_id)
    </select>
    
    <select id="getUserOrderListForSavedOrderProduct" resultClass="userOrder">
        SELECT A.mall_id mallId
             , A.user_num userNum
             , A0.user_id userId
             , F.order_num orderNum
             , F.order_prdt_inseq productInnerSequence
             , E.ORDER_DLVY_PRDT_SEQ orderDlvyPrdtSeq
          FROM tb_user A0,
               tb_order A, 
               tb_order_destination B,
               tb_order_delivery_request C,
               tb_delivery D,
               tb_order_delivery_product E,
               tb_order_product F
         WHERE 
               A.mall_id = '02'
           AND A0.user_num = A.user_num
           AND A.order_user_yn = 'Y'
           AND A.order_num = B.order_num
           AND B.order_num = C.order_num 
           AND B.order_dest_inseq = C.order_dest_inseq
           AND C.order_num = D.order_num 
           AND C.order_dest_inseq = D.order_dest_inseq
           AND C.dlvy_vndr_id = D.dlvy_vndr_id
           AND D.ccl_yn = 'Y'
           AND D.dlvy_gbn_code = 'C0131'
           AND D.dlvy_id = E.dlvy_id
           AND E.order_num = F.order_num
           AND E.order_prdt_inseq = F.order_prdt_inseq
           AND exists (SELECT * 
                         FROM tb_order_product_saved A1 
                        WHERE a1.order_num = F.order_num 
                          AND a1.order_prdt_inseq = F.order_prdt_inseq
                          AND a1.saved_yn = 'N' 
                          AND save_gbn_code in ('C0681', 'C0682', 'C0683', 'C0686' ,'C0687' ,'C0688' ,'C0689' ,'C068A'))
        GROUP BY A.mall_id, A.user_num, F.order_num, F.order_prdt_inseq, A0.user_id, E.ORDER_DLVY_PRDT_SEQ
    </select>
    
    <select id="getUserOrderListForAmtOrderProduct" resultClass="userOrder">
        SELECT A.mall_id mallId
             , A.user_num userNum
             , A0.user_id userId
             , F.order_num orderNum
             , F.order_prdt_inseq productInnerSequence
             , E.ORDER_DLVY_PRDT_SEQ orderDlvyPrdtSeq
          FROM tb_user A0,
               tb_order A, 
               tb_order_destination B,
               tb_order_delivery_request C,
               tb_delivery D,
               tb_order_delivery_product E,
               tb_order_product F
         WHERE A.mall_id = '02'
           AND A0.user_num = A.user_num
           AND A.order_user_yn = 'Y'
           AND A.order_num = B.order_num
           AND B.order_num = C.order_num 
           AND B.order_dest_inseq = C.order_dest_inseq
           AND C.order_num = D.order_num 
           AND C.order_dest_inseq = D.order_dest_inseq
           AND C.dlvy_vndr_id = D.dlvy_vndr_id
           AND D.ccl_yn = 'Y'
           AND D.dlvy_gbn_code = 'C0131'
           AND D.dlvy_id = E.dlvy_id
           AND E.order_num = F.order_num
           AND E.order_prdt_inseq = F.order_prdt_inseq
           AND E.SAVED_YN is null
        GROUP BY A.mall_id, A.user_num, F.order_num, F.order_prdt_inseq, A0.user_id, E.ORDER_DLVY_PRDT_SEQ
    </select>
    
    <select id="getUserOrderListForReturnOrderProduct"  resultClass="userOrder">
        SELECT A.mall_id mallId,
               A.user_num userNum,
               A0.user_id userId,
               F.order_num orderNum,
               F.order_prdt_inseq productInnerSequence 
          FROM tb_user A0,
               tb_order A,
               tb_return_exchange_master C,
               tb_delivery D,
               tb_order_delivery_product E,
               tb_order_product F       
         WHERE A.mall_id = '02'
           AND A0.user_num = A.user_num
           AND A.order_user_yn = 'Y'
           AND A.order_num = C.order_num 
           AND C.cnsl_gbn_code = 'C0266'
           AND D.ccl_yn = 'Y'
           /* this is test AND A.order_num = '201107110002' */
           AND D.dlvy_gbn_code = 'C0132'
           AND C.rtn_seq = D.rtn_seq
           AND D.dlvy_id = E.dlvy_id
           AND E.order_num = F.order_num
           AND E.order_prdt_inseq = F.order_prdt_inseq
           AND exists (SELECT * 
                         FROM tb_order_product_saved A1 
                        WHERE a1.order_num = F.order_num 
                          AND a1.order_prdt_inseq = F.order_prdt_inseq
                          AND a1.saved_yn = 'N' 
                          AND save_gbn_code in ('C0684', 'C0685'))
        GROUP BY A.mall_id, A.user_num, F.order_num, F.order_prdt_inseq, A0.user_id
    </select>
    
    <select id="selectListUserSaved" parameterClass="listUserCriteria" resultClass="savedParam">
        SELECT
          A.MOD_DTM modDtm
        , A.MOD_RSN_CODE modRsnCode
        , A.MOD_RSN_CONT modRsnCont
        , A.CHNG_AMT chngAmt
        , A.SAVED_ID savedId
        , A.ORDER_NUM orderNum
        FROM
          TB_USER_SAVED A
        WHERE
          A.USER_NUM = #userNum#
        AND A.MALL_ID = #mallId#
        <isEqual property="savedYN" compareValue="0" prepend="AND">
            A.CHNG_AMT <![CDATA[ > ]]> 0
        </isEqual>
        <isEqual property="savedYN" compareValue="1" prepend="AND">
            A.CHNG_AMT <![CDATA[ < ]]> 0
        </isEqual>
        ORDER BY A.MOD_DTM DESC
    </select>
    
    <select id="getListUserTotSaved" parameterClass="listUserCriteria" resultClass="savedParam">
        /* UserSQL.getListUserTotSaved */
        select MOD_DTM modDtm
             , (case when MOD_RSN_CODE = '101' then '적립'
                     when MOD_RSN_CODE = '102' then '적립취소'
                     when MOD_RSN_CODE = '118' and MOD_RSN_CONT = 'Hottracks Event' THEN '이벤트적립'
                     when MOD_RSN_CODE = '118' and MOD_RSN_CONT = 'Hottracks Comment Event' THEN '상품후기 적립'
                     when MOD_RSN_CODE = '105' then '사용'
                     when MOD_RSN_CODE = '107' then '사용취소'
                     else ''
                 end) || ' 핫트랙스 온라인' modRsnCode
             , (case when MOD_RSN_CODE = '101' then '구매적립' 
                     when MOD_RSN_CODE = '102' then '구매적립취소'
                     when MOD_RSN_CODE = '118' and MOD_RSN_CONT = 'Hottracks Event' THEN '이벤트적립'
                     when MOD_RSN_CODE = '118' and MOD_RSN_CONT = 'Hottracks Comment Event' THEN '상품후기 적립'
                     when MOD_RSN_CODE = '105' then '상품주문시 사용'
                     when MOD_RSN_CODE = '107' then '상품주문시 사용취소'
                     else ''
                 end) modRsnCont
             , (case when MOD_RSN_CODE = '101' then CHNG_AMT
                     when MOD_RSN_CODE = '102' then -CHNG_AMT
                     when MOD_RSN_CODE = '118' THEN CHNG_AMT
                     when MOD_RSN_CODE = '105' then 0
                     when MOD_RSN_CODE = '107' then 0
                     else CHNG_AMT
                 end) chngAmt
             , (case when MOD_RSN_CODE = '101' then 0
                     when MOD_RSN_CODE = '102' then 0
                     when MOD_RSN_CODE = '118' then 0
                     when MOD_RSN_CODE = '105' then CHNG_AMT
                     when MOD_RSN_CODE = '107' then -CHNG_AMT
                     else 0
                 end) productPrice
             , (case when MOD_RSN_CODE = '101' then to_char(last_day(add_months(MOD_DTM,12)),'yyyy-mm-dd') 
                     when MOD_RSN_CODE = '102' then to_char(last_day(add_months(MOD_DTM,12)),'yyyy-mm-dd')
                     when MOD_RSN_CODE = '105' then '-'
                     when MOD_RSN_CODE = '107' then '-'
                     when MOD_RSN_CODE = '118' then to_char(last_day(add_months(MOD_DTM,12)),'yyyy-mm-dd')
                 end) savedId
          from TB_USER_TOTSAVED
         where USER_NUM = #userNum#
           and MALL_ID = #mallId#
           <isNotEmpty property="beginOrderDate">
           and MOD_DTM between add_months(sysdate,-#beginOrderDate#) and sysdate
           </isNotEmpty>
           <isEmpty property="beginOrderDate">
           and MOD_DTM between add_months(sysdate,-3) and sysdate
           </isEmpty>
           <isEqual property="endOrderDate" compareValue="2">
            and MOD_RSN_CODE in ('101','102','118')
           </isEqual>
           <isEqual property="endOrderDate" compareValue="3">
            and MOD_RSN_CODE in ('105','107')
           </isEqual>
         order by MOD_DTM desc
    </select>
    
    <select id="getTotalUseAmt" parameterClass="listUserCriteria" resultClass="int">
        /* UserSQL.getTotalUseAmt */
        select nvl(sum(decode(MOD_RSN_CODE,'105',1,'107',-1) * CHNG_AMT),0)
          from TB_USER_TOTSAVED
         where USER_NUM = #userNum#
           and MALL_ID = #mallId#
           and MOD_RSN_CODE in ('105','107')
           <isNotEmpty property="beginOrderDate">
           and MOD_DTM between add_months(sysdate,-#beginOrderDate#) and sysdate
           </isNotEmpty>
           <isEmpty property="beginOrderDate">
           and MOD_DTM between add_months(sysdate,-3) and sysdate
           </isEmpty>
           
    </select>
    
    <select id="getTotalSaveAmt" parameterClass="listUserCriteria" resultClass="int">
        /* UserSQL.getTotalSaveAmt */
        select nvl(sum(decode(MOD_RSN_CODE,'101',1,'102',-1,'118',1) * CHNG_AMT),0)
          from TB_USER_TOTSAVED
         where USER_NUM = #userNum#
           and MALL_ID = #mallId#
           and MOD_RSN_CODE in ('101','102','118')
           <isNotEmpty property="beginOrderDate">
           and MOD_DTM between add_months(sysdate,-#beginOrderDate#) and sysdate
           </isNotEmpty>
           <isEmpty property="beginOrderDate">
           and MOD_DTM between add_months(sysdate,-3) and sysdate
           </isEmpty>
    </select>
    
    <select id="getListUserTotSavedCount" parameterClass="listUserCriteria" resultClass="int">
        /* UserSQL.getListUserTotSavedCount  */
        SELECT
            COUNT(*)
        FROM
            (
            select MOD_DTM modDtm
              from TB_USER_TOTSAVED
             where USER_NUM = #userNum#
               and MALL_ID = #mallId#
               <isNotEmpty property="beginOrderDate">
               and MOD_DTM between add_months(sysdate,-#beginOrderDate#) and sysdate
               </isNotEmpty>
               <isEmpty property="beginOrderDate">
               and MOD_DTM between add_months(sysdate,-3) and sysdate
               </isEmpty>
               <isEqual property="endOrderDate" compareValue="2">
                and MOD_RSN_CODE in ('101','102','118')
               </isEqual>
               <isEqual property="endOrderDate" compareValue="3">
                and MOD_RSN_CODE in ('105','107')
               </isEqual>
            )
        WHERE  ROWNUM <![CDATA[ < ]]> #topCount# + 1
    </select>
    
    <select id="selectListUserSavedCount" parameterClass="listUserCriteria" resultClass="int">
        /* UserSQL.selectListUserSavedCount  */
        SELECT
            COUNT(*)
        FROM
            (SELECT
              A.MOD_DTM modDtm
            FROM
              TB_USER_SAVED A
            WHERE
              A.USER_NUM = #userNum#
            AND A.MALL_ID = #mallId#
            <isEqual property="savedYN" compareValue="0" prepend="AND">
                A.CHNG_AMT <![CDATA[ > ]]> 0
            </isEqual>
            <isEqual property="savedYN" compareValue="1" prepend="AND">
                A.CHNG_AMT <![CDATA[ < ]]> 0
            </isEqual>)
        WHERE  ROWNUM <![CDATA[ < ]]> #topCount# + 1
    </select>
 
    <insert id="saveUserAddress" parameterClass="userAddress">
        /* UserSQL.saveUserAddress  */ 
        <selectKey keyProperty="addrSequence" resultClass="int" type="pre">
            SELECT nvl(max(addr_seq),0) + 1 addrSequence FROM tb_user_address WHERE USER_NUM =#userNum# AND MALL_ID=#mallId#
        </selectKey>
        INSERT INTO tb_user_address (
            user_num,
            mall_id,
            addr_seq,
            name,
            main_addr_yn,
            addr_gbn, 
            post_num1,
            post_num2,
            addr1,
            addr2,
            addr3,
            addr4,
            tel_num,
            hdphn_num,
            regst_dtm,
            addr_title, 
            email_addr 
        ) VALUES (
            #userNum#,
            #mallId#,
            #addrSequence#,
            #name#,
            #mainAddrYn#,
            #addrGbn#, 
            #postNum1#,
            #postNum2#,
            #addr1#,
            #addr2#,
            #addr3#,
            #addr4#,
            #telNum#,
            #handPhoneNum#,
            sysdate,
            #addrTitle#, 
            #emailAddr#        
        )
    </insert>
    
    <insert id="saveUserSavedError" parameterClass="userSavedError">
        /* UserSQL.saveUserSavedError */ 
        <selectKey keyProperty="errorSequence" resultClass="int" type="pre">
            SELECT error_seq.nextval FROM dual
        </selectKey>
        INSERT INTO TB_USER_SAVED_ERROR (
            error_seq,
            user_num,
            mall_id,
            error_mesg,
            error_cont,
            user_id,
            regst_dtm
        ) VALUES (
            #errorSequence#,
            #userNum#,
            #mallId#,
            #errorMessage#,
            #errorDesc#,
            #userId#,
            #registDatetime#
        )
    </insert>
    
    <sql id="getRepaymentDepositListCondition">
         <isNotEmpty property="beginRequestDate" prepend="AND">
               to_char(repaymentRequestDatetime, 'yyyyMMdd') <![CDATA[ >= ]]> #beginRequestDate#
         </isNotEmpty>
         <isNotEmpty property="endRequestDate" prepend="AND">
               to_char(repaymentRequestDatetime, 'yyyyMMdd') <![CDATA[ <= ]]> #endRequestDate#
         </isNotEmpty>
         <isNotEmpty property="userName" prepend="AND">
               userName like '%' || #userName# || '%'
         </isNotEmpty>
         <isNotEmpty property="userYn" prepend="AND">
               userYn = #userYn#
         </isNotEmpty>
         <isNotEmpty property="repaymentStatusCode" prepend="AND">
               changeReasonCode = #repaymentStatusCode#
         </isNotEmpty>
         <isNotEmpty property="bankCode" prepend="AND">
               bankCode = #bankCode#
         </isNotEmpty>
         <isNotEmpty property="accountHolderName" prepend="AND">
               UPPER(accountHolderName) like '%' || UPPER(#accountHolderName#) || '%'
         </isNotEmpty>
         <isNotEmpty property="paymentAccountNum" prepend="AND">
               paymentAccountNum like '%' || #paymentAccountNum# || '%'
         </isNotEmpty>
    </sql>
    
    <sql id="getRepaymentDepositNoUserListCondition">
         <isNotEmpty property="beginOrderDate" prepend="AND">
               to_char(B.order_dtm, 'yyyyMMdd') <![CDATA[ >= ]]> #beginOrderDate#
         </isNotEmpty>
         <isNotEmpty property="endOrderDate" prepend="AND">
               to_char(B.order_dtm, 'yyyyMMdd') <![CDATA[ <= ]]> #endOrderDate#
         </isNotEmpty>
         <isNotEmpty property="userName" prepend="AND">
               B.buyer_name like '%' || #userName# || '%'
         </isNotEmpty>
         <isNotEmpty property="orderNum" prepend="AND">
               B.order_num like '%' || #orderNum# || '%'
         </isNotEmpty>
         <isNotEmpty property="repaymentStatusCode" prepend="AND">
               A.dpst_chng_rsn_code = #repaymentStatusCode#
         </isNotEmpty>
    </sql>
    
    <select id="getRepaymentDepositCount" resultClass="int" parameterClass="depositReturnCriteria">
        /* UserSQL.getRepaymentDepositCount */
        WITH v_temp AS (
            SELECT null userId,
                   b.buyer_name userName,
                   A.dpst_seq sequence,
                   A.chng_amt changeAmount,
                   A.mod_dtm modifyDatetime,
                   A.dpst_chng_rsn_code changeReasonCode,
                   A.non_user_order_num nonUserOrderNum,
                   A.pymnt_order_num paymentOrderNum,
                   A.pymnt_inseq paymentInnerSequence,
                   A.rpmnt_acnt_num paymentAccountNum,
                   A.rtn_seq returnSequence,
                   A.chng_rsn_cont changeReasonContent,
                   A.user_num userNum,
                   A.mall_id mallId,
                   A.user_yn userYn,
                   A.bank_code bankCode,
                   A.anct_hldr_name accountHolderName,
                   A.rpmnt_req_dtm repaymentRequestDatetime,
                   A.rpmnt_cmplt_dtm repaymentCompleteDatetime,
                   A.pre_acnt_hldr_name preAccountHolderName,
                   A.pre_rpmnt_acnt_num prePaymentAccountNum,
                   A.pre_bank_code preBankCode,
                   A.pre_proc_yn preProcessYn
              FROM tb_deposit A, tb_order B
             WHERE A.dpst_chng_rsn_code in ('C0642', 'C0647', 'C0648', 'C0649')
               AND A.user_yn = 'N'
               AND A.non_user_order_num = B.order_num
            UNION ALL
            SELECT C.user_id userId,
                   B.user_name userName,
                   A.dpst_seq sequence,
                   A.chng_amt changeAmount,
                   A.mod_dtm modifyDatetime,
                   A.dpst_chng_rsn_code changeReasonCode,
                   A.non_user_order_num nonUserOrderNum,
                   A.pymnt_order_num paymentOrderNum,
                   A.pymnt_inseq paymentInnerSequence,
                   A.rpmnt_acnt_num paymentAccountNum,
                   A.rtn_seq returnSequence,
                   A.chng_rsn_cont changeReasonContent,
                   A.user_num userNum,
                   A.mall_id mallId,
                   A.user_yn userYn,
                   A.bank_code bankCode,
                   A.anct_hldr_name accountHolderName,
                   A.rpmnt_req_dtm repaymentRequestDatetime,
                   A.rpmnt_cmplt_dtm repaymentCompleteDatetime,
                   A.pre_acnt_hldr_name preAccountHolderName,
                   A.pre_rpmnt_acnt_num prePaymentAccountNum,
                   A.pre_bank_code preBankCode,
                   A.pre_proc_yn preProcessYn
              FROM tb_deposit A, 
                   tb_mall_user_detail B, 
                   tb_user C
             WHERE A.dpst_chng_rsn_code in ('C0642', 'C0647', 'C0648', 'C0649')
               AND A.user_yn = 'Y'
               AND A.user_num = B.user_num
               AND A.mall_id = B.mall_id
               AND B.user_num = C.user_num
        ) 
        SELECT count(*)
          FROM v_temp
         WHERE 1 = 1
         <dynamic prepend="AND">
             <include refid="getRepaymentDepositListCondition"/>
         </dynamic>
    </select>
    
    <select id="getRepaymentDepositListNoUser" resultClass="depositListData" parameterClass="depositReturnCriteria">
        /* UserSQL.getRepaymentDepositListNoUser */
        SELECT null userId,
               B.buyer_name userName,
               A.dpst_seq sequence,
               A.chng_amt changeAmount,
               A.mod_dtm modifyDatetime,
               A.dpst_chng_rsn_code changeReasonCode,
               A.non_user_order_num nonUserOrderNum,
               A.pymnt_order_num paymentOrderNum,
               A.pymnt_inseq paymentInnerSequence,
               A.rpmnt_acnt_num paymentAccountNum,
               A.rtn_seq returnSequence,
               A.chng_rsn_cont changeReasonContent,
               A.user_num userNum,
               A.mall_id mallId,
               A.user_yn userYn,
               A.bank_code bankCode,
               A.anct_hldr_name accountHolderName,
               A.rpmnt_req_dtm repaymentRequestDatetime,
               A.rpmnt_cmplt_dtm repaymentCompleteDatetime,
               (SELECT sum(chng_amt) FROM tb_deposit WHERE user_yn = 'N' AND non_user_order_num = A.non_user_order_num) sumOfDeposit,
               A.mngr_admin_id managerAdminId,
               (SELECT admin_name FROM tb_admin WHERE admin_id = A.mngr_admin_id) managerAdminName,
               A.pre_acnt_hldr_name preAccountHolderName,
               A.pre_rpmnt_acnt_num prePaymentAccountNum,
               A.pre_bank_code preBankCode,
               A.pre_proc_yn preProcessYn
          FROM tb_deposit A, 
               tb_order B
         WHERE A.user_yn = 'N'
           AND A.non_user_order_num = B.order_num
         <dynamic prepend="AND">
             <include refid="getRepaymentDepositNoUserListCondition"/>
         </dynamic>
         ORDER BY A.dpst_seq DESC
    </select>
    
    <select id="getRepaymentDepositCountNoUser" resultClass="int" parameterClass="depositReturnCriteria">
        SELECT count(*) 
          FROM tb_deposit A, 
               tb_order B
         WHERE A.user_yn = 'N'
           AND A.non_user_order_num = B.order_num
         <dynamic prepend="AND">
             <include refid="getRepaymentDepositNoUserListCondition"/>
         </dynamic>
    </select>
    
    <update id="updateUserAddressMainAddrYn" parameterClass="userAddress">
        UPDATE
                 tb_user_address
           SET
               main_addr_yn = #mainAddrYn#
         WHERE
               user_num  = #userNum#
           AND mall_id = #mallId#
    </update>
   
    <select id="getRepaymentDepositList" resultClass="depositListData" parameterClass="depositReturnCriteria">
        WITH v_temp as (  
            SELECT null userId,
                   b.buyer_name userName,
                   A.dpst_seq sequence,
                   A.chng_amt changeAmount,
                   A.mod_dtm modifyDatetime,
                   A.dpst_chng_rsn_code changeReasonCode,
                   A.non_user_order_num nonUserOrderNum,
                   A.pymnt_order_num paymentOrderNum,
                   A.pymnt_inseq paymentInnerSequence,
                   A.rpmnt_acnt_num paymentAccountNum,
                   A.rtn_seq returnSequence,
                   A.chng_rsn_cont changeReasonContent,
                   A.user_num userNum,
                   A.mall_id mallId,
                   A.user_yn userYn,
                   A.bank_code bankCode,
                   A.anct_hldr_name accountHolderName,
                   A.rpmnt_req_dtm repaymentRequestDatetime,
                   A.rpmnt_cmplt_dtm repaymentCompleteDatetime,
                   (SELECT code_name FROM tb_code WHERE code = bank_code) bankName,
                   CASE WHEN A.chng_amt > 0 THEN A.chng_amt ELSE -A.chng_amt END standardAmount,
                   A.pre_acnt_hldr_name preAccountHolderName,
                   A.pre_rpmnt_acnt_num prePaymentAccountNum,
                   A.pre_bank_code preBankCode,
                   A.pre_proc_yn preProcessYn
              FROM tb_deposit A, tb_order B
             WHERE A.dpst_chng_rsn_code in ('C0642', 'C0647', 'C0648', 'C0649')
               AND A.user_yn = 'N'
               AND A.non_user_order_num = B.order_num
            UNION ALL
            SELECT C.user_id userId,
                   B.user_name userName,
                   A.dpst_seq sequence,
                   A.chng_amt changeAmount,
                   A.mod_dtm modifyDatetime,
                   A.dpst_chng_rsn_code changeReasonCode,
                   A.non_user_order_num nonUserOrderNum,
                   A.pymnt_order_num paymentOrderNum,
                   A.pymnt_inseq paymentInnerSequence,
                   A.rpmnt_acnt_num paymentAccountNum,
                   A.rtn_seq returnSequence,
                   A.chng_rsn_cont changeReasonContent,
                   A.user_num userNum,
                   A.mall_id mallId,
                   A.user_yn userYn,
                   A.bank_code bankCode,
                   A.anct_hldr_name accountHolderName,
                   A.rpmnt_req_dtm repaymentRequestDatetime,
                   A.rpmnt_cmplt_dtm repaymentCompleteDatetime,
                   (SELECT code_name FROM tb_code WHERE code = bank_code) bankName,
                   CASE WHEN A.chng_amt > 0 THEN A.chng_amt ELSE -A.chng_amt END standardAmount,
                   A.pre_acnt_hldr_name preAccountHolderName,
                   A.pre_rpmnt_acnt_num prePaymentAccountNum,
                   A.pre_bank_code preBankCode,
                   A.pre_proc_yn preProcessYn
              FROM tb_deposit A, 
                   tb_mall_user_detail B, 
                   tb_user C
             WHERE A.dpst_chng_rsn_code in ('C0642', 'C0647', 'C0648', 'C0649')
               AND A.user_yn = 'Y'
               AND A.user_num = B.user_num
               AND A.mall_id = B.mall_id
               AND B.user_num = C.user_num
        )
        SELECT userId,
               userName,
               sequence,
               changeAmount,
               modifyDatetime,
               changeReasonCode,
               nonUserOrderNum,
               paymentOrderNum,
               paymentInnerSequence,
               paymentAccountNum,
               returnSequence,
               changeReasonContent,
               userNum,
               mallId,
               userYn,
               bankCode,
               accountHolderName,
               repaymentRequestDatetime,
               repaymentCompleteDatetime,
               bankName,
               preAccountHolderName,
               prePaymentAccountNum,
               preBankCode,
               preProcessYn,
               sum(1) over() orderCnt,               
               sum(changeAmount) over() totAmt
          FROM v_temp
         WHERE 1 = 1
         <dynamic prepend="AND">
             <include refid="getRepaymentDepositListCondition"/>
         </dynamic>
         <isNotEmpty property="orderByGbn">
            <isEqual property="orderByGbn" compareValue="R">
                ORDER BY sequence DESC
            </isEqual>
            <isEqual property="orderByGbn" compareValue="B">
                ORDER BY bankName
            </isEqual>
            <isEqual property="orderByGbn" compareValue="H">
                ORDER BY userName
            </isEqual>
            <isEqual property="orderByGbn" compareValue="A">
                ORDER BY standardAmount DESC
            </isEqual>
         </isNotEmpty>
    </select>
    
    <select id="getDeposit" resultClass="deposit" parameterClass="int">
        SELECT 
               dpst_seq sequence,
               chng_amt changeAmount,
               mod_dtm modifyDatetime,
               dpst_chng_rsn_code changeReasonCode,
               non_user_order_num nonUserOrderNum,
               pymnt_order_num paymentOrderNum,
               pymnt_inseq paymentInnerSequence,
               rpmnt_acnt_num paymentAccountNum,
               rtn_seq returnSequence,
               chng_rsn_cont changeReasonContent,
               user_num userNum,
               mall_id mallId,
               user_yn userYn,
               bank_code bankCode,
               anct_hldr_name accountHolderName,
               rpmnt_req_dtm repaymentRequestDatetime,
               rpmnt_cmplt_dtm repaymentCompleteDatetime,
               pre_acnt_hldr_name preAccountHolderName,
               pre_rpmnt_acnt_num prePaymentAccountNum,
               pre_bank_code preBankCode,
               pre_proc_yn preProcessYn
          FROM tb_deposit
         WHERE dpst_seq = #value#      
    </select>
    
    <update id="updateDeposit" parameterClass="deposit">
        UPDATE tb_deposit
           SET
               chng_amt = #changeAmount#,
               mod_dtm = sysdate,
               dpst_chng_rsn_code = #changeReasonCode#,
               non_user_order_num = #nonUserOrderNum#,
               pymnt_order_num = #paymentOrderNum#,
               pymnt_inseq = #paymentInnerSequence#,
               rpmnt_acnt_num = #paymentAccountNum#,
               rtn_seq = #returnSequence#,
               chng_rsn_cont = #changeReasonContent#,
               user_num = #userNum#,
               mall_id = #mallId#,
               user_yn = #userYn#,
               bank_code = #bankCode#,
               anct_hldr_name = #accountHolderName#,
               rpmnt_req_dtm = #repaymentRequestDatetime#,
               rpmnt_cmplt_dtm = #repaymentCompleteDatetime#,
               mngr_admin_id = #managerAdminId#,
               pre_acnt_hldr_name = #preAccountHolderName#,
               pre_rpmnt_acnt_num = #prePaymentAccountNum#,
               pre_bank_code = #preBankCode#,
               pre_proc_yn = #preProcessYn#
         WHERE dpst_seq = #sequence#
    </update>
    
    <select id="getMaxDepositForNoUser" parameterClass="deposit" resultClass="int">
        SELECT nvl(sum(chng_amt), 0) 
          FROM tb_deposit 
         WHERE user_yn = 'N' 
           AND non_user_order_num = #nonUserOrderNum#
           AND mall_id = #mallId#         
    </select>
    
    <select id="getMaxDepositForUser" parameterClass="deposit" resultClass="int">
        SELECT nvl(sum(chng_amt), 0) 
          FROM tb_deposit 
         WHERE user_yn = 'Y' 
           AND user_num = #userNum#
           AND mall_id = #mallId#
    </select>

    <delete id="deleteDeliveryAddress" parameterClass="userAddress" >
        DELETE
          FROM
                 tb_user_address
         WHERE
               user_num   = #userNum#
           AND mall_id  = #mallId#
           AND ADDR_SEQ = #addrSequence#
    </delete>
    
    <select id="getUserAddressByAddrSequence" parameterClass="userAddress" resultClass="userAddressParam">
        SELECT user_num userNum,
               mall_id mallId,
               addr_seq addrSequence,
               name name,
               main_addr_yn mainAddrYn,
               addr_gbn addrGbn,
               post_num1 postNum1,
               post_num2 postNum2,
               addr1 addr1,
               addr2 addr2,
               addr3 addr3,
               addr4 addr4,
               tel_num telNum,
               hdphn_num handPhoneNum,
               regst_dtm regstDtm,
               addr_title addrTitle, 
               email_addr emailAddr
          FROM tb_user_address
         WHERE user_num = #userNum#
           AND mall_id = #mallId#
           AND addr_seq = #addrSequence#  
    </select>
    
    <select id="selectInterestArea" resultClass="interestArea" parameterClass="user">
        SELECT A.ITRST_ID itrstID,
          A.ITRST_AREA_NAME itrstAreaName,
          A.DISP_ORDER dispOrder,
          CASE
          WHEN B.ITRST_ID IS NOT NULL THEN 'Y'
          ELSE 'N'
          END itrstCheck
        FROM TB_INTEREST_AREA A ,
          (SELECT ITRST_ID
          FROM TB_USER_INTEREST
          WHERE USER_NUM = #num#
          AND MALL_ID    = #mallId#
          ) B
        WHERE A.ITRST_ID = B.ITRST_ID(+) 
    </select>
    
    <update id="updateUserAddress" parameterClass="userAddress">
        UPDATE
               tb_user_address
           SET 
               name         = #name#,
               main_addr_yn = #mainAddrYn#,
               addr_gbn     = #addrGbn#,
               post_num1    = #postNum1#,
               post_num2    = #postNum2#,
               addr1        = #addr1#,
               addr2        = #addr2#,
               addr3        = #addr3#,
               addr4        = #addr4#,
               tel_num      = #telNum#,
               hdphn_num    = #handPhoneNum#,
               regst_dtm    = sysdate,
               addr_title   = #addrTitle#,
               email_addr   = #emailAddr#
         WHERE
               user_num  = #userNum#
           AND mall_id   = #mallId#
           AND addr_seq  = #addrSequence#
    </update>

    <delete id="deleteUserInterestArea" parameterClass="interestArea">
        DELETE
        FROM    TB_USER_INTEREST
        WHERE
            USER_NUM = #userNum#
        AND MALL_ID = #mallId#
    </delete>
    
    <insert id="insertUserInterestArea"  parameterClass="interestArea">
        INSERT INTO TB_USER_INTEREST(USER_NUM, MALL_ID, ITRST_ID)
        VALUES(#userNum#, #mallId#, #itrstID#)
    </insert>
    
    <update id="updateUserWarnCode" parameterClass="userParam">
        UPDATE TB_MALL_USER_DETAIL
        SET USER_WARN_CODE = #userWarnCode#
        WHERE
            USER_NUM = #num#
        AND MALL_ID = #mallId#
    </update>
 
    <select id="getListNewUser" resultClass="user">
        SELECT A.user_id id, 
               A.user_num num,
               B.mall_id mallId
          FROM tb_user A, 
               tb_mall_user_detail B
         WHERE A.user_num = B.user_num
           AND B.mall_id = '02'
           AND (B.user_num, B.mall_id) NOT IN (SELECT user_num, mall_id 
                                                 FROM tb_user_coupon A1, 
                                                      tb_htrs_mall_user_plcy_cpn B1
                                                WHERE A1.cpn_id = B1.cpn_id
                                                  AND B1.plcy_id in ('01', '02')
                                                  AND A1.mall_id = '02')
    </select>
    
    <select id="getListUserForBirthday" resultClass="user">
        SELECT B.user_id id, 
               A.user_num num,
               A.mall_id mallId 
          FROM tb_mall_user_detail A,
               tb_user B
         WHERE to_char(sysdate, 'yyyy') || substr(A.birth_dt, 5) =  to_char(sysdate-7, 'yyyyMMdd')
           AND A.user_num = B.user_num
           AND A.mall_id = '02'
           AND NOT EXISTS (SELECT *
                             FROM tb_user_coupon A1, 
                                  tb_htrs_mall_user_plcy_cpn B1
                            WHERE A1.cpn_id = B1.cpn_id
                              AND B1.plcy_id in ('03')
                              AND A1.user_num = A.user_num
                              AND A1.mall_id = A.mall_id
                              AND A1.cpn_valid_dt BETWEEN to_char(sysdate, 'yyyy') || '0101' AND to_char(sysdate, 'yyyy') || '1231')
    </select>
    
    <select id="getWaitDepositAmount" parameterClass="deposit" resultClass="int">
        SELECT NVL(sum(chng_amt), 0) 
          FROM tb_deposit 
         WHERE dpst_chng_rsn_code = 'C0642'
         <isEqual property="userYn" compareValue="true">
           AND user_num = #userNum#
         </isEqual>
         <isEqual property="userYn" compareValue="false">
           AND non_user_order_num = #nonUserOrderNum#
         </isEqual>
           AND mall_id = #mallId# 
    </select>
    
    <select id="selectUserOrderInfo" parameterClass="string" resultClass="userOrderInfo">
        SELECT NVL(AA.orderCount,0) totalOrderCount,
          NVL(AA.orderPrice,0) totalOrderPrice,
          NVL(BB.CANC_GBN,0) totalCancelCount,
          NVL(BB.RETUN,0) totalRefundCount
        FROM
          (SELECT SUM(T1.orderCount) orderCount,
            SUM(T1.orderPrice) orderPrice,
            T1.USER_NUM
          FROM
            (SELECT a.USER_NUM,
              NVL(COUNT(*),0) orderCount,
              NVL(SUM(b.AMT),0) orderPrice
            FROM TB_ORDER a,
              TB_KYOBO_ORDER_AMOUNT b
            WHERE a.ORDER_NUM = b.ORDER_NUM
            AND a.USER_NUM    = #userNum#
            GROUP BY a.USER_NUM
            UNION
            SELECT a.USER_NUM,
              NVL(COUNT(          *),0) orderCount,
              NVL(SUM(b.PYMNT_AMT + b.CANC_RTN_AMT),0) orderPrice
            FROM TB_ORDER a,
              TB_PAYMENT b
            WHERE a.ORDER_NUM = b.ORDER_NUM
            AND a.USER_NUM    = #userNum#
            GROUP BY a.USER_NUM
            )T1
          GROUP BY T1.USER_NUM
          ) AA,
          (SELECT SUM(
            CASE b.ORDER_CANC_GBN
              WHEN 'C'
              THEN 1
              ELSE 0
            END)CANC_GBN ,
            SUM(
            CASE b.ORDER_CANC_GBN
              WHEN 'R'
              THEN 1
              ELSE 0
            END)RETUN ,
            a.USER_NUM
          FROM TB_ORDER a,
            TB_ORDER_CANCEL_HISTORY b
          WHERE a.ORDER_NUM = b.ORDER_NUM
          AND a.USER_NUM    = #userNum#
          GROUP BY a.USER_NUM
          ) BB
        WHERE AA.USER_NUM = BB.USER_NUM(+)
    </select>
    
    <select id="selectUserReturnExchange" parameterClass="userCriteria" resultClass="returnExchangeParam">
        SELECT
          a.REGST_DTM registDtm,
          a.RTN_SEQ returnSeq,
          a.RTN_REQ_GBN returnRequestGubun,
          a.SOS_CNSL_CODE sosCounselCode,
          a.ORDER_NUM orderNum,
          a.SOS_PROC_GBN sosProcessGubun
        FROM
          TB_RETURN_EXCHANGE_MASTER a
        WHERE
          a.user_num = #userNum#
        ORDER BY a.REGST_DTM DESC
    </select>
    
    <select id="selectUserReturnExchangeCount" parameterClass="userCriteria" resultClass="int">
        SELECT
            COUNT(*)
        FROM
            (SELECT
              a.REGST_DTM registDtm
            FROM
              TB_RETURN_EXCHANGE_MASTER a
            WHERE
              a.user_num = #userNum#)
        WHERE
            ROWNUM <![CDATA[ < ]]> #topCount# + 1
    </select>
    
    <select id="selectUserCouponStatCheck" parameterClass="userCouponListData" resultClass="int">
        SELECT COUNT(*)
          FROM tb_user_coupon 
         WHERE USER_CPN_STAT_CODE = 'C0611'
           AND (USER_NUM, MALL_ID, CPN_ID, KYOBO_CPN_ID) in (SELECT USER_NUM, MALL_ID, CPN_ID, KYOBO_CPN_ID 
                                                               FROM tb_user_coupon
                                                              WHERE USER_NUM = #userNum#
                                                                AND MALL_ID = #mallId#
                                                                AND USER_CPN_SEQ = #userCouponSequence#) 
           AND to_char(sysdate, 'yyyyMMdd') <![CDATA[<=]]> cpn_valid_dt
    </select>
    
    <update id="updateUserCouponCancel" parameterClass="userCouponListData">
        UPDATE TB_USER_COUPON
        SET USER_CPN_STAT_CODE = #userCouponStatusCode#
        WHERE
            USER_NUM = #userNum#
        AND MALL_ID = #mallId#
        AND USER_CPN_SEQ = #userCouponSequence#
    </update>
 
    <select id="getRepqymentAmountByRetruenSequence" parameterClass="int" resultClass="int">
        SELECT nvl(sum(chng_amt), 0) FROM tb_deposit WHERE rtn_seq = #value#
    </select>
    
    <update id="updateUserGrade" parameterClass="user">
        UPDATE tb_mall_user_detail
           SET user_grade_id = #gradeId#
         WHERE mall_id = #mallId#
           AND user_num = #num#
    </update>
    
    <insert id="saveUserGradeChangeHistory" parameterClass="userGradeChangeHistory">
        <selectKey keyProperty="historySequence" resultClass="int" type="pre">
            SELECT nvl(max(hist_seq),0) + 1 historySequence FROM tb_user_grade_change_history WHERE USER_NUM =#userNum# AND MALL_ID=#mallId#
        </selectKey>
        INSERT INTO tb_user_grade_change_history (
            user_num, 
            mall_id,
            hist_seq,
            mod_dtm,
            user_grade_id
        ) VALUES (
            #userNum#,
            #mallId#,
            #historySequence#,
            sysdate,
            #gradeId#
        )
    </insert>
    
    <select id="getMotherMallUserByUserNum" parameterClass="string" resultClass="motherMallUser">
        SELECT 
               user_num userNum,
               mall_id mallId,
               user_grade_id gradeId,
               music_shop_user_grade_id musicShopGradeId,
               user_warn_code warnCode,
               htrs_user_num htrsUserNum,
               agre_dt agreeDate,
               email_recv_yn emailReceiveYn,
               sms_recv_yn smsReceiveYn,
               user_gbn userGbn,
               birth_dt birthDate,
               birth_gbn birthGbn
          FROM tb_mall_user_detail 
         WHERE mall_id = '02'
           AND user_num = #value#
    </select>
    
    <update id="updateMotherMallUser" parameterClass="motherMallUser">
        UPDATE tb_mall_user_detail
           SET
               user_grade_id = #gradeId#,
               music_shop_user_grade_id = #musicShopGradeId#,
               user_warn_code = #warnCode#,
               htrs_user_num = #htrsUserNum#,
               agre_dt = #agreeDate#,
               email_recv_yn = #emailReceiveYn#,
               sms_recv_yn = #smsReceiveYn#,
               user_gbn = #userGbn#,
               birth_dt = #birthDate#,
               birth_gbn = #birthGbn#
         WHERE mall_id = '02'
           AND user_num = #userNum#
    </update>
    
    <select id="getListUser" parameterClass="userCriteria" resultClass="userParam">
        /*UserSQL.getListUser*/
        SELECT
              a.user_id         id
            , a.user_num        num
            , b.htrs_user_num   hottracksNum
            , b.user_name       name
            , b.user_grade_id   gradeId
            , b.agre_dt         agreeDate
            , (select user_grade_name
               from tb_user_grade_master
               where user_grade_id = b.user_grade_id) gradeName 
            , c.tel_num         telNum
            , c.hdphn_num       handphoneNum
            , c.email_addr      emailAddress
            , c.post_num1       postNum1
            , c.post_num2       postNum2
            , c.addr1           address1
            , c.addr2           address2
        FROM
            tb_user a
        JOIN
            tb_mall_user_detail b ON (b.user_num = a.user_num)
        LEFT OUTER JOIN
            tb_user_address c ON (c.user_num = b.user_num and c.mall_id = b.mall_id and c.main_addr_yn = 'Y')
        WHERE
            b.mall_id = '02'
        AND
            UPPER(a.user_id) LIKE '%'||UPPER(#userId#)||'%'
        ORDER BY
            b.user_name
    </select>
    
    <select id="getOrderAmountTerm" parameterClass="map" resultClass="int">
        SELECT nvl(sum(pymnt_amt) + sum(canc_rtn_amt), 0)  
          FROM tb_order A, tb_payment B
         WHERE A.order_num = B.order_num
           AND A.user_num = #userNum#
           AND to_char(order_dtm, 'yyyymm') = #yyyymm#
    </select>
    
    <select id="getOrderCountForLimitPaymentByTerm" parameterClass="map" resultClass="int">
        WITH V_TEMP AS (    
            SELECT nvl(sum(B.pymnt_amt) + sum(B.canc_rtn_amt), 0) amount
              FROM tb_order A, 
                   tb_payment B
             WHERE A.order_num = B.order_num
               AND A.user_num = #userNum#
               AND to_char(A.order_dtm, 'yyyyMM') = #yyyymm#
               AND A.mall_id = '02'
               AND FC_GET_ORDER_STATUS_CODE(A.order_num) = 'C0124'
               AND b.pymnt_means_code != 'C0115'
             GROUP BY A.order_num     
        )
        SELECT count(*) 
          FROM v_temp
         WHERE amount >= #amount#
    </select>
    
    <select id="getSecurityKey" resultClass="string">
        SELECT max(key) FROM tb_key WHERE to_char(sysdate, 'yyyyMMdd') between start_dt and end_dt
    </select>
    
    <select id="getUserNumListForBeleft" resultClass="string">
        SELECT user_num 
          FROM tb_mall_user_detail 
         WHERE user_num in (SELECT user_num FROm tb_user_coupon WHERE cpn_id = '0000000036') 
           and user_num not in (SELECT user_num FROm tb_user_coupon WHERE cpn_id = '0000000029')
           And mall_id = '02'
    </select>
    
    <select id="joinUserCount" parameterClass="userCriteria" resultClass="userParam">    
        select B.AGRE_DT  agreeDate
             , sum(decode(C.USERTYPE,'7',1,0)) address1
             , sum(decode(C.USERTYPE,'7',0,1)) address2
             , sum(1) address3
             , sum(sum(decode(C.USERTYPE,'7',1,0))) over() address4
             , sum(sum(decode(C.USERTYPE,'7',0,1))) over() postNum1
             , sum(sum(1)) over()  postNum2     
          from TB_USER A
             , TB_MALL_USER_DETAIL B
             , MEM_MASTER@MEM C
         where B.USER_NUM = A.USER_NUM
           and B.MALL_ID = '02'
           and C.CARD_GUBUN = substr(B.HTRS_USER_NUM, 1, 2)
           and C.CARD_NO = substr(B.HTRS_USER_NUM, 3, 6)
           and C.CARD_CHECK = substr(B.HTRS_USER_NUM, 9, 1)
           and B.AGRE_DT between #joinStartDate# and #joinEndDate#
         group by B.AGRE_DT
         order by B.AGRE_DT
    </select>
    
    <select id="orderUserCount" parameterClass="userCriteria" resultClass="userParam">
        select ORDER_DTM  telNum
             , HOTGIFT    hottracksNum
             , HOTMUSIC   juminNo1
             , HOTSOUND   agreeDate
             , HOTCNT     juminNo2
             , KYOBOGIFT  birthDate
             , sum(HOTGIFT) over()   birthGubun
             , sum(HOTMUSIC) over()  marryDate
             , sum(HOTSOUND) over()  postNum1
             , sum(HOTCNT) over()    marryGubun
             , sum(KYOBOGIFT) over() postNum2
          from (
                select ORDER_DTM
                     , sum(case when MALL_ID = '02' and SELL_PRDT_GBN in ('P','S','G') then 1 else 0 end) HOTGIFT  
                     , sum(case when MALL_ID = '02' and SELL_PRDT_GBN in ('R','D') then 1 else 0 end) HOTMUSIC
                     , sum(case when MALL_ID = '02' and SELL_PRDT_GBN in ('C') then 1 else 0 end) HOTSOUND
                     , count(distinct (case when MALL_ID = '02' then USENUM else '' end)) HOTCNT
                     , sum(case when MALL_ID = '01' then 1 else 0 end) KYOBOGIFT
                  from (
                select ORDER_DTM
                     , MALL_ID
                     , USENUM
                     , SELL_PRDT_GBN
                  from (
                        select to_char(A.ORDER_DTM,'yyyymmdd') ORDER_DTM 
                             , A.MALL_ID
                             , A.ORDER_NUM USENUM
                             , case when C.SELL_PRDT_GBN in ('P','S','G') then 'G' 
                                    when C.SELL_PRDT_GBN in ('R','D') then 'D'
                                    when C.SELL_PRDT_GBN in ('C') then 'C' end SELL_PRDT_GBN 
                          from TB_ORDER A
                             , TB_ORDER_PRODUCT B
                             , TB_SELL_PRODUCT C
                         where A.ORDER_NUM = B.ORDER_NUM
                           and to_char(A.ORDER_DTM,'yyyymmdd') between #joinStartDate# and #joinEndDate#
                           and A.ORDER_STATUS_CODE != 'C0281'
                           and B.SELL_PRDT_BCODE = C.SELL_PRDT_BCODE
                       )
                 group by ORDER_DTM, MALL_ID, USENUM, SELL_PRDT_GBN
                ) 
                group by ORDER_DTM
              )
         order by ORDER_DTM  
    </select>

  <insert id="userDepositAppSave" parameterClass="depositApp">
        insert into TB_DEPOSIT_APPLY ( APPLYDT
                                     , SEQ
                                     , APPLYST
                                     , APPLYAMT
                                     , APPLYCONT
                                     , REGID
                                     , REGDT
                                     , REGTM
                                     , CONFORMID
                                     , CONFORMDT
                                     , CONFORMTM
                                     , CONFORMCONT 
                                     , USERNUM )
                                select to_char(sysdate,'yyyymmdd') APPLYDT
                                     , nvl(max(SEQ),0) + 1 SEQ 
                                     , '01' APPLYST
                                     , (#plusMinus# * #changeAmount#) APPLYAMT
                                     , #changeReasonContent# APPLYCONT
                                     , #regId# REGID
                                     , to_char(sysdate,'yyyymmdd') REGDT
                                     , to_char(sysdate,'HH24MISS') REGTM
                                     , '' CONFORMID
                                     , '' CONFORMDT
                                     , '' CONFORMTM
                                     , '' CONFORMCONT 
                                     , #userNum#
                                  from TB_DEPOSIT_APPLY
    </insert>
    
    <select id="userDepositAppSearch" parameterClass="depositApp" resultClass="depositApp">    
        select A.APPLYDT applydt
             , A.SEQ     seq
             , C.USER_NAME userName
             , B.USER_ID userId
             , A.USERNUM  userNum
             , decode( A.APPLYST
                     , '01', '신청'
                     , '02', '승인'
                     , '03', '거부') stats
             , substr(A.REGDT,1,4) || '-' || substr(A.REGDT,5,2) || '-' || substr(A.REGDT,7,2) regDt
             , (select D.ADMIN_NAME from TB_ADMIN D where D.ADMIN_ID = A.REGID) regNm
             , A.APPLYCONT    applyCont
             , A.APPLYAMT     applyAmt
             , nvl((select D.ADMIN_NAME from TB_ADMIN D where D.ADMIN_ID = A.CONFORMID),'') conformNm
             , substr(A.CONFORMDT,1,4) || '-' || substr(A.CONFORMDT,5,2) || '-' || substr(A.CONFORMDT,7,2) confDt
          from TB_DEPOSIT_APPLY A
             , TB_USER B
             , TB_MALL_USER_DETAIL C
         where B.USER_NUM = A.USERNUM
           and C.USER_NUM = A.USERNUM
           and C.MALL_ID = '02'
           and C.USER_NAME like '%' || #userName# || '%'
           and B.USER_ID like '%' || #userId# || '%'
           <isNotEmpty property="beginOrderDate">
            and A.APPLYDT >= #beginOrderDate#
           </isNotEmpty>
           <isNotEmpty property="endOrderDate">
            and A.APPLYDT <![CDATA[ <= ]]> #endOrderDate#
           </isNotEmpty>
           and (#depositStats# = '00' or #depositStats# = A.APPLYST)   
    </select>

    <select id="userSavedAppSearch" parameterClass="depositApp" resultClass="depositApp">    
        select A.APPLYDT applydt
             , A.SEQ     seq
             , C.USER_NAME userName
             , B.USER_ID userId
             , A.USERNUM  userNum
             , decode( A.APPLYST
                     , '01', '신청'
                     , '02', '승인'
                     , '03', '거부') stats
             , substr(A.REGDT,1,4) || '-' || substr(A.REGDT,5,2) || '-' || substr(A.REGDT,7,2) regDt
             , (select D.ADMIN_NAME from TB_ADMIN D where D.ADMIN_ID = A.REGID) regNm
             , A.APPLYCONT    applyCont
             , A.APPLYAMT     applyAmt
             , nvl((select D.ADMIN_NAME from TB_ADMIN D where D.ADMIN_ID = A.CONFORMID),'') conformNm
             , substr(A.CONFORMDT,1,4) || '-' || substr(A.CONFORMDT,5,2) || '-' || substr(A.CONFORMDT,7,2) confDt
             , sum(A.APPLYAMT) over () chaDeliAmtConfDt
          from TB_USER_SAVED_APPLY A
             , TB_USER B
             , TB_MALL_USER_DETAIL C
         where B.USER_NUM = A.USERNUM
           and C.USER_NUM = A.USERNUM
           and C.MALL_ID = '02'
           and C.USER_NAME like '%' || #userName# || '%'
           and B.USER_ID like '%' || #userId# || '%'
           <isNotEmpty property="beginOrderDate">
            and A.APPLYDT >= #beginOrderDate#
           </isNotEmpty>
           <isNotEmpty property="endOrderDate">
            and A.APPLYDT <![CDATA[ <= ]]> #endOrderDate#
           </isNotEmpty>
           and (#depositStats# = '00' or #depositStats# = A.APPLYST)   
    </select>

    <select id="userDepositAppPopup" parameterClass="depositApp" resultClass="depositApp">    
        select A.APPLYDT applydt
             , A.SEQ     seq
             , substr(A.REGDT,1,4) || '-' || substr(A.REGDT,5,2) || '-' || substr(A.REGDT,7,2) regDt
             , decode( A.APPLYST
                     , '01', '신청'
                     , '02', '승인'
                     , '03', '거부') stats
             , C.USER_NAME || '(' || B.USER_ID || ')' userName
             , A.APPLYAMT     applyAmt
             , (select D.ADMIN_NAME from TB_ADMIN D where D.ADMIN_ID = A.REGID) regNm             
             , A.APPLYCONT    applyCont 
             , A.CONFORMCONT  conformCont
          from TB_DEPOSIT_APPLY A
             , TB_USER B
             , TB_MALL_USER_DETAIL C
         where B.USER_NUM = A.USERNUM
           and C.USER_NUM = A.USERNUM
           and C.MALL_ID = '02'
           and A.APPLYDT = #applydt#
           and A.SEQ = #seq#
    </select>
    
    <select id="userSavedAppPopup" parameterClass="depositApp" resultClass="depositApp">    
        select A.APPLYDT applydt
             , A.SEQ     seq
             , substr(A.REGDT,1,4) || '-' || substr(A.REGDT,5,2) || '-' || substr(A.REGDT,7,2) regDt
             , decode( A.APPLYST
                     , '01', '신청'
                     , '02', '승인'
                     , '03', '거부') stats
             , C.USER_NAME || '(' || B.USER_ID || ')' userName
             , A.APPLYAMT     applyAmt
             , (select D.ADMIN_NAME from TB_ADMIN D where D.ADMIN_ID = A.REGID) regNm            
             , A.APPLYCONT    applyCont 
             , A.CONFORMCONT  conformCont
             , A.USERNUM userNum
          from TB_USER_SAVED_APPLY A
             , TB_USER B
             , TB_MALL_USER_DETAIL C
         where B.USER_NUM = A.USERNUM
           and C.USER_NUM = A.USERNUM
           and C.MALL_ID = '02'
           and A.APPLYDT = #applydt#
           and A.SEQ = #seq#
    </select>

    <update id="userDepositAppPopupSave" parameterClass="depositApp">
        update TB_DEPOSIT_APPLY
           set APPLYST = #stats#
             , CONFORMID = #conformId#
             , CONFORMDT = to_char(sysdate,'yyyymmdd')
             , CONFORMTM = to_char(sysdate,'HH24MISS')
             , CONFORMCONT = #conformCont#
         where APPLYDT = #applydt#
           and SEQ = #seq#
    </update>
    
    <update id="userSavedAppPopupSave" parameterClass="depositApp">
        update TB_USER_SAVED_APPLY
           set APPLYST = #stats#
             , CONFORMID = #conformId#
             , CONFORMDT = to_char(sysdate,'yyyymmdd')
             , CONFORMTM = to_char(sysdate,'HH24MISS')
             , CONFORMCONT = #conformCont#
         where APPLYDT = #applydt#
           and SEQ = #seq#
    </update>
    
    <insert id="userDepositAppPopupSave2" parameterClass="depositApp">
        insert into TB_DEPOSIT ( DPST_SEQ,CHNG_AMT,MOD_DTM,DPST_CHNG_RSN_CODE,CHNG_RSN_CONT,USER_NUM,MALL_ID,USER_YN,PRE_PROC_YN)
                        select dpst_seq.nextval DPST_SEQ
                             , APPLYAMT CHNG_AMT
                             , sysdate MOD_DTM
                             , 'C0646' DPST_CHNG_RSN_CODE
                             , APPLYCONT CHNG_RSN_CONT
                             , USERNUM USER_NUM
                             , '02' MALL_ID
                             , 'Y' USER_YN
                             , 'N' PRE_PROC_YN
                          from TB_DEPOSIT_APPLY  
                         where APPLYDT = #applydt#
                           and SEQ = #seq#
    </insert>
    

    <select id="getDepositListByUser2" parameterClass="userCriteria" resultClass="deposit">
        select changeAmount
             , modifyDatetime
             , changeReasonCode
             , paymentOrderNum
             , changeReasonContent
          from (
        SELECT chng_amt changeAmount
             , mod_dtm modifyDatetime
             , FC_GET_CODE_NAME(dpst_chng_rsn_code) changeReasonCode
             , pymnt_order_num paymentOrderNum
             , chng_rsn_cont changeReasonContent
          FROM tb_deposit
         WHERE user_yn = 'Y'
           AND user_num = #userNum#
           AND mall_id = #mallId#
         union all
        select APPLYAMT
             , to_date(REGDT||REGTM,'yyyymmddHH24MISS')
             , decode( APPLYST
                     , '01', '예치금신청'
                     , '03', '예치금신청거부')
             , ''
             , APPLYCONT
          from TB_DEPOSIT_APPLY 
         where APPLYST in ('01','03')
           and USERNUM = #userNum#  
        )
        order by modifyDatetime desc
    </select> 
    
    <select id="getDepositListByUserCount2" parameterClass="userCriteria" resultClass="int">
        SELECT count(*)
          from (
                select user_num
                  FROM tb_deposit
                 WHERE user_yn = 'Y'
                   AND user_num = #userNum#
                   AND mall_id = #mallId#
                 union all
                select USERNUM  
                  from TB_DEPOSIT_APPLY 
                 where APPLYST in ('01','03')
                   and USERNUM = #userNum#
               )
    </select>    
    
    <select id="deliveryAmtConfSearch" parameterClass="depositApp" resultClass="depositApp">
        select A.RTN_SEQ  seq 
             , B.BUYER_NAME    userName
             , A.ORDER_NUM    userId
             , A.CHADELIAMT   applyAmt
             , decode( A.CHADELIAMTCONFYN, 'Y','확인','N','미확인') conformId
             , to_char(A.CHADELIAMTCONFDT,'yyyy-mm-dd') chaDeliAmtConfDt
          from TB_RETURN_DELIVERY_AMT A
             , TB_ORDER B
             , TB_RETURN_EXCHANGE_MASTER C
         where A.ORDER_NUM = B.ORDER_NUM
           and A.METH= '2'
           and A.CHADELIAMT != 0
           and A.RTN_SEQ = C.RTN_SEQ
           and C.RTN_STATUS_CODE != 'C0279'
           and (#depositStats# = '0' or #depositStats# = A.CHADELIAMTCONFYN)
           <isNotEmpty property="beginOrderDate">
            and to_char(A.REG_DT,'yyyymmdd') >= #beginOrderDate#
           </isNotEmpty>
           <isNotEmpty property="endOrderDate">
            and to_char(A.REG_DT,'yyyymmdd') <![CDATA[ <= ]]> #endOrderDate#
           </isNotEmpty>
           <isNotEmpty property="userName">
            and B.BUYER_NAME = #userName#
           </isNotEmpty>
           <isNotEmpty property="userId">
            and A.ORDER_NUM = #userId#
           </isNotEmpty>
    </select>
    
    <update id="deliveryAmtConfSave" parameterClass="depositApp">
        update TB_RETURN_DELIVERY_AMT
           set CHADELIAMTCONFYN = 'Y'
             , CHADELIAMTCONFDT = sysdate
         where RTN_SEQ = #seq#
    </update>

    <insert id="insertGsPoint" parameterClass="gsPointParam">
        insert into TB_GSPOINT ( USER_NUM
                               , SEQ
                               , CHNG_DT
                               , CHNG_RES
                               , KYOAMT
                               , GSAMT
                               , ORDER_NUM
                               , ORDER_PRDT_INSEQ
                               , GSID
                               , GSETC
                               , KYOYN
                               , KYODT
                               , GSYN
                               , GSDT
                               , REGDT 
                               , GSAPPROVDT
                               , GSAPPROVNO
                               , GSCARDNO )
                        values ( #userNum#
                               , (select nvl(max(SEQ),0)+1 from TB_GSPOINT where USER_NUM = #userNum#)
                               , to_char(sysdate,'yyyymmdd')
                               , #gubun#
                               , #chngAmt#
                               , #gsPoint#
                               , #orderNum#
                               , #orderPrdtInseq#
                               , #gsId#
                               , #gsPw#
                               , 'Y'
                               , to_char(sysdate,'yyyymmdd')
                               , 'Y'
                               , to_char(sysdate,'yyyymmdd')
                               , sysdate 
                               , #appprovdate#
                               , #approvno#
                               , #gsCardNum#)
    </insert>
    
    <insert id="insertOkPoint" parameterClass="okPointParam">
        insert into TB_OKPOINT ( USER_NUM
                               , SEQ
                               , CHNG_DT
                               , CHNG_RES
                               , OHAMT
                               , ORDER_NUM
                               , ORDER_PRDT_INSEQ
                               , OHYN
                               , OHDT
                               , REGDT
                               , MCTTRNO
                               , MCTTRDATE
                               , TXNO
                               , AMOUNT
                               , OKCARDNUM)
                        values ( #userNum#
                               , (select nvl(max(SEQ),0)+1 from TB_OKPOINT where USER_NUM = #userNum#)
                               , to_char(sysdate,'yyyymmdd')
                               , #gubun#
                               , #okCardAmt#
                               , #orderNum#
                               , #orderPrdtInseq#
                               , 'Y'
                               , to_char(sysdate,'yyyymmdd')
                               , sysdate
                               , #sMctTrNo#
                               , #sMctTrDate#
                               , #sTxNo#
                               , #sAmount#
                               , #okCardNum#)
    </insert>
    
    

    <update id="updateUserAddressForMusic" parameterClass="userAddress">
        UPDATE
               tb_user_address
           SET 
               hdphn_num    = #handPhoneNum#,
               regst_dtm    = sysdate,
               email_addr   = #emailAddr#
         WHERE
               user_num  = #userNum#
           AND mall_id   = #mallId#
           AND main_addr_yn = 'Y'
    </update>
    
    <!-- 
        작성자: 장진용
        작성일: 2015-01-12
        기능: 주문 상품 후기/QnA 등록
    -->
    <insert id="insertOrderProductQna" parameterClass="kr.co.hottracks.site.model.common.faq.QnADomain">
        /* UserSQL.insertOrderProductQna */
        INSERT INTO TB_ORDER_PRODUCT_QNA (ORDER_NUM, ORDER_PRDT_INSEQ, PRDT_QNA_SEQ, RCRD_REVIEW_SEQ, REGST_DTM)
                            VALUES (#orderNum#, #orderPrdtInseq#, #prdtQnaSeq#, #rcrdReviewSeq#, SYSDATE)
    </insert>
    

</sqlMap>