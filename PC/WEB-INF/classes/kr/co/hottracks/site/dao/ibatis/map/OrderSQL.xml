<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sqlMap PUBLIC "-//iBATIS.com//DTD SQL Map 2.0//EN" "http://ibatis.apache.org/dtd/sql-map-2.dtd">
<sqlMap namespace="OrderSQL">
	<typeAlias alias="userInfo" type="kr.co.hottracks.site.model.common.User"/>
	<typeAlias alias="productSaved" type="kr.co.hottracks.site.model.common.ProductSaved"/>
	<typeAlias alias="sellProductKey" type="kr.co.hottracks.site.model.common.product.SellProductKey"/>
	<typeAlias alias="orderProductKey" type="kr.co.hottracks.site.model.common.OrderProductKey"/>
	<typeAlias alias="cart" type="kr.co.hottracks.site.model.backoffice.order.TempCart"/>
	<typeAlias alias="frontCart" type="kr.co.hottracks.site.model.frontoffice.order.Cart"/>
	<typeAlias alias="cartProduct" type="kr.co.hottracks.site.model.backoffice.order.CartProduct"/>
	<typeAlias alias="orderProduct" type="kr.co.hottracks.site.model.backoffice.order.OrderProduct"/>
	<typeAlias alias="orderProductInfo" type="kr.co.hottracks.site.model.backoffice.order.OrderProductInfo"/>
	<typeAlias alias="orderOptionForKyobo" type="kr.co.hottracks.site.model.backoffice.order.OrderOptionForKyobo"/>
	<typeAlias alias="order" type="kr.co.hottracks.site.model.backoffice.order.Order"/>
	<typeAlias alias="orderParam" type="kr.co.hottracks.site.model.backoffice.order.OrderParam"/>
	<typeAlias alias="orderDestination" type="kr.co.hottracks.site.model.backoffice.order.OrderDestination"/>
	<typeAlias alias="orderDestinationParam" type="kr.co.hottracks.site.model.backoffice.order.OrderDestinationParam"/>
	<typeAlias alias="orderProductAtInfo" type="kr.co.hottracks.site.model.backoffice.order.OrderProductAtInfo"/>
	<typeAlias alias="orderDeliveryRequest" type="kr.co.hottracks.site.model.backoffice.order.OrderDeliveryRequest"/>
	<typeAlias alias="orderCriteria" type="kr.co.hottracks.site.model.backoffice.order.OrderCriteria"/>
	<typeAlias alias="orderListData" type="kr.co.hottracks.site.model.backoffice.order.OrderListData"/>
	<typeAlias alias="delivery" type="kr.co.hottracks.site.model.backoffice.distribution.Delivery"/>
	<typeAlias alias="orderDeliveryProductParam" type="kr.co.hottracks.site.model.backoffice.distribution.OrderDeliveryProductParam"/>
	<typeAlias alias="orderProductFreeGift" type="kr.co.hottracks.site.model.backoffice.distribution.OrderProductFreeGift"/>
	<typeAlias alias="orderDeliveryVendorFreeGift" type="kr.co.hottracks.site.model.backoffice.distribution.OrderDeliveryVendorFreeGift"/>
	<typeAlias alias="eventFreeGift" type="kr.co.hottracks.site.model.common.event.EventFreeGift"/>
	<typeAlias alias="dateParam" type="kr.co.hottracks.site.model.backoffice.cosmetic.DateParam"/>
	<typeAlias alias="cosmeticOrder" type="kr.co.hottracks.site.model.backoffice.cosmetic.CosmeticOrder"/>
	<typeAlias alias="cosmeticOrderAmount" type="kr.co.hottracks.site.model.backoffice.cosmetic.CosmeticOrderAmount"/>
	<typeAlias alias="cosmeticOrderProduct" type="kr.co.hottracks.site.model.backoffice.cosmetic.CosmeticOrderProduct"/>
	<typeAlias alias="orderDeliveryProductParam" type="kr.co.hottracks.site.model.backoffice.distribution.OrderDeliveryProductParam"/>
	<typeAlias alias="cartParam" type="kr.co.hottracks.site.model.frontoffice.order.CartParam"/>
	<typeAlias alias="cartCriteria" type="kr.co.hottracks.site.model.frontoffice.order.CartCriteria"/>
	<typeAlias alias="cartProductListData" type="kr.co.hottracks.site.model.frontoffice.order.CartProductListData"/>
	<typeAlias alias="totalProductPriceByDeliveryVendor" type="kr.co.hottracks.site.model.frontoffice.order.TotalProductPriceByDeliveryVendor"/>
	<typeAlias alias="cartProductFreeGiftListData" type="kr.co.hottracks.site.model.frontoffice.order.CartProductFreeGiftListData"/>
	<typeAlias alias="optionTemp" type="kr.co.hottracks.site.model.backoffice.product.OptionTemp"/>
	<typeAlias alias="wishProductParam" type="kr.co.hottracks.site.model.frontoffice.mypage.WishProductParam"/>
	<typeAlias alias="deliveryVendorInfo" type="kr.co.hottracks.site.model.frontoffice.order.DeliveryVendorInfo"/>
	<typeAlias alias="orderProductSaved" type="kr.co.hottracks.site.model.frontoffice.order.OrderProductSaved"/>
	<typeAlias alias="payment" type="kr.co.hottracks.site.model.frontoffice.order.Payment"/>
	<typeAlias alias="creditPayment" type="kr.co.hottracks.site.model.frontoffice.order.CreditPayment"/>
	<typeAlias alias="paymentInfo" type="kr.co.hottracks.site.model.frontoffice.order.PaymentInfo"/>
	<typeAlias alias="cartProductSum" type="kr.co.hottracks.site.model.frontoffice.order.CartProductSum"/>
	<typeAlias alias="userCouponListData" type="kr.co.hottracks.site.model.common.coupon.UserCouponListData"/>
	<typeAlias alias="orderSimpleInfo" type="kr.co.hottracks.site.model.frontoffice.order.OrderSimpleInfo"/>
	<typeAlias alias="orderCancelHistory" type="kr.co.hottracks.site.model.backoffice.order.OrderCancelHistory"/>
	<typeAlias alias="orderCancelProduct" type="kr.co.hottracks.site.model.backoffice.order.OrderCancelProduct"/>
	<typeAlias alias="orderProductSavedCriteria" type="kr.co.hottracks.site.model.frontoffice.order.OrderProductSavedCriteria"/>
	<typeAlias alias="escrowOrderDeliveryInfo" type="kr.co.hottracks.site.model.backoffice.order.EscrowOrderDeliveryInfo"/>
	<typeAlias alias="orderProductListData" type="kr.co.hottracks.site.model.backoffice.order.OrderProductListData"/>
	<typeAlias alias="deposit" type="kr.co.hottracks.site.model.common.Deposit"/>
	<typeAlias alias="depositCriteria" type="kr.co.hottracks.site.model.common.DepositCriteria"/>
	<typeAlias alias="depositParam" type="kr.co.hottracks.site.model.common.DepositParam"/>
	<typeAlias alias="deliveryCriteria" type="kr.co.hottracks.site.model.backoffice.distribution.DeliveryCriteria"/>
	<typeAlias alias="pgCalculate" type="kr.co.hottracks.site.model.backoffice.order.PgCalculate"/>
	<typeAlias alias="pgPayment" type="kr.co.hottracks.site.model.backoffice.order.PgPayment"/>
	<typeAlias alias="orderDetail" type="kr.co.hottracks.site.model.backoffice.distribution.OrderDetail"/>
	<typeAlias alias="cartCouponHistory" type="kr.co.hottracks.site.model.common.CartCouponHistory"/>
	<typeAlias alias="plentyOrderCriteria" type="kr.co.hottracks.site.model.backoffice.distribution.PlentyOrderCriteria"/>
	<typeAlias alias="plentyOrderData" type="kr.co.hottracks.site.model.backoffice.distribution.PlentyOrderData"/>
	<typeAlias alias="noCash" type="kr.co.hottracks.site.model.frontoffice.order.NoCash"/>
	<typeAlias alias="orderRecordSupplement" type="kr.co.hottracks.site.model.common.record.OrderRecordSupplement"/>
	<typeAlias alias="giftProduct" type="kr.co.hottracks.site.model.frontoffice.order.GiftProduct" />
	<typeAlias alias="orderRecordGift" type="kr.co.hottracks.site.model.frontoffice.order.OrderRecordGift" />
	<typeAlias alias="autoPayHist" type="kr.co.hottracks.site.model.frontoffice.order.AutoPayHist" />
	<typeAlias alias="autoPay" type="kr.co.hottracks.site.model.frontoffice.order.AutoPay" />
	<typeAlias alias="autoPayFailHist" type="kr.co.hottracks.site.model.frontoffice.order.AutoPayFailHist" />
	<typeAlias alias="fgift" type="kr.co.hottracks.site.model.common.record.Fgift" />
	<typeAlias alias="fgiftMasterExt" type="kr.co.hottracks.site.model.common.record.FgiftMasterExt"/>
	<typeAlias alias="posterCaseExt" type="kr.co.hottracks.site.model.backoffice.product.PosterCaseExt"/>
	<typeAlias alias="orderTrack" type="kr.co.hottracks.site.model.common.order.OrderTrack"/>
	<typeAlias alias="musicCardInfo" type="kr.co.hottracks.site.model.common.order.MusicCardInfo"/>
	<typeAlias alias="downloadCardInfo" type="kr.co.hottracks.site.model.frontoffice.order.DownloadCardInfo"/>
	<typeAlias alias="trackGcardHist" type="kr.co.hottracks.site.model.frontoffice.order.TrackGcardHist"/>
    <typeAlias alias="userOrder" type="kr.co.hottracks.site.model.common.UserOrder"/>
    <typeAlias alias="backSearchParam" type="kr.co.hottracks.site.model.backoffice.BackSearchParam"/>
    <typeAlias alias="naverNPayCash" type="kr.co.hottracks.site.model.frontoffice.order.NaverNPayCash"/>
	
	<delete id="deleteCartById" parameterClass="string">
		DELETE FROM tb_temp_cart
		 WHERE admin_id = #value#
	</delete>
	
	<delete id="deleteCartByProductKey" parameterClass="sellProductKey">
		DELETE FROM tb_temp_cart
		 WHERE sell_prdt_bcode = #barcode#
	</delete>
	
	<insert id="addCart" parameterClass="cart">
		INSERT INTO tb_temp_cart (admin_id, sell_prdt_bcode, count)
		VALUES (#adminId#, #barcode#, #count#)
	</insert>
	
	<update id="changeCart" parameterClass="cart"> 
		UPDATE tb_temp_cart 
		   SET count = #count#
		 WHERE admin_id = #adminId#
		   AND sell_prdt_bcode = #barcode#
	</update>
	
	<select id="getOrderProductByCart" parameterClass="string" resultClass="orderProduct">
		SELECT A.sell_prdt_bcode barcode, 
			   B.vndr_cntrt_id vendorCntractId, 
			   B.prdt_name productName,
			   A.count orderCount, 
			   B.prdt_dscnt_price sellProductPrice,
			   B.dlvy_vndr_id deliveryVendorId,
			   B.prdt_buy_price buyPrice,
			   100 - B.prdt_chge_rate chargeRate,
			   B.kyobo_chge_rate chargeRate,
			   D.ctgr_id categoryId
		  FROM tb_temp_cart A, 
			   tb_sell_product B, 
			   tb_vendor C,
			   tb_product_category D
		 WHERE A.sell_prdt_bcode = B.sell_prdt_bcode
		   AND A.admin_id = #value#
		   AND B.dlvy_vndr_id = C.vndr_id
		   AND B.sell_prdt_bcode = D.sell_prdt_bcode
		   AND D.std_ctgr_yn = 'Y'
		 ORDER BY B.dlvy_vndr_id
	</select>
	
	<select id="getCartById" parameterClass="string" resultClass="cartProduct">
		SELECT C.vndr_id deliveryVendorId,
			   C.dlvy_levy_std_amt standardDeliveryAmount,
			   sum(B.prdt_dscnt_price * A.count) sellPriceSum,
			   CASE 
					WHEN C.dlvy_levy_std_amt - sum(B.prdt_dscnt_price * A.count) <![CDATA[ > ]]>  -1 THEN C.dlvy_amt 
					ELSE 0
			   END AS deliveryResultAmount,
			   C.dlvy_amt deliveryAmount
		  FROM tb_temp_cart A, 
			   tb_sell_product B, 
			   tb_vendor C
		 WHERE A.sell_prdt_bcode = B.sell_prdt_bcode
		   AND A.admin_id = #value#
		   AND B.dlvy_vndr_id = C.vndr_id
		 GROUP BY C.vndr_id, C.dlvy_levy_std_amt, C.dlvy_amt	
	</select>
	
	<insert id="saveOrder" parameterClass="order">
		INSERT INTO tb_order (
			order_num,
			user_num,
			buyer_name,
			buyer_email_addr,
			buyer_hdphn_num,
			buyer_tel_num,
			intnet_rcpt_issue_yn,
			cash_rcpt_issue_yn,
			buyer_post_num,
			buyer_addr,
			buyer_dtl_addr,
			sms_recv_wish_yn,
			order_dtm,
			order_status_code,
			order_user_id,
			order_user_yn,
			kyobo_order_methd,
			kyobo_user_num,
			kyobo_order_amt,
			kyobo_dpst_use_amt,
			kyobo_mleg_use_amt,
			kyobo_pblsr_cpn_use_amt,
			kyobo_dlvy_amt_free_gbn,
			kyobo_pymnt_vrfy_yn,
			kyobo_pymnt_vrfy_dtm,
			kyobo_pymnt_methd,
			kyobo_cpn_use_amt,
			LAST_MOD_DTM,
			mall_id,
			passwd,
			escr_yn,
			escr_send_yn,
			escr_dt,
			escr_agre_gbn,
			tax_bill_yn
		) VALUES (
			#orderNum#,
			#userNum#,
			#buyerName#,
			#buyerEmail#,
			#handPhone#,
			#telePhone#,
			#internetReceiptYn#,
			#cashReceiptYn#,
			#postNum#,
			#address#,
			#detailAddress#,
			#smsReceiveYn#,
			sysdate,
			#orderStatusCode#,
			#userId#,
			#userYn#,
			substrb(#kyonoOrderMethodId#,1,20),
			#kyoboUserNumber#,
			#kyoboOrderAmount#,
			#kyoboDepositUseAmount#,
			#kyoboMileage#,
			#kyoboPublisherCouponUseAmount#,
			#kyoboDeliveryAmountFreeGbn#,
			#kyoboPaymentVerifyYn#,
			#kyoboPaymentVerifyDatetime#,
			#kyoboPaymentMethodId#,
			#kyoboCouponUseAmount#,
			sysdate,
			#mallId#,
			#password#,
			#escrowYn#,
			#escrowSendYn#,
			#escrowDate#,
			#escrowAgreementGbn#,
			#taxBillYn#
		)
	</insert>
	
	<select id="getOrderByOrderNum" parameterClass="string" resultClass="order">
		SELECT
				order_num				orderNum,
				user_num				 userNum,
				buyer_name			   buyerName,
				buyer_email_addr		 buyerEmail,
				buyer_hdphn_num		  handPhone,
				buyer_tel_num			telePhone,
				intnet_rcpt_issue_yn	 internetReceiptYn,
				cash_rcpt_issue_yn	   cashReceiptYn,
				buyer_post_num		   postNum,
				buyer_addr			   address,
				buyer_dtl_addr		   detailAddress,
				sms_recv_wish_yn		 smsReceiveYn,
				order_dtm				orderDatetime,
				order_status_code		orderStatusCode,
				order_user_id			userId,
				order_user_yn			userYn,
				kyobo_order_methd		kyonoOrderMethodId,
				kyobo_user_num		   kyoboUserNumber,
				kyobo_order_amt		  kyoboOrderAmount,
				kyobo_dpst_use_amt	   kyoboDepositUseAmount,
				kyobo_mleg_use_amt	   kyoboMileage,
				kyobo_pblsr_cpn_use_amt  kyoboPublisherCouponUseAmount,
				kyobo_dlvy_amt_free_gbn  kyoboDeliveryAmountFreeGbn,
				kyobo_pymnt_vrfy_yn	  kyoboPaymentVerifyYn,
				kyobo_pymnt_vrfy_dtm	 kyoboPaymentVerifyDatetime,
				kyobo_pymnt_methd		kyoboPaymentMethodId,
				kyobo_cpn_use_amt		kyoboCouponUseAmount,
				LAST_MOD_DTM			 lastModifyDatetime,
				mall_id				  mallId,
				passwd				   password,
				escr_yn				  escrowYn,
				escr_send_yn			 escrowSendYn,
				escr_dt				  escrowDate,
				escr_agre_gbn			escrowAgreementGbn,
				tax_bill_yn			  taxBillYn
		  FROM  tb_order 
		 WHERE  order_num = #value# 
	</select>
	
	<insert id="saveOrderDestination" parameterClass="orderDestination">
		<selectKey keyProperty="innerSequence" resultClass="string" type="pre">SELECT lpad(nvl(max(A.order_dest_inseq) + 1, 1), 2, '0') FROM tb_order_destination A WHERE A.order_num = #orderNum#</selectKey>
		INSERT INTO tb_order_destination (
			order_num,
			order_dest_inseq,
			rcvr_name,
			rcvr_hdphn_num,
			rcvr_tel_num,
			rcvr_post_num,
			rcvr_addr,
			rcvr_dtl_addr,
			wish_dlvy_dt,
			rcvr_email_addr,
			dlvy_msg,
			gift_msg,
			order_msg,
			gift_msg_print_yn,
			RCVR_ADDR3,
			RCVR_ADDR4
		) VALUES (		
			#orderNum#,
			#innerSequence#,
			#receiverName#,
			#receiverHandPhone#,
			#receiverTelePhone#,
			#receiverPostNum#,
			#receiverAddress# || ' ' || #receiverDetailAddress4#,
			#receiverDetailAddress# || ' ' || #receiverDetailAddress3#,
			#wishDeliveryDate#,
			#receiverEmail#,
			#deliveryMessage#,
			#giftMessage#,
			#orderMessage#,
			#giftMessagePrintYn#,
			#receiverDetailAddress3#,
			#receiverDetailAddress4#
		)
	</insert>
	
	<insert id="saveOrderDestinationHistory" parameterClass="orderDestination">
		<selectKey keyProperty="ordDestHistorySeq" resultClass="int" type="pre">SELECT nvl(max(A.order_dest_hist_seq) + 1, 1) FROM tb_order_destination_history A WHERE A.order_num = #orderNum# and order_dest_inseq = #innerSequence#</selectKey>
		INSERT INTO tb_order_destination_history (
			order_num,
			order_dest_inseq,
			order_dest_hist_seq,
			rcvr_name,
			rcvr_hdphn_num,
			rcvr_tel_num,
			rcvr_post_num,
			rcvr_addr,
			rcvr_dtl_addr,
			wish_dlvy_dt,
			rcvr_email_addr,
			dlvy_msg,
			gift_msg,
			order_msg,
			gift_msg_print_yn,
			mod_dtm,
			mod_admin_id
		) VALUES (
			#orderNum#,
			#innerSequence#,
			#ordDestHistorySeq#,
			#receiverName#,
			#receiverHandPhone#,
			#receiverTelePhone#,
			#receiverPostNum#,
			#receiverAddress#,
			#receiverDetailAddress#,
			#wishDeliveryDate#,
			#receiverEmail#,
			#deliveryMessage#,
			#giftMessage#,
			#orderMessage#,
			#giftMessagePrintYn#,
			sysdate,
			#modifyAdminId#
		)
	</insert>

	<select id="getOrderDestinationsByOrderNo" parameterClass="string" resultClass="orderDestination">
		SELECT 
				order_num		 orderNum,
				order_dest_inseq  innerSequence,
				rcvr_name		 receiverName,
				rcvr_hdphn_num	receiverHandPhone,
				rcvr_tel_num	  receiverTelePhone,
				rcvr_post_num	 receiverPostNum,
				rcvr_addr		 receiverAddress,
				rcvr_dtl_addr	 receiverDetailAddress,
				wish_dlvy_dt	  wishDeliveryDate,
				rcvr_email_addr   receiverEmail,
				dlvy_msg		  deliveryMessage,
				gift_msg		  giftMessage,
				order_msg		 orderMessage
		  FROM  tb_order_destination
		 WHERE  order_num = #value#  
	</select>
	
	<insert id="saveOrderProduct" parameterClass="orderProduct">
		<selectKey keyProperty="productInnerSequence" resultClass="string" type="pre">SELECT lpad(nvl(max(A.order_prdt_inseq) + 1, 1), 2, '0') FROM tb_order_product A WHERE A.order_num = #orderNum#</selectKey>
		INSERT INTO tb_order_product (
			ORDER_NUM,
			ORDER_PRDT_INSEQ,
			SELL_PRDT_BCODE,
			VNDR_CNTRT_ID,
			DLVY_VNDR_ID,
			ORDER_COUNT,
			ORDER_PRDT_AMT,
			CANC_COUNT,
			CPN_DSCNT_AMT,
			ORDER_PRDT_STAT_CODE,
			OPTN_PRICE_SUM,
			SNGL_PRDT_BUY_PRICE,
			SNGL_PRDT_SELL_PRICE,
			SNGL_PRDT_CHGE_PRICE,
			SNGL_PRDT_KYOBO_CHGE_PRICE,
			KYOBO_CCL_YN,
			ORDER_DEST_INSEQ,
			kyobo_cpn_id,
			ctgr_id,
			sngl_prdt_dscnt_rate,
			sngl_prdt_org_sell_price,
			optn_name,
			last_mod_dtm,
			FREE_DLVY_YN,
			COUNT_CPN_YN,
			ACTIVE_YN,
			PSALE_YN
		) VALUES (	
			#orderNum#,
			#productInnerSequence#,
			#barcode#,
			#vendorCntractId#,
			#deliveryVendorId#,
			#orderCount#,
			#sellProductPriceSum#,
			#cancelCount#,
			#couponPrice#,
			#statusCode#,
			#optionPrice#,
			#buyPrice#,
			#sellProductPrice#,
			#chargePrice#,
			#kyoboChargePrice#,
			#kyoboCalculateYn#,
			#destinationInnerSequence#,
			#kyoboCouponId#,
			#categoryId#,
			#discountRate#,
			#orgSellPrice#,
			#optionName#,
			sysdate,
			#freeDeliveryYn#,
			#countCouponYn#,
			'Y',
			(select rcrd_psale_yn from tb_sell_product where sell_prdt_bcode = #barcode#)
		)			
	</insert>
	
	<insert id="saveOrderProductAtInfo" parameterClass="orderProductAtInfo">
		INSERT INTO tb_order_product_at_info (
			order_num,
			order_prdt_inseq,
			sell_price,
			buy_price,
			dscnt_price,
			dscnt_rate,
			chge_rate,
			kyobo_chge_rate
		) VALUES (
			#orderNum#,
			#productInnerSequence#,
			#sellPrice#,
			#buyPrice#,
			#discountPrice#,
			#discountRate#,
			#chargeRate#,
			#kyoboChargeRate#
		)
	</insert>
	
	<insert id="saveOrderOptionForKyobo" parameterClass="orderOptionForKyobo">
		<selectKey keyProperty="innerSequence" resultClass="string" type="pre">SELECT lpad(nvl(max(A.optn_inseq) + 1, 1), 2, '0') FROM tb_kyobo_select_option A WHERE A.order_num = #orderNum# AND A.order_prdt_inseq = #productInnerSequence#</selectKey>
		INSERT INTO tb_kyobo_select_option (
			ORDER_NUM,
			ORDER_PRDT_INSEQ,
			OPTN_INSEQ,
			OPTN_YN,
			OPTN_PRICE,
			OPTN_NAME,
			OPTN_VALUE,
			CVSL_CONT,
			BCODE,
			CHGE_PRICE
		) VALUES (	
			#orderNum#,
			#productInnerSequence#,
			#innerSequence#,
			#optionYn#,
			#price#,
			#name#,
			#value#,
			#cvslName#,
			#barcode#,
			#chargePrice#
		)			
	</insert>
	
	<select id="getOrderProductByDestination" parameterClass="orderDestination" resultClass="orderProduct">
		SELECT 
			A.order_num				  orderNum,
			A.order_prdt_inseq		   productInnerSequence,
			A.sell_prdt_bcode			barcode,
			A.vndr_cntrt_id			  vendorCntractId,
			A.order_count				orderCount,
			A.order_prdt_amt			 sellProductPriceSum,
			A.canc_count				 cancelCount,
			A.cpn_dscnt_amt			  couponPrice,
			A.order_prdt_stat_code	   statusCode,
			A.optn_price_sum			 optionPrice,
			A.sngl_prdt_buy_price		buyPrice,
			A.sngl_prdt_sell_price	   sellProductPrice,
			A.sngl_prdt_chge_price	   chargePrice,
			A.sngl_prdt_kyobo_chge_price kyoboChargePrice,
			A.kyobo_ccl_yn			   kyoboCalculateYn,
			A.order_dest_inseq		   destinationInnerSequence,
			B.prdt_name				  productName,
			B.dlvy_vndr_id			   deliveryVendorId,
			A.optn_name				  optionName,
			A.ctgr_id					categoryId,
			A.sngl_prdt_dscnt_rate	   discountRate,
			A.sngl_prdt_org_sell_price   orgSellPrice,
			A.last_mod_dtm			   lastModifyDatetime,
			A.free_dlvy_yn			   freeDeliveryYn,
			A.count_cpn_yn			   countCouponYn,
			A.kyobo_cpn_id			   kyoboCouponId
		  FROM tb_order_product A, tb_sell_product B
		 WHERE A.order_num = #orderNum#
		   AND A.order_dest_inseq = #innerSequence#
		   AND A.sell_prdt_bcode = B.sell_prdt_bcode
		 ORDER BY B.dlvy_vndr_id
	</select>
	
	<insert id="saveOrderDeliveryRequest" parameterClass="orderDeliveryRequest">
		INSERT INTO tb_order_delivery_request (
			order_num,
			order_dest_inseq,
			dlvy_vndr_id,
			order_dlvy_amt,
			order_dlvy_chng_amt,
			order_dlvy_amt_chng_rsn_code,
			KYOBO_DLVY_AMT_FREE_RSN,
			at_dlvy_amt,
			at_dlvy_std_amt,
			kyobo_cpn_id,
			cpn_dscnt_amt
		) VALUES (			
			#orderNum#,
			#destinationSequence#,
			#deliveryVendorId#,
			#deliveryAmount#,
			#deliveryChangeAmount#,
			#deliveryAmountChangeReasonCode#,
			#kyoboDeliveryAmountFreeReason#,
			#atDeliveryAmount#,
			#atDeliveryStandardAmount#,
			#couponId#,
			#couponPrice#
		)
	</insert>
	
	<select id="getOrderDeliveryRequestByDestination" parameterClass="orderDestination" resultClass="orderDeliveryRequest">
		SELECT
			order_num					 orderNum,
			order_dest_inseq			  destinationSequence,
			dlvy_vndr_id				  deliveryVendorId,
			order_dlvy_amt				deliveryAmount,
			order_dlvy_chng_amt		   deliveryChangeAmount,
			order_dlvy_amt_chng_rsn_code  deliveryAmountChangeReasonCode,
			at_dlvy_amt				   atDeliveryAmount,
			at_dlvy_std_amt			   atDeliveryStandardAmount,
			kyobo_cpn_id				  couponId,
			cpn_dscnt_amt				 couponPrice
		  FROM tb_order_delivery_request
		 WHERE order_num = #orderNum#
		   AND order_dest_inseq = #innerSequence#
	</select>
	
	<select id="getOrders" parameterClass="orderCriteria" resultClass="orderListData">
		SELECT order_num orderNum, 
			   buyer_name buyerName, 
			   order_dtm orderDatetime
		  FROM tb_order 
		 ORDER BY order_dtm DESC
	</select>
	
	<select id="getOrderCountByPage" parameterClass="orderCriteria" resultClass="int">
		SELECT count(order_num)
		  FROM tb_order 
		 WHERE rownum <![CDATA[ < ]]> #topCount# + 1
		 ORDER BY order_dtm DESC
	</select>
	
	<insert id="saveDelivery" parameterClass="delivery">
		/*OrderSQL.saveDelivery*/
		INSERT INTO
		TB_DELIVERY
		(
		ORDER_NUM
		, ORDER_DEST_INSEQ
		, dlvy_id
		, DLVY_STATUS_CODE
		, DLVY_GBN_CODE
		, REGST_DTM
		, RTN_SEQ
		, SEND_NO
		, FREE_DLVY_YN
		, CCL_YN
		, DLVY_METHD_CODE
		, TCB_ID
		, SPRT_SEND_YN
		, DLVY_VNDR_ID
		, SHIP_REGST_DT
		, DLVY_CMPLT_DT
		, ETC_DLVY_YN
		, last_mod_dtm
		, burn_dlvy_yn
		, dstb_dlvy_yn
		, sales_gbn
		)
		VALUES
		(
		#orderNum#
		, #orderDestinationInseq#
		, #deliveryId#
		, #deliveryStatusCode#
		, #deliveryGubunCode#
		, sysdate
		, #returnSeq#
		, #sendNo#
		, #freeDeliveryYn#
		, #calculateYn#
		, #deliveryMethodCode#
		, #tacbaeId#
		, #separateSendYn#
		, #deliveryVendorId#
		, #shippingRegistDate#
		, #deliveryCompleteDate#
		, #etcDeliveryYn#
		, sysdate
		, #burnDeliveryYn#
		, #distributionDeliveryYn#
		, #salesGubun#
		)
	</insert>
	
	<insert id="saveOrderDeliveryProduct" parameterClass="orderDeliveryProductParam">
		/*OrderSQL.saveOrderDeliveryProduct*/
		INSERT INTO
			TB_ORDER_DELIVERY_PRODUCT
		(
			ORDER_DLVY_PRDT_STAT_CODE
			, DLVY_PROC_DTM
			, dlvy_id
			, DLVY_COUNT
			, ORDER_DLVY_PRDT_SEQ
			, ORDER_NUM
			, ORDER_PRDT_INSEQ
			, order_dlvy_prdt_ship_stat_code
			, dlvy_stby_count
		)
		VALUES
		(
			#orderDeliveryProductStatusCode#
			, sysdate
			, #deliveryId#
			, #deliveryCount#
			, ORDER_DLVY_PRDT_SEQ.NEXTVAL
			, #orderNum#
			, #orderProductInseq#
			, #shippingStatusCode#
			, #deliveryStandbyCount#
		)
	</insert>
	
	<delete id="deleteOrderDeliveryProduct" parameterClass="string">
		DELETE
		  FROM tb_order_delivery_product
		 WHERE 1 = 1
		<isNotEmpty property="value" prepend="AND">
				dlvy_id in (SELECT D.dlvy_id
							  FROM tb_order A, 
								   tb_order_destination B, 
								   tb_order_delivery_request C, 
								   tb_delivery D 
							 WHERE A.order_num = B.order_num 
							   AND B.order_num = C.order_num
							   AND C.order_num = D.order_num
							   AND C.order_dest_inseq = D.order_dest_inseq
							   AND C.dlvy_vndr_id = D.dlvy_vndr_id
							   AND A.order_num = #value#)
		</isNotEmpty>
	</delete>
	
	
	<delete id="deleteDelivery" parameterClass="string">
		DELETE
		  FROM tb_delivery
		 WHERE 1 = 1
		<isNotEmpty property="value" prepend="AND">
				dlvy_id in (SELECT D.dlvy_id
							  FROM tb_order A, 
								   tb_order_destination B, 
								   tb_order_delivery_request C, 
								   tb_delivery D 
							 WHERE A.order_num = B.order_num 
							   AND B.order_num = C.order_num
							   AND C.order_num = D.order_num
							   AND C.order_dest_inseq = D.order_dest_inseq
							   AND C.dlvy_vndr_id = D.dlvy_vndr_id
							   AND A.order_num = #value#)
		</isNotEmpty>
	</delete>

	<delete id="deleteOrderDeliveryRequest" parameterClass="string">
		DELETE
		  FROM tb_order_delivery_request
		 WHERE 1 = 1
		<isNotEmpty property="value" prepend="AND">
			   order_num = #value#
		</isNotEmpty>
	</delete>

	<delete id="deleteOrderProductFreeGift" parameterClass="string">
		DELETE
		  FROM tb_order_product_free_gift
		 WHERE 1 = 1
		<isNotEmpty property="value" prepend="AND">
			   order_num = #value#
		</isNotEmpty>
	</delete>

	<delete id="deleteOrderProduct" parameterClass="string">
		DELETE
		  FROM tb_order_product
		 WHERE 1 = 1
		<isNotEmpty property="value" prepend="AND">
			   order_num = #value#
		</isNotEmpty>
	</delete>

	<delete id="deleteOrderDestinationHistory" parameterClass="string">
		DELETE
		  FROM tb_order_destination_history
		 WHERE 1 = 1
		<isNotEmpty property="value" prepend="AND">
			   order_num = #value#
		</isNotEmpty>
	</delete>
	
	<delete id="deleteOrderDestination" parameterClass="string">
		DELETE
		  FROM tb_order_destination
		 WHERE 1 = 1
		<isNotEmpty property="value" prepend="AND">
			   order_num = #value#
		</isNotEmpty>
	</delete>
	
	<delete id="deleteOrder" parameterClass="string">
		DELETE
		  FROM tb_order
		 WHERE 1 = 1
		<isNotEmpty property="value" prepend="AND">
			   order_num = #value#
		</isNotEmpty>
	</delete>
	
	<delete id="deleteKyoboSelectOption" parameterClass="string">
		DELETE
		  FROM tb_kyobo_select_option
		 WHERE 1 = 1
		<isNotEmpty property="value" prepend="AND">
			   order_num = #value#
		</isNotEmpty>
	</delete>
	
	<delete id="deleteOrderDeliveryVendorFreegift" parameterClass="string">
		DELETE
		  FROM tb_order_dlvy_vndr_free_gift
		 WHERE 1 = 1
		<isNotEmpty property="value" prepend="AND">
			   order_num = #value#
		</isNotEmpty>
	</delete>
	
	<delete id="deleteOrderProductAtTime" parameterClass="string">
		DELETE
		  FROM tb_order_product_at_info
		 WHERE 1 = 1
		<isNotEmpty property="value" prepend="AND">
			   order_num = #value#
		</isNotEmpty>
	</delete>
	
	<delete id="deleteKyoboOderLinkError">
		DELETE FROM tb_kyobo_order_link_error
	</delete>
	
	<delete id="deleteOrderAmount" parameterClass="string">
		DELETE 
		  FROM tb_kyobo_order_amount
		 WHERE 1 = 1
		<isNotEmpty property="value" prepend="AND">
			   order_num = #value#
		</isNotEmpty>
	</delete>
	
	<update id="cancelOrderByOrderNum" parameterClass="string">
		UPDATE tb_order 
		   SET order_status_code = 'C0289',
			   last_mod_dtm = sysdate
		 WHERE order_num = #value#
	</update> 
	
	<update id="cancelOrderProductByOrderNum" parameterClass="string">
		UPDATE tb_order_product
		   SET order_prdt_stat_code = 'C0172',
			   canc_count = order_count,
			   last_mod_dtm = sysdate
		 WHERE order_num = #value#
	</update> 
	
	<update id="updateOrderMaster" parameterClass="order">
		UPDATE tb_order
		   SET 
			user_num				= #userNum#,				 
			buyer_name			  = #buyerName#,					
			buyer_email_addr		= #buyerEmail#,				   
			buyer_hdphn_num		 = #handPhone#,					
			buyer_tel_num		   = #telePhone#,					
			intnet_rcpt_issue_yn	= #internetReceiptYn#,			
			cash_rcpt_issue_yn	  = #cashReceiptYn#,				
			buyer_post_num		  = #postNum#,					  
			buyer_addr			  = #address#,					  
			buyer_dtl_addr		  = #detailAddress#,				
			sms_recv_wish_yn		= #smsReceiveYn#,				 
			order_dtm			   = #orderDatetime#,				
			order_status_code	   = #orderStatusCode#,			  
			order_user_id		   = #userId#,					   
			order_user_yn		   = #userYn#,					   
			kyobo_order_methd	   = #kyonoOrderMethodId#,		   
			kyobo_user_num		  = #kyoboUserNumber#,			  
			kyobo_order_amt		 = #kyoboOrderAmount#,			 
			kyobo_dpst_use_amt	  = #kyoboDepositUseAmount#,		
			kyobo_mleg_use_amt	  = #kyoboMileage#,				 
			kyobo_pblsr_cpn_use_amt = #kyoboPublisherCouponUseAmount#,
			kyobo_dlvy_amt_free_gbn = #kyoboDeliveryAmountFreeGbn#,   
			kyobo_pymnt_vrfy_yn	 = #kyoboPaymentVerifyYn#,		 
			kyobo_pymnt_methd	   = #kyoboPaymentMethodId#,		 
			kyobo_cpn_use_amt	   = #kyoboCouponUseAmount#,
			last_mod_dtm			= sysdate,
			mall_id				 = #mallId#,
			passwd				  = #password#,
			escr_yn				 = #escrowYn#,
			escr_send_yn			= #escrowSendYn#,
			escr_dt				 = #escrowDate#,
			escr_agre_gbn		   = #escrowAgreementGbn#,
			tax_bill_yn			 = #taxBillYn#
		 WHERE order_num = #orderNum#
	</update>
	
	<update id="updateOrderProduct" parameterClass="orderProduct">
		UPDATE tb_order_product
		   SET
			   SELL_PRDT_BCODE			  = #barcode#,				 
			   VNDR_CNTRT_ID				= #vendorCntractId#,		 
			   DLVY_VNDR_ID				 = #deliveryVendorId#,		
			   ORDER_COUNT				  = #orderCount#,			  
			   ORDER_PRDT_AMT			   = #sellProductPriceSum#,	 
			   CANC_COUNT				   = #cancelCount#,			 
			   CPN_DSCNT_AMT				= #couponPrice#,			 
			   ORDER_PRDT_STAT_CODE		 = #statusCode#,			  
			   OPTN_PRICE_SUM			   = #optionPrice#,			 
			   SNGL_PRDT_BUY_PRICE		  = #buyPrice#,				
			   SNGL_PRDT_SELL_PRICE		 = #sellProductPrice#,		
			   SNGL_PRDT_CHGE_PRICE		 = #chargePrice#,			 
			   SNGL_PRDT_KYOBO_CHGE_PRICE   = #kyoboChargePrice#,		
			   KYOBO_CCL_YN				 = #kyoboCalculateYn#,		
			   ORDER_DEST_INSEQ			 = #destinationInnerSequence#,
			   kyobo_cpn_id				 = #kyoboCouponId#,		   
			   ctgr_id					  = #categoryId#,			  
			   sngl_prdt_dscnt_rate		 = #discountRate#,			
			   sngl_prdt_org_sell_price	 = #orgSellPrice#,
			   optn_name					= #optionName#,
			   last_mod_dtm				 = sysdate,
			   free_dlvy_yn				 = #freeDeliveryYn#,
			   count_cpn_yn				 = #countCouponYn#
		 WHERE 
			   ORDER_NUM					= #orderNum#				
		   AND ORDER_PRDT_INSEQ			 = #productInnerSequence#	
	</update>
	
	<select id="getOrderDestination" parameterClass="orderDestination" resultClass="orderDestination">
		SELECT
			   order_num		  orderNum,
			   order_dest_inseq   innerSequence,
			   rcvr_name		  receiverName,
			   rcvr_hdphn_num	 receiverHandPhone,
			   rcvr_tel_num	   receiverTelePhone,
			   rcvr_post_num	  receiverPostNum,
			   rcvr_addr		  receiverAddress,
			   rcvr_dtl_addr	  receiverDetailAddress,
			   wish_dlvy_dt	   wishDeliveryDate,	 
			   rcvr_email_addr	receiverEmail,		
			   dlvy_msg		   deliveryMessage,	  
			   gift_msg		   giftMessage,		  
			   order_msg		  orderMessage,		 
			   gift_msg_print_yn  giftMessagePrintYn	
		  FROM tb_order_destination
		 WHERE order_num = #orderNum#
		   AND order_dest_inseq = #innerSequence#
	</select>
	
	<update id="updateOrderDestination" parameterClass="orderDestination">
		UPDATE tb_order_destination
		   SET
			   rcvr_name		 = #receiverName#,
			   rcvr_hdphn_num	= #receiverHandPhone#,
			   rcvr_tel_num	  = #receiverTelePhone#,
			   rcvr_post_num	 = #receiverPostNum#,
			   rcvr_addr		 = #receiverAddress#,
			   rcvr_dtl_addr	 = #receiverDetailAddress#,
			   wish_dlvy_dt	  = #wishDeliveryDate#,	 
			   rcvr_email_addr   = #receiverEmail#,		
			   dlvy_msg		  = #deliveryMessage#,	  
			   gift_msg		  = #giftMessage#,		  
			   order_msg		 = #orderMessage#,		 
			   gift_msg_print_yn = #giftMessagePrintYn#
		 WHERE 
			   order_num		 = #orderNum#
		   AND order_dest_inseq  = #innerSequence#
	</update>
	
	<select id="getSaseoPostNum" parameterClass="string" resultClass="string">
		/*OrderSQL.getSaseoPostNum*/
		SELECT
			zipnum_cd
		FROM
			GIFTMALL.sys_zipcode_saseo
		WHERE
			zipnum_cd = #postNum#
	</select>
	
	<insert id="saveProductFreeGiftByOrderNum" parameterClass="string">
		INSERT INTO tb_order_product_free_gift (order_num, order_prdt_inseq, free_gift_id, free_gift_count) 
		WITH v_temp AS (
			SELECT 
				   C.order_num orderNum, 
				   C.order_prdt_inseq orderProductInseq, 
				   A.free_gift_id freeGiftId,  
				   C.order_count - C.canc_count orderCount,
				   B.lave_count laveCount
			  FROM tB_sell_product_gift_product A, 
				   tb_free_gift_master B,
				   tb_order_product C
			 WHERE A.free_gift_id = B.free_gift_id
			   AND to_char(sysdate, 'yyyyMMdd') between B.gift_prdt_prsnt_start_dt AND B.gift_prdt_prsnt_end_dt
			   AND B.gift_prdt_stat_code = 'C0331'
			   AND B.lave_count > 0
			   AND C.order_num = #value#
			   AND A.sell_prdt_bcode in (SELECT FC_GET_BARCODE(B.sell_prdt_bcode) 
										   FROM tb_sell_product B 
										  WHERE B.sell_prdt_bcode = C.sell_prdt_bcode 
											and B.sell_prdt_gbn in ('G','D','R','S')
										 )			   
			UNION ALL
			SELECT 
				   F.order_num orderNum, 
				   F.order_prdt_inseq orderProductInseq, 
				   E.free_gift_id freeGiftId, 
				   F.order_count - F.canc_count orderCount,
				   E.lave_count laveCount 
			  FROM tb_event_master A, 
				   tb_event_sell_product B,
				   tb_event_product_free_gift C,
				   tb_event_free_gift D,
				   tb_free_gift_master E,
				   tb_order_product F,
				   tb_mall_event G,
				   tb_order H
			 WHERE A.event_id = B.event_id
			   AND B.event_id = C.event_id
			   AND B.sell_prdt_bcode = C.sell_prdt_bcode
			   AND C.event_id = D.event_id
			   AND C.free_gift_id = D.free_gift_id
			   AND D.free_gift_id = E.free_gift_id
			   AND A.prmt_code = 'C0374' 
			   AND A.event_stat_code = 'C0181'
			   AND to_char(sysdate, 'yyyyMMdd') between E.gift_prdt_prsnt_start_dt AND E.gift_prdt_prsnt_end_dt
			   AND to_char(sysdate, 'yyyyMMdd') BETWEEN A.event_start_dt AND A.event_end_dt	 
			   AND E.gift_prdt_stat_code = 'C0331'
			   AND E.lave_count > 0
			   AND F.order_num = #value#
			   AND F.order_num = H.order_num
			   AND A.event_id = G.event_id
			   AND G.mall_id = H.mall_id
			   AND C.sell_prdt_bcode in (SELECT FC_GET_BARCODE(B.sell_prdt_bcode) 
										   FROM tb_sell_product B 
										  WHERE B.sell_prdt_bcode = F.sell_prdt_bcode 
											and B.sell_prdt_gbn in ('G','D','R','S'))			   
		)
		SELECT 
			   orderNum,
			   orderProductInseq,
			   freeGiftId,
			   CASE WHEN laveCount >= sum(orderCount) THEN sum(orderCount) ELSE laveCount END freeGiftCount
		  FROM v_temp 
		 WHERE orderCount > 0
	   GROUP BY orderNum, orderProductInseq, freeGiftId, laveCount
	</insert>
	
	<insert id="saveVendorBrandFreeGiftByOrderNum" parameterClass="string">
		/* OrderSQL.saveVendorBrandFreeGiftByOrderNum */
		INSERT INTO tb_order_dlvy_vndr_free_gift (order_num, order_dest_inseq, dlvy_vndr_id, free_gift_id, free_gift_count)
		WITH v_temp as (   
			SELECT A.order_num orderNum, 
				   B.order_dest_inseq orderDestInSeq,
				   A.dlvy_vndr_id vendorId, 
				   nvl(sum(A.sngl_prdt_sell_price * (A.order_count - A.canc_count)), 0) sumPrice,
				   C.brand_id brandId
			  FROM tb_order_product A, 
				   tb_order_destination B,
				   tb_sell_product C
			 WHERE 
				   A.order_num = B.order_num
			   AND A.order_num = #value#
			   AND A.order_dest_inseq = B.order_dest_inseq
			   AND A.order_count - A.canc_count > 0
			   AND A.sell_prdt_bcode = C.sell_prdt_bcode
			 GROUP BY A.order_num, B.order_dest_inseq, A.dlvy_vndr_id, C.brand_id
		)
		SELECT X.orderNum, 
			   X.orderDestInSeq, 
			   X.vendorId,
			   A.free_gift_id freeGiftId, 
			   1 giftCount
		  FROM v_temp X, 
			   tb_free_gift_master A
		 WHERE prdt_free_gift_yn = 'N'
		   AND A.lave_count > 0
		   AND A.vndr_id = X.vendorId
		   AND A.brand_id = X.brandId
		   AND sumPrice between A.std_start_amt AND A.std_end_amt
		   AND to_char(sysdate, 'yyyyMMdd') between A.gift_prdt_prsnt_start_dt AND A.gift_prdt_prsnt_end_dt
		   AND A.gift_prdt_stat_code = 'C0331'	
	</insert>
	
	<insert id="saveVendorFreeGiftByOrderNum" parameterClass="string">
		/* OrderSQL.saveVendorFreeGiftByOrderNum */
		INSERT INTO tb_order_dlvy_vndr_free_gift (order_num, order_dest_inseq, dlvy_vndr_id, free_gift_id, free_gift_count)
		WITH v_temp as (   
			SELECT A.order_num orderNum, 
				   B.order_dest_inseq orderDestInSeq,
				   A.dlvy_vndr_id vendorId, 
				   nvl(sum(A.sngl_prdt_sell_price * (A.order_count - A.canc_count)), 0) sumPrice
			  FROM tb_order_product A, 
				   tb_order_destination B
			 WHERE 
				   A.order_num = B.order_num
			   AND A.order_num = #value#
			   AND A.order_dest_inseq = B.order_dest_inseq
			   AND A.order_count - A.canc_count > 0
			 GROUP BY A.order_num, B.order_dest_inseq, A.dlvy_vndr_id
		)
		SELECT X.orderNum, 
			   X.orderDestInSeq, 
			   X.vendorId,
			   A.free_gift_id freeGiftId, 
			   1 giftCount
		  FROM v_temp X, 
			   tb_free_gift_master A
		 WHERE prdt_free_gift_yn = 'N'
		   AND A.lave_count > 0
		   AND A.vndr_id = X.vendorId
		   AND A.brand_id is null
		   AND sumPrice between A.std_start_amt AND A.std_end_amt
		   AND to_char(sysdate, 'yyyyMMdd') between A.gift_prdt_prsnt_start_dt AND A.gift_prdt_prsnt_end_dt
		   AND A.gift_prdt_stat_code = 'C0331'
	</insert>
	
	<select id="getOrderProductFreeGiftListByOrderNum" parameterClass="string" resultClass="orderProductFreeGift">
		SELECT order_num orderNum,
			   order_prdt_inseq orderProductInseq,
			   free_gift_id freeGiftId,
			   free_gift_count freeGiftCount 
		  FROM tb_order_product_free_gift
		 WHERE order_num = #value#
	 </select>
	 
	 <select id="getOrderProductFreeGiftListForEventProduct" parameterClass="string" resultClass="eventFreeGift">
		WITH v_temp AS (
			SELECT A.event_id eventId,
				   E.free_gift_id freeGiftId, 
				   F.order_count - F.canc_count orderCount,
				   E.lave_count laveCount
			  FROM tb_event_master A, 
				   tb_event_sell_product B,
				   tb_event_product_free_gift C,
				   tb_event_free_gift D,
				   tb_free_gift_master E,
				   tb_order_product F,
				   tb_mall_event G,
				   tb_order H
			 WHERE A.event_id = B.event_id
			   AND B.event_id = C.event_id
			   AND B.sell_prdt_bcode = C.sell_prdt_bcode
			   AND C.event_id = D.event_id
			   AND C.free_gift_id = D.free_gift_id
			   AND D.free_gift_id = E.free_gift_id
			   AND A.prmt_code = 'C0374' 
			   AND A.event_stat_code = 'C0181'
			   AND to_char(sysdate, 'yyyyMMdd') between E.gift_prdt_prsnt_start_dt AND E.gift_prdt_prsnt_end_dt
			   AND to_char(sysdate, 'yyyyMMdd') BETWEEN A.event_start_dt AND A.event_end_dt	 
			   AND E.gift_prdt_stat_code = 'C0331'
			   AND E.lave_count > 0
			   AND F.order_num = #value#
			   AND F.order_num = H.order_num
			   AND A.event_id = G.event_id
			   AND G.mall_id = H.mall_id
			   AND C.sell_prdt_bcode in (SELECT FC_GET_BARCODE(B.sell_prdt_bcode) 
										   FROM tb_sell_product B 
										  WHERE B.sell_prdt_bcode = F.sell_prdt_bcode 
											and B.sell_prdt_gbn in ('G','D','R','S')
										)
		)
		SELECT 
			   eventId,
			   freeGiftId, 
			   CASE WHEN laveCount >= sum(orderCount) THEN sum(orderCount) ELSE laveCount END freeGiftCount
		  FROM v_temp 
		 WHERE orderCount > 0
	   GROUP BY eventId, freeGiftId, laveCount
	</select>
	
	<select id="getOrderDeliveryVendorFreeGiftListByOrderNum" parameterClass="string" resultClass="orderDeliveryVendorFreeGift">
		SELECT order_num orderNum, 
			   order_dest_inseq destinationSequence,
			   dlvy_vndr_id deliveryVendorId,
			   free_gift_id freeGiftId,
			   free_gift_count freeGiftCount  
		  FROM tb_order_dlvy_vndr_free_gift
		 WHERE order_num = #orderNum#
	</select>
	
	<select id="getCosmeticOrders" parameterClass="dateParam" resultClass="cosmeticOrder">
		/** AND A1.dlvy_vndr_id in ('3968','3969','3970','3971','3972','3973') **/
		SELECT A.order_num orderNum,  
			   A.buyer_name buyerName,
			   A.buyer_hdphn_num buyerHPNumber,
			   A.buyer_hdphn_num buyerTelNumber,
			   A.buyer_email_addr buyerEmailAddress,
			   A.buyer_post_num buyerPostNumber,
			   A.buyer_addr buyerAddress,
			   A.buyer_dtl_addr buyerDetailAddress,
			   B.rcvr_name receiverName,
			   B.rcvr_hdphn_num receiverHPNumber,
			   B.rcvr_tel_num receiverTelNumber,
			   B.rcvr_post_num receiverPostNumber,
			   B.rcvr_addr receiverAddress,
			   B.rcvr_dtl_addr receiverDetailAddress,
			   B.gift_msg giftMessage,
			   B.dlvy_msg deliveryMessage,
			   B.order_msg orderMessage
		  FROM tb_order A, tb_order_destination B
		 WHERE A.order_num = B.order_num
		   AND B.order_dest_inseq = '01'
		   AND A.order_num in (SELECT A1.order_num
								 FROM tb_order_delivery_request A1, 
									  tb_order_destination B1, 
									  tb_order C1
								WHERE A1.order_num = B1.order_num
								  AND A1.order_dest_inseq = B1.order_dest_inseq
								  AND B1.order_num = C1.order_num
								  AND A1.dlvy_vndr_id in ('3968','3969','3970','3971','3972','3973')
								  AND C1.order_dtm between to_date(#sdate# || '000000', 'yyyymmddhh24miss') AND to_date(#edate# || '235959', 'yyyymmddhh24miss')
								  and C1.ORDER_STATUS_CODE != 'C0281'	
								GROUP BY A1.order_num)
	</select>
	
	<select id="getCosmeticOrderAmountByOrderNum" resultClass="cosmeticOrderAmount" parameterClass="string">
	/** AND A1.dlvy_vndr_id in ('3968','3969','3970','3971','3972','3973') **/
		WITH v_temp as (
			SELECT sum(A1.order_dlvy_amt) + sum(A1.order_dlvy_chng_amt) deliveryAmount, 
				   0 orderAmount, 
				   0 couponAmount 
			  FROM tb_order_delivery_request A1
			 WHERE A1.order_num = #value#
			   AND A1.dlvy_vndr_id in ('3968','3969','3970','3971','3972','3973')
			 GROUP BY A1.order_num
			union all
			SELECT 0 deliveryAmount, 
				   sum(C1.sngl_prdt_sell_price * (C1.order_count - C1.canc_count)) orderAmount, 
				   sum(decode(C1.order_count - C1.canc_count, 0, 0, C1.cpn_dscnt_amt)) couponAmount
			  FROM tb_order_product C1
			 WHERE 
				   C1.dlvy_vndr_id in ('3968','3969','3970','3971','3972','3973')
			   AND C1.order_num = #value#
			 GROUP BY C1.order_num
		)
		SELECT sum(deliveryAmount) deliveryAmount,
			   sum(orderAmount) orderAmount,
			   sum(couponAmount) couponAmount,
			   sum(orderAmount - couponAmount) realAmount
		  FROM v_temp 
	</select>
	
	<select id="getCosmeticOrderProductByOrderNum" resultClass="cosmeticOrderProduct" parameterClass="string">
	/** AND A.dlvy_vndr_id in ('3968','3969','3970','3971','3972','3973') **/
		SELECT A.order_num orderNum,
			   (SELECT plus_good_id FROM giftmall.god_goodinfo_hot_plus where hot_good_id = A.sell_prdt_bcode) productBarcode,
			   B.prdt_name productName,
			   B.spec_name specName,
			   decode(A.order_prdt_stat_code, 'C0171', '24010', '24020') statusCode,
			   '26120' deliveryStatusCode,
			   A.order_count orderCount, 
			   A.canc_count cancelCount,
			   A.sngl_prdt_buy_price buyPrice, 
			   A.sngl_prdt_sell_price sellPrice
		  FROM tb_order_product A,
			   tb_sell_product B
		 WHERE A.order_num = #value#
		   AND A.sell_prdt_bcode = B.sell_prdt_bcode
		   AND A.dlvy_vndr_id in ('3968','3969','3970','3971','3972','3973')
	</select>


    <update id="decreaseOrderProduct" parameterClass="orderProduct">
        insert into TB_LIMIT_COUNT (SELL_PRDT_BCODE         , QTY          , FLAG  , REGST_DTM)
                            values (#barcode#               , #orderCount# , 'N'   , sysdate)
    </update>
    
    <update id="decreaseOrderMusic" parameterClass="orderProduct">
        insert into TB_LIMIT_COUNT (SELL_PRDT_BCODE         , QTY          , FLAG  , REGST_DTM)
                            values (#barcode#               , #orderCount# , 'E'   , sysdate)
    </update>

<!-- 
    <update id="decreaseOrderProduct" parameterClass="orderProduct">
        UPDATE TB_SELL_PRODUCT 
           SET LAVE_COUNT = LAVE_COUNT - #orderCount#,
               SELL_COUNT = SELL_COUNT + #orderCount#
         WHERE SELL_PRDT_BCODE = #barcode#
    </update>
    
    <update id="decreaseOrderMusic" parameterClass="orderProduct">
        UPDATE TB_SELL_MUSICDESC 
           SET LAVE_COUNT = LAVE_COUNT - #orderCount#,
               SELL_COUNT = SELL_COUNT + #orderCount#
         WHERE SELL_PRDT_BCODE = #barcode#
    </update>
 -->
	
	<select id="getOrderDeliveryProductParamByOrderProduct" parameterClass="orderProduct" resultClass="orderDeliveryProductParam">
		SELECT 
				order_dlvy_prdt_seq				 orderDeliveryProductSeq
			  , B.ORDER_DLVY_PRDT_STAT_CODE		 orderDeliveryProductStatusCode
			  , B.DLVY_PROC_DTM					 deliveryProcessDate
			  , B.dlvy_id						   deliveryId
			  , B.DLVY_COUNT						deliveryCount
			  , B.ORDER_DLVY_PRDT_SEQ			   orderDeliveryProductSeq
			  , B.ORDER_NUM						 orderNum
			  , B.ORDER_PRDT_INSEQ				  orderProductInseq
			  , B.ORDER_DLVY_PRDT_SHIP_STAT_CODE	shippingStatusCode
			  , B.dlvy_stby_count				   deliveryStandbyCount
		  FROM tb_order_product A,
			   tb_order_delivery_product B,
			   tb_delivery C
		 WHERE A.order_num = B.order_num
		   AND A.order_prdt_inseq = B.order_prdt_inseq
		   AND A.sell_prdt_bcode = #barcode#
		   AND A.order_num = #orderNum#
		   AND A.order_prdt_inseq = #productInnerSequence#
		   AND B.dlvy_id = C.dlvy_id
		   AND C.dlvy_gbn_code = 'C0131'
	</select>
	
	<select id="getOrderProductAll" resultClass="orderProduct">
		SELECT 
			order_num				  orderNum,
			order_prdt_inseq		   productInnerSequence,
			sell_prdt_bcode			barcode,
			vndr_cntrt_id			  vendorCntractId,
			order_count				orderCount,
			order_prdt_amt			 sellProductPriceSum,
			canc_count				 cancelCount,
			cpn_dscnt_amt			couponPrice,
			order_prdt_stat_code	   statusCode,
			optn_price_sum			 optionPrice,
			sngl_prdt_buy_price		buyPrice,
			sngl_prdt_sell_price	   sellProductPrice,
			sngl_prdt_chge_price	   chargePrice,
			sngl_prdt_kyobo_chge_price kyoboChargePrice,
			kyobo_ccl_yn			   kyoboCalculateYn,
			order_dest_inseq		   destinationInnerSequence,
			dlvy_vndr_id			   deliveryVendorId,
			optn_name				  optionName,
			ctgr_id					categoryId,
			sngl_prdt_dscnt_rate	   discountRate,
			sngl_prdt_org_sell_price   orgSellPrice,
			last_mod_dtm			   lastModifyDatetime,
			free_dlvy_yn			   freeDeliveryYn
		  FROM tb_order_product
	</select>
	
	<update id="updateOrderBuyPrice" parameterClass="orderProduct">
		UPDATE tb_order_product
		   SET sngl_prdt_buy_price = #buyPrice#,
			   sngl_prdt_chge_price = #chargePrice#
		 WHERE order_num = #orderNum#
		   AND order_prdt_inseq = #productInnerSequence#
	</update>
	
	<update id="cancelDeliveryByOrderNum" parameterClass="string">
		UPDATE tb_delivery 
		   SET dlvy_status_code = 'C0125'
		 WHERE dlvy_gbn_code = 'C0131'
		   AND order_num = #value#
	</update>
	
	<update id="cancelOrderDeliveryProductByOrderNum" parameterClass="string">
		UPDATE tb_order_delivery_product 
		   SET order_dlvy_prdt_stat_code = 'C0235',
			   dlvy_stby_count = 0
		 WHERE dlvy_id in (SELECT dlvy_id FROM tb_delivery WHERE dlvy_gbn_code = 'C0131' AND order_num = #value#)
	</update> 
	
	<select id="getListOfOrder" parameterClass="orderCriteria" resultClass="orderParam">
		/*OrderSQL.getListOfOrder*/
		select
			a.order_num		 orderNum
			, to_char(a.order_dtm, 'yyyy.mm.dd')	orderDate
			, a.buyer_name	  buyerName
			, a.buyer_tel_num   telePhone
			, a.buyer_hdphn_num handPhone
			, b.rcvr_name	   receiverName
			, b.rcvr_post_num   receiverPostNum
			, b.rcvr_addr	   receiverAddress
			, b.rcvr_dtl_addr   receiverDetailAddress
			, a.user_num		userNum
			, (select user_id from tb_user where user_num = a.user_num) userId
			, a.ORDER_STATUS_CODE orderStatusCode
		from
			tb_order a
			join tb_order_destination b on (b.order_num = a.order_num)
			join tb_order_delivery_request c on (c.order_num = b.order_num and c.order_dest_inseq = b.order_dest_inseq)
			join tb_delivery d on (d.order_num = c.order_num and d.order_dest_inseq = c.order_dest_inseq)
		where
			1=1
		<isNotEmpty prepend="AND" property="startDate">
			a.order_dtm <![CDATA[>=]]> to_date(#startDate#, 'yyyymmdd')
		</isNotEmpty>
		<isNotEmpty prepend="AND" property="endDate">
			a.order_dtm <![CDATA[<]]> to_date(#endDate#, 'yyyymmdd') + 1
		</isNotEmpty>
		<isNotEmpty prepend="AND" property="orderNo">
			a.order_num = #orderNo#
		</isNotEmpty>
		<isNotEmpty prepend="AND" property="orderNo">
			a.order_num = #orderNo#
		</isNotEmpty>
		<isNotEmpty prepend="AND" property="sendNo">
			d.send_no = #sendNo#
		</isNotEmpty>
		<isNotEmpty prepend="AND" property="buyerName">
			upper(a.buyer_name) like '%'||upper(#buyerName#)||'%'
		</isNotEmpty>
		<isNotEmpty prepend="AND" property="receiverName">
			upper(a.buyer_name) like '%'||upper(#receiverName#)||'%'
		</isNotEmpty>
		<isNotEmpty prepend="AND" property="mallId">
			a.mall_id = #mallId#
		</isNotEmpty>
		<isNotEmpty prepend="AND" property="buyerTelNum">
			(REPLACE(a.buyer_tel_num, '-', '') = REPLACE(#buyerTelNum#, '-', '') or REPLACE(a.buyer_hdphn_num, '-', '') = REPLACE(#buyerTelNum#, '-', ''))
		</isNotEmpty>
		<isNotEmpty prepend="AND" property="userId">
			a.user_num  in (select user_num from tb_user where upper(user_id) like '%'||upper(#userId#)||'%')
		</isNotEmpty>
		group by a.order_num, a.order_dtm, a.buyer_name, a.buyer_tel_num, a.buyer_hdphn_num
		, b.rcvr_name, b.rcvr_post_num, b.rcvr_addr, b.rcvr_dtl_addr, a.user_num, a.ORDER_STATUS_CODE
		order by a.order_dtm desc, a.order_num asc
	</select>

	<insert id="insertCart" parameterClass="cartParam">
		<selectKey type="pre" resultClass="int" keyProperty="cartSeq">
			SELECT cart_seq.nextval FROM dual
		</selectKey>
		INSERT INTO tb_cart
		(
			cart_seq
		  , prdt_count
		  , user_num
		  , mall_id
		  , user_yn
		  , sesn_hash_key
		  , sell_prdt_bcode
		  , cvsl_cont
		  , cvsl_price
		  , cvsl_bcode
		  , cvsl_font
		  , cvsl_prdt_yn
		  , optn_prdt_yn
		  , order_make_yn
		  , order_make_cont
		  , note
		  , regst_dtm
		  , optn_name_list
		  , optn_value_list
		  , GROUPSELLYN
		)
		VALUES
		(
			#cartSeq#
		  , #prdtCount#
		  , #userNum#
		  , #mallId#
		  , #userYn#
		  , #sesnHashKey#
		  , #sellPrdtBcode#
		  , #cvslCont#
		  , #cvslPrice#
		  , #cvslBcode#
		  , #cvslFont#
		  , #cvslPrdtYn#
		  , #optnPrdtYn#
		  , #orderMakeYn#
		  , #orderMakeCont#
		  , #note#
		  , SYSDATE
		  , #optnNameList#
		  , #optnValueList#
		  , #groupSellYn#
		)
	</insert>
	
	<select id="userLimitAmt" parameterClass="cartCriteria" resultClass="int">
	   select FC_GET_STEP_LIMITAMT(#userNum#)
	     from dual
	</select>
	
	<select id="selectCartProductList" parameterClass="cartCriteria" resultClass="cartProductListData">
		SELECT  A.cart_seq		  cartSeq
			  , A.prdt_count		prdtCount
			  , A.user_num		  userNum
			  , A.mall_id		   mallId
			  , A.user_yn		   userYn
			  , A.sesn_hash_key	 sesnHashKey
			  , A.sell_prdt_bcode   sellPrdtBcode
			  , A.cvsl_cont		 cvslCont
			  , A.cvsl_price		cvslPrice
			  , A.cvsl_bcode		cvslBcode
			  , A.cvsl_font		 cvslFont
			  , A.cvsl_prdt_yn	  cvslPrdtYn
			  , A.optn_prdt_yn	  optnPrdtYn
			  , A.order_make_yn	 orderMakeYn
			  , A.order_make_cont   orderMakeCont
			  , A.note			  note
			  , A.regst_dtm		 regstDtm
			  , A.optn_name_list	optnNameList
			  , A.optn_value_list   optnValueList
			  , FC_GET_PRODUCT_IMAGE_URL(C.sell_prdt_bcode) productImageUrl
			  , C.prdt_name		 prdtName
			  , B.spec_name		 specName
			  , B.sell_prdt_gbn	 sellPrdtGbn
			  , C.sell_prdt_bcode   primeSellPrdtBcode
			  , B.PRDT_SELL_PRICE prdtSellPrice
			  , FC_GET_LAST_PRICE(A.sell_prdt_bcode,'02','') - (FC_GET_LAST_PRICE(A.sell_prdt_bcode,'02','') * FC_GET_CHGE_RATE(A.sell_prdt_bcode,'02')/100) prdtBuyPrice
			  , FC_GET_LAST_PRICE(A.sell_prdt_bcode, #mallId#, #userNum#) sellPrice
			  , (FC_GET_LAST_PRICE(A.sell_prdt_bcode, #mallId#, #userNum#) + DECODE(A.cvsl_prdt_yn, 'Y', A.cvsl_price, 0)) * A.prdt_count sumSellPrice
			  , C.dlvy_vndr_id	  dlvyVndrId
			  , D.vndr_name		 dlvyVndrName
			  , FC_GET_CHGE_RATE(B.sell_prdt_bcode, #mallId#) chargeRate
			  , C.prmt_code			 permitCode
			  , E.cntrt_end_dt		  vndrCntrtEndDt
			  , E.vndr_cntrt_stat_code  vndrCntrtStatCode
			  , B.prdt_stat_code		prdtStatCode
			  , B.limit_count		   limitCount
			  , B.lave_count			laveCount
			  , 
				CASE
					WHEN FC_GET_FREE_DLVY_YN(C.sell_prdt_bcode, #mallId#) = 'Y' THEN 'Y' 
					WHEN FC_GET_FREE_DLVY_YN(C.sell_prdt_bcode, #mallId#) = 'N' 
					 AND C.sell_prdt_gbn in ('D','R') 
					 AND (select music_shop_user_grade_id from tb_mall_user_detail where user_num = #userNum# and mall_id = #mallId#) IN ('03','04')  THEN 'Y'
					ELSE 'N'
				END freeDlvyYn
			  , C.max_order_alw_count   maxOrderAlwCount
			  , C.vndr_cntrt_id		 vndrCntrtId
			  , CASE
					WHEN FC_IS_VALID_PRODUCT(A.sell_prdt_bcode, #mallId#) = 'N' THEN '8'
					WHEN C.prmt_code != 'C0302' THEN '1'
					WHEN TO_DATE(E.cntrt_end_dt||'235959', 'yyyyMMddhh24miss') <![CDATA[ < ]]> SYSDATE THEN '2'
					WHEN E.vndr_cntrt_stat_code != 'C0072' THEN '3'
					WHEN B.prdt_stat_code = 'C0315' THEN '4'
					WHEN B.prdt_stat_code = 'C0313' THEN '5'
					WHEN B.prdt_stat_code = 'C0312'
					 AND B.limit_count != 99999
					 AND B.lave_count <![CDATA[ < ]]> 0	 THEN '5'
					WHEN B.prdt_stat_code = 'C0312' 
					 AND B.limit_count != 99999
					 AND (B.lave_count - A.prdt_count) <![CDATA[ < ]]> 0  THEN '6'
					WHEN B.prdt_stat_code = 'C0312' 
					 AND C.max_order_alw_count != 99999
					 AND (C.max_order_alw_count - A.prdt_count) <![CDATA[ < ]]> 0  THEN '13'
					WHEN B.prdt_stat_code = 'C0312' THEN '0'
					ELSE '7'
				END saleStatus
			  , ceil(
			    CASE 
					WHEN B.sell_prdt_gbn in ('D','R') THEN 
						FC_GET_CAL_CHGE_PRICE(
							FC_GET_DC_PRICE(A.sell_prdt_bcode, #mallId#) , 
							(decode(b.prdt_saved_rate, 0 , 1, b.prdt_saved_rate) + 
								(select b.add_saved_rate 
									from tb_mall_user_detail a
									inner join tb_music_shop_user_grade b on a.music_shop_user_grade_id = b.music_shop_user_grade_id
									where a.user_num = #userNum#
									and a.mall_id = #mallId#
								)
							))
					WHEN FC_GET_CHGE_RATE(B.sell_prdt_bcode, #mallId#) >= #stdChgeRate# AND B.sell_prdt_gbn not in ('D','R') THEN FC_GET_CAL_CHGE_PRICE(FC_GET_DC_PRICE(A.sell_prdt_bcode, #mallId#), #savedRate#) 
					WHEN B.sell_prdt_gbn in ('C') THEN 0
					ELSE 0 
				END / 10) * 10 savedPrice
			  , b.gcard_auto_pay_yn gcardAutoPayYn
			  , b.gcard_auto_pay_day gcardAutoPayDay
			  , b.gcard_expiry_day gcardExpiryDay
			  , b.rcrd_cd rcrdCd
			  , H.rtng_code rtngCode
			  , B.rcrd_stat rcrdStat
			  , (select count(*) cnt from  tb_wish_product 
			         where sell_prdt_bcode = c.sell_prdt_bcode 
			         and user_num = #userNum#
			         and mall_id = #mallId#) wishYn
		  FROM  tb_cart A
			  , tb_sell_product B
			  , tb_sell_product C
			  , tb_vendor D
			  , tb_vendor_contract E
			  , tb_record H
			<isNotEmpty property="orderId">
			  , tb_cart_selt_prdt G
			</isNotEmpty>
		 WHERE A.sell_prdt_bcode = B.sell_prdt_bcode
		   AND FC_GET_BARCODE(B.sell_prdt_bcode) = C.sell_prdt_bcode
		   AND C.dlvy_vndr_id = D.vndr_id
		   AND B.vndr_cntrt_id = E.vndr_cntrt_id
		   AND B.rcrd_cd = H.rcrd_cd(+)
		   
		<isNotEmpty property="orderId">
		   AND  A.cart_seq = G.cart_seq
		   AND  G.order_id = #orderId#
		</isNotEmpty>
        <isEmpty property="orderId">
           AND A.GROUPSELLYN is null
        </isEmpty>
		<isEmpty property="orderId" prepend="AND">
			B.sell_prdt_gbn <![CDATA[<>]]> 'C'
		</isEmpty>
		<isEmpty property="orderId" prepend="AND">
			B.sell_prdt_gbn <![CDATA[<>]]> 'F'
		</isEmpty>
		<isEqual property="userYn" compareValue="true" prepend="AND">
				A.user_num = #userNum# AND A.mall_id = #mallId#
		</isEqual>
		<isEqual property="userYn" compareValue="false" prepend="AND">
				A.user_num is null AND A.sesn_hash_key = #sesnHashKey#
		</isEqual>
		<isNotEmpty property="cartSeqList" prepend="AND">
				A.cart_seq IN 
		   <iterate open="(" close=")" property="cartSeqList" conjunction=",">
				#cartSeqList[]#
		   </iterate>
		</isNotEmpty>
		 ORDER BY C.dlvy_vndr_id, A.cart_seq
	</select>
	
	<select id="selectOptionTempList" parameterClass="cartCriteria" resultClass="optionTemp">
		SELECT  sell_prdt_bcode barcode
			  , optn_seq sequence
			  , optn_name optionName
			  , optn_desc optionDescription
		  FROM  tb_temp_option
		 WHERE  sell_prdt_bcode = #sellPrdtBcode#
		 ORDER BY optn_seq
	</select>
	
	<select id="selectCartProductFreeGiftList" parameterClass="cartCriteria" resultClass="cartProductFreeGiftListData">
		WITH v_temp AS (
			SELECT  A.free_gift_id	freeGiftId
				  , B.lave_count	  laveCount
				  , B.free_gift_name  freeGiftName
				  , C.prdt_count	  prdtCount
			  FROM  tb_sell_product_gift_product A
				  , tb_free_gift_master B
				  , tb_cart C
			 WHERE  A.free_gift_id = B.free_gift_id
			   AND  TO_CHAR(sysdate, 'yyyyMMdd') between B.gift_prdt_prsnt_start_dt AND B.gift_prdt_prsnt_end_dt
			   AND  B.gift_prdt_stat_code = 'C0331'
			   AND  B.lave_count > 0
			   AND  A.sell_prdt_bcode = FC_GET_BARCODE(C.sell_prdt_bcode)
			   AND  C.cart_seq = #cartSeq#
			<isEqual property="userYn" compareValue="true" prepend="AND">
					C.user_num = #userNum#
			   AND  C.mall_id = #mallId#
			</isEqual>
			
			UNION ALL
			
			SELECT  F.free_gift_id freeGiftId
				  , F.lave_count laveCount
				  , F.free_gift_name  freeGiftName
				  , G.prdt_count	  prdtCount
			  FROM  tb_event_master A
				  , tb_mall_event B
				  , tb_event_sell_product C
				  , tb_event_product_free_gift D
				  , tb_event_free_gift E
				  , tb_free_gift_master F
				  , tb_cart G
			 WHERE  A.event_id = B.event_id
			   AND  B.mall_id = #mallId#
			   AND  A.event_id = C.event_id
			   AND  C.event_id = D.event_id
			   AND  C.sell_prdt_bcode = D.sell_prdt_bcode
			   AND  D.event_id = E.event_id
			   AND  D.free_gift_id = E.free_gift_id
			   AND  E.free_gift_id = F.free_gift_id
			   AND  A.prmt_code = 'C0374' 
			   AND  A.event_stat_code = 'C0181'
			   AND  TO_CHAR(sysdate, 'yyyyMMdd') between F.gift_prdt_prsnt_start_dt AND F.gift_prdt_prsnt_end_dt
			   AND  TO_CHAR(sysdate, 'yyyyMMdd') BETWEEN A.event_start_dt AND A.event_end_dt	 
			   AND  F.gift_prdt_stat_code = 'C0331'
			   AND  F.lave_count > 0
			   AND  D.sell_prdt_bcode = FC_GET_BARCODE(G.sell_prdt_bcode)
			   AND  G.cart_seq = #cartSeq#
			<isEqual property="userYn" compareValue="true" prepend="AND">
					G.user_num = #userNum#
			   AND  G.mall_id = #mallId#
			</isEqual>
			<isEqual property="userYn" compareValue="false" prepend="AND">
					G.sesn_hash_key = #sesnHashKey#
			</isEqual>
		)
		SELECT  freeGiftId
			  , laveCount
			  , freeGiftName
			  , prdtCount
		  FROM  v_temp
	</select>
	
	<select id="selectCartDlvyVndrFreeGiftList" parameterClass="cartCriteria" resultClass="cartProductFreeGiftListData">
		WITH v_temp AS (
			SELECT  B.dlvy_vndr_id dlvyVndrId
				  , nvl(sum(FC_GET_DC_PRICE(A.sell_prdt_bcode, #mallId#) * (A.prdt_count)), 0) sumPrice
			  FROM  tb_cart A
				  , tb_sell_product B
				<isNotEmpty property="orderId">
				  , tb_cart_selt_prdt C
				</isNotEmpty>
			 WHERE  FC_GET_BARCODE(A.sell_prdt_bcode) = B.sell_prdt_bcode
			   AND  B.dlvy_vndr_id = #dlvyVndrId#
			<isNotEmpty property="orderId">
			   AND  A.cart_seq = C.cart_seq
			   AND  C.order_id = #orderId#
			</isNotEmpty>
			<isEqual property="userYn" compareValue="true">
			   AND  A.user_num = #userNum#
			   AND  A.mall_id = #mallId#
			</isEqual>
			<isEqual property="userYn" compareValue="false">
			   AND  A.sesn_hash_key = #sesnHashKey#
			</isEqual>
			 GROUP BY B.dlvy_vndr_id
		)
		SELECT  A.free_gift_id freeGiftId
			  , A.lave_count laveCount
			  , A.free_gift_name freeGiftName
			  , 1 prdtCount
			  , B.dlvyVndrId dlvyVndrId
		  FROM  tb_free_gift_master A
			  , v_temp B
		 WHERE  A.vndr_id = B.dlvyVndrId
		   AND  A.prdt_free_gift_yn = 'N'
		   AND  A.gift_prdt_stat_code = 'C0331'
		   AND  TO_CHAR(SYSDATE, 'yyyyMMdd') BETWEEN A.gift_prdt_prsnt_start_dt AND A.gift_prdt_prsnt_end_dt
		   AND  A.brand_id IS NULL
		   AND  B.sumPrice between A.std_start_amt AND A.std_end_amt
	</select>
	
	<select id="selectCartBrandFreeGiftList" parameterClass="cartCriteria" resultClass="cartProductFreeGiftListData">
		WITH v_temp AS (
			SELECT  B.dlvy_vndr_id dlvyVndrId
				  , nvl(sum(FC_GET_DC_PRICE(A.sell_prdt_bcode, #mallId#) * (A.prdt_count)), 0) sumPrice
				  , B.brand_id brandId
			  FROM  tb_cart A
				  , tb_sell_product B
				<isNotEmpty property="orderId">
				  , tb_cart_selt_prdt C
				</isNotEmpty>
			 WHERE  FC_GET_BARCODE(A.sell_prdt_bcode) = B.sell_prdt_bcode
			   AND  B.dlvy_vndr_id = #dlvyVndrId#
			<isNotEmpty property="orderId">
			   AND  A.cart_seq = C.cart_seq
			   AND  C.order_id = #orderId#
			</isNotEmpty>
			<isEqual property="userYn" compareValue="true">
			   AND  A.user_num = #userNum#
			   AND  A.mall_id = #mallId#
			</isEqual>
			<isEqual property="userYn" compareValue="false">
			   AND  A.sesn_hash_key = #sesnHashKey#
			</isEqual>
			 GROUP BY B.dlvy_vndr_id, B.brand_id
		)
		SELECT  A.free_gift_id freeGiftId
			  , A.lave_count laveCount
			  , A.free_gift_name freeGiftName
			  , 1 prdtCount
			  , B.dlvyVndrId dlvyVndrId  
		  FROM  tb_free_gift_master A
			  , v_temp B
		 WHERE  A.vndr_id = B.dlvyVndrId
		   AND  A.prdt_free_gift_yn = 'N'
		   AND  A.gift_prdt_stat_code = 'C0331'
		   AND  TO_CHAR(SYSDATE, 'yyyyMMdd') BETWEEN A.gift_prdt_prsnt_start_dt AND A.gift_prdt_prsnt_end_dt
		   AND  A.brand_id = B.brandId
		   AND  B.sumPrice between A.std_start_amt AND A.std_end_amt
	</select>
				
	<select id="selectCartProductSumListByDlvyVndrId" parameterClass="cartCriteria" resultClass="totalProductPriceByDeliveryVendor">
		SELECT  C.vndr_id dlvyVndrId
			  , C.vndr_name dlvyVndrName
			  , C.dlvy_levy_std_amt dlvyLevyStdAmt
			  , SUM((FC_GET_LAST_PRICE(A.sell_prdt_bcode, #mallId#, #userNum#) + DECODE(A.cvsl_prdt_yn, 'Y', A.cvsl_price, 0)) * A.prdt_count) sellPriceSum
			  , CASE 
					WHEN C.dlvy_levy_std_amt - SUM((FC_GET_LAST_PRICE(A.sell_prdt_bcode, #mallId#, #userNum#) + DECODE(A.cvsl_prdt_yn, 'Y', A.cvsl_price, 0)) * A.prdt_count) > 0 THEN C.dlvy_amt 
					ELSE 0
				END AS dlvyAmtResult
			  , C.dlvy_amt dlvyAmt
			  , SUM(A.prdt_count) prdtCountSum
			  , SUM((CASE 
						WHEN B.sell_prdt_gbn in ('D','R') THEN 
							FC_GET_CAL_CHGE_PRICE(
								FC_GET_DC_PRICE(A.sell_prdt_bcode, #mallId#) , 
								(decode(b.prdt_saved_rate, 0 , 1, b.prdt_saved_rate) + 
									(select b.add_saved_rate 
										from tb_mall_user_detail a
										inner join tb_music_shop_user_grade b on a.music_shop_user_grade_id = b.music_shop_user_grade_id
										where a.user_num = #userNum#
										and a.mall_id = #mallId#
									)
								))
						WHEN FC_GET_CHGE_RATE(B.sell_prdt_bcode, #mallId#) >= #stdChgeRate# AND B.sell_prdt_gbn not in ('D','R') THEN FC_GET_CAL_CHGE_PRICE(FC_GET_DC_PRICE(A.sell_prdt_bcode, #mallId#), #savedRate#) 
						ELSE 0 
					END) * A.prdt_count ) savedPriceSum
		  FROM  tb_cart A
			  , tb_sell_product B
			  , tb_vendor C
			<isNotEmpty property="orderId">
			  , tb_cart_selt_prdt D
			</isNotEmpty>
		 WHERE  FC_GET_BARCODE(A.sell_prdt_bcode) = B.sell_prdt_bcode
		   AND  B.dlvy_vndr_id = C.vndr_id
		   
		<isNotEmpty property="orderId">
		   AND  A.cart_seq = D.cart_seq
		   AND  D.order_id = #orderId#
		</isNotEmpty>
		<isEmpty property="orderId">
		   AND A.GROUPSELLYN is null
		</isEmpty>
		<isEmpty property="orderId" prepend="AND">
			B.sell_prdt_gbn <![CDATA[<>]]> 'C'
		</isEmpty>
		<isEmpty property="orderId" prepend="AND">
			B.sell_prdt_gbn <![CDATA[<>]]> 'F'
		</isEmpty>
		<isEqual property="userYn" compareValue="true" prepend="AND">
				A.user_num = #userNum#
		   AND  A.mall_id = #mallId#
		</isEqual>
		<isEqual property="userYn" compareValue="false" prepend="AND">
				A.sesn_hash_key = #sesnHashKey#
		</isEqual>
		<isEqual property="hottracksYn" compareValue="true">
		   AND  B.dlvy_vndr_id = '0625'
		</isEqual>
		<isEqual property="hottracksYn" compareValue="false">
		   AND  B.dlvy_vndr_id NOT IN ('0625')
		</isEqual>
		 GROUP BY C.vndr_id, C.vndr_name, C.dlvy_levy_std_amt, C.dlvy_amt
	</select>
	
	<select id="checkCartProductSaleStatus" parameterClass="cartCriteria" resultClass="cartProductListData">
		SELECT  CASE
				 WHEN FC_IS_VALID_PRODUCT(A.sell_prdt_bcode, #mallId#) = 'N' THEN '8' 
				  WHEN B.prmt_code != 'C0302' THEN '1'
				  WHEN TO_DATE(C.cntrt_end_dt||'235959', 'yyyyMMddhh24miss') <![CDATA[ < ]]> SYSDATE THEN '2'
				  WHEN C.vndr_cntrt_stat_code != 'C0072' THEN '3'
				  WHEN A.prdt_stat_code = 'C0315' THEN '4'
				  WHEN A.prdt_stat_code = 'C0313' THEN '5'
				  WHEN A.prdt_stat_code = 'C0312' 
				   AND A.limit_count != 99999 
				   AND A.sell_prdt_gbn not in ('D','R')
				   AND A.lave_count <![CDATA[ < ]]> 0   THEN '5'
				  WHEN A.prdt_stat_code = 'C0312' 
				   AND A.sell_prdt_gbn not in ('D','R')
				   AND A.limit_count != 99999
				   AND A.lave_count - #prdtCount# <![CDATA[ < ]]> 0 THEN '6'
				  WHEN A.prdt_stat_code = 'C0312' 
				   AND A.sell_prdt_gbn in ('D','R')
				   AND to_char(sysdate, 'YYYYMMDDHH24') &gt;= nvl(A.rcrd_lsale_start_dth, '9999999999') 
				   AND to_char(sysdate, 'YYYYMMDDHH24') &lt;= nvl(A.rcrd_lsale_end_dth, '0000000000')
				   AND A.lave_count <![CDATA[ <= ]]> 0 THEN 'C'
				  WHEN A.prdt_stat_code = 'C0312' 
				   AND A.sell_prdt_gbn in ('D','R')
				   AND to_char(sysdate, 'YYYYMMDDHH24') &gt;= nvl(A.rcrd_lsale_start_dth, '9999999999') 
				   AND to_char(sysdate, 'YYYYMMDDHH24') &lt;= nvl(A.rcrd_lsale_end_dth, '0000000000')
				   AND A.lave_count - #prdtCount# <![CDATA[ < ]]> 0 THEN 'B'
				  WHEN A.prdt_stat_code = 'C0312' 
				   AND B.max_order_alw_count != 99999
				   AND (B.max_order_alw_count - #prdtCount#) <![CDATA[ < ]]> 0  THEN '13'
				  WHEN A.prdt_stat_code = 'C0312' 
				   AND ( A.rcrd_hard_sale_yn = 'Y' or A.rcrd_psale_yn = 'Y') THEN '0' 
				  WHEN A.prdt_stat_code = 'C0312' THEN '0'
				  ELSE '7'
				END				 saleStatus
			  , A.sell_prdt_gbn	 sellPrdtGbn
			  , B.order_make_yn	 orderMakeYn
			  , B.cvsl_yn		   cvslPrdtYn
			  , DECODE(B.sell_prdt_gbn, 'S', 0, (SELECT COUNT(*) FROM tb_temp_option WHERE sell_prdt_bcode = A.sell_prdt_bcode))	optionCount
			  , A.prdt_name         prdtName
			  , B.max_order_alw_count maxOrderAlwCount
		  FROM  tb_sell_product A
			  , tb_sell_product B
			  , tb_vendor_contract C
		 WHERE  FC_GET_BARCODE(A.sell_prdt_bcode) = B.sell_prdt_bcode
		   AND  A.vndr_cntrt_id = C.vndr_cntrt_id
		   AND  A.sell_prdt_bcode = #sellPrdtBcode#
	</select>
	
	<update id="updateCartPrdtCount" parameterClass="cartParam">
		UPDATE  tb_cart
		   SET  prdt_count = #prdtCount#
		 WHERE  cart_seq = #cartSeq#
		<isEqual property="userYn" compareValue="true" prepend="AND">
				user_num = #userNum#
		   AND  mall_id = #mallId#
		</isEqual>
		<isEqual property="userYn" compareValue="false" prepend="AND">
				sesn_hash_key = #sesnHashKey#
		</isEqual>
	</update>
	
	<delete id="deleteCart" parameterClass="cartParam">
		DELETE FROM tb_cart
		 WHERE cart_seq IN 
		<iterate open="(" close=")" property="cartSeqs" conjunction=",">
			#cartSeqs[]#
		</iterate>
		<isEqual property="userYn" compareValue="true" prepend="AND">
				user_num = #userNum#
		   AND  mall_id = #mallId#
		</isEqual>
		<isEqual property="userYn" compareValue="false" prepend="AND">
				sesn_hash_key = #sesnHashKey#
		</isEqual>
	</delete>
	
	<delete id="deleteCartSeltPrdt" parameterClass="cartParam">
		DELETE FROM tb_cart_selt_prdt
		 WHERE cart_seq IN (SELECT cart_seq
							  FROM tb_cart A
							 WHERE cart_seq IN 
							<iterate open="(" close=")" property="cartSeqs" conjunction=",">
								#cartSeqs[]#
							</iterate>
							<isEqual property="userYn" compareValue="true" prepend="AND" removeFirstPrepend="true">
									user_num = #userNum#
							   AND  mall_id = #mallId#
							</isEqual>
							<isEqual property="userYn" compareValue="false" prepend="AND" removeFirstPrepend="true">
									sesn_hash_key = #sesnHashKey#
							</isEqual>)
	</delete>
	
	<select id="selectWishProductListByDlvyVndrIdForCart" parameterClass="cartCriteria" resultClass="wishProductParam">
		SELECT  A.sell_prdt_bcode barcode
			  , B.prdt_name productName
			  , FC_GET_DC_PRICE(A.sell_prdt_bcode, #mallId#) productSellPrice
			  , FC_GET_PRODUCT_IMAGE_URL(A.sell_prdt_bcode) productImageUrl
		  FROM  tb_wish_product A
			  , tb_sell_product B
			  , tb_vendor C
		 WHERE  A.sell_prdt_bcode = B.sell_prdt_bcode
		   AND  B.dlvy_vndr_id = C.vndr_id
		   AND  A.wish_gbn = 'P'
		   AND  A.user_num = #userNum#
		   AND  B.dlvy_vndr_id = #dlvyVndrId#
	</select>
	
	<select id="selectDlvyVndrInfo" parameterClass="string" resultClass="deliveryVendorInfo">
		SELECT  A.vndr_id dlvyVndrId
			  , A.vndr_name dlvyVndrName
			  , A.dlvy_levy_std_amt dlvyLevyStdAmt
		  FROM  tb_vendor A
		 WHERE  A.vndr_id = #dlvyVndrId#
	</select>
	
	<insert id="insertCartSeltPrdt" parameterClass="cartParam">
		INSERT INTO tb_cart_selt_prdt(cart_seq, order_id)
		VALUES(#cartSeq#, #orderId#)
	</insert>
	
	<select id="selectCartSeqForQuickOrder" parameterClass="cartCriteria" resultClass="cartParam">
		SELECT  A.cart_Seq cartSeq
		  FROM  tb_cart A
		 WHERE  A.user_yn = #userYn#
		 <isEqual property="userYn" compareValue="true">
		   AND  A.user_num = #userNum#
		   AND  A.mall_id = #mallId#
		 </isEqual>
		 <isEqual property="userYn" compareValue="false">
		   AND  A.sesn_hash_key = #sesnHashKey#
		 </isEqual>  
		   AND  A.sell_prdt_bcode = #sellPrdtBcode#
		   AND  A.optn_prdt_yn = #optnPrdtYn#
		<isNotEmpty property="optnValueList">
		   AND  A.optn_value_list = #optnValueList#
		</isNotEmpty>
	</select>
	
	<insert id="insertOrderProductSaved" parameterClass="orderProductSaved">
		<selectKey keyProperty="savedInseq" resultClass="string" type="pre">
			SELECT lpad(nvl(max(A.saved_inseq) + 1, 1), 2, '0') FROM tb_order_product_saved A WHERE A.order_num = #orderNum# AND A.order_prdt_inseq = #orderPrdtInseq#
		</selectKey>
		INSERT INTO tb_order_product_saved
		(
			order_num
		  , order_prdt_inseq
		  , saved_inseq
		  , sngl_prdt_save_price
		  , save_gbn_code
		  , regst_dtm
		  , prdt_count
		  , saved_yn 
		)
		VALUES
		(
			#orderNum#
		  , #orderPrdtInseq#
		  , #savedInseq#
		  , #snglPrdtSavePrice#
		  , #saveGbnCode#
		  , SYSDATE
		  , #prdtCount#
		  , #savedYn#
		)
	</insert>
	
	<insert id="insertPayment" parameterClass="payment">
		<selectKey keyProperty="pymntInseq" resultClass="string" type="pre">
			SELECT lpad(nvl(max(A.pymnt_inseq) + 1, 1), 2, '0') FROM tb_payment A WHERE A.order_num = #orderNum#
		</selectKey>
		INSERT INTO tb_payment
		(
			order_num
		  , pymnt_inseq
		  , pymnt_means_code
		  , pymnt_stat_code
		  , pymnt_amt
		  , pymnt_dtm
		  , canc_rtn_amt
		  , lgup_deal_num
		  , lgup_chpr_deal_num
		  , lgup_pymnt_hdphn_num
		  , org_pymnt_inseq
		  , order_canc_inseq
		  , part_canc_psplt_yn
		  , key_yn
		)
		VALUES
		(
			#orderNum#
		  , #pymntInseq#
		  , #pymntMeansCode#
		  , #pymntStatCode#
		  , #pymntAmt#
		  , SYSDATE
		  , #cancRtnAmt#
		  , #lgupDealNum#
		  , #lgupChprDealNum#
		  , #lgupPymntHdphnNum#
		  , #orgPymntInseq#
		  , #orderCancInseq#
		  , #partCancPspltYn#
		  , #keyYn#
		)
	</insert>
	
	<select id="selectOrderSumByOrderNum" parameterClass="string" resultClass="cartProductSum">
		WITH v_temp AS(
			SELECT  SUM(B.sngl_prdt_sell_price * (B.order_count-B.canc_count)) sumOrderAmt
				  , SUM(DECODE(B.count_cpn_yn,'Y',(B.order_count-B.canc_count),1) * B.cpn_dscnt_amt) sumCouponAmt
				  , SUM(NVL((SELECT SUM(X.optn_price)
							   FROM tb_kyobo_select_option X
							  WHERE B.order_num = X.order_num 
								AND B.order_prdt_inseq = X.order_prdt_inseq 
								AND X.optn_yn = 'N'),0) * (B.order_count-B.canc_count)) totalCvslAmt
				  , B.order_num orderNum
				  , B.dlvy_vndr_id dlvyVndrId
				  , C.order_dest_inseq orderDestInseq
			  FROM  tb_order A
				  , tb_order_product B
				  , tb_order_destination C
			  WHERE  A.order_num = B.order_num
				AND  A.order_num = C.order_num
				AND  C.order_dest_inseq = '01'
				AND  A.order_num = #value#
				AND  B.order_count > B.canc_count
			 GROUP BY B.order_num, B.dlvy_vndr_id, C.order_dest_inseq
		)
		SELECT  X.totalPrdtAmt
			  , X.totalDlvyAmt
			  , X.totalCpnDscntAmt + NVL(Y.cpn_amt,0) totalCpnDscntAmt
		  FROM (SELECT  NVL(SUM(A.sumOrderAmt + A.totalCvslAmt),0) totalPrdtAmt
					  , NVL(SUM(B.order_dlvy_amt + B.order_dlvy_chng_amt),0) totalDlvyAmt
					  , NVL(SUM(B.cpn_dscnt_amt),0) + NVL(SUM(A.sumCouponAmt), 0) totalCpnDscntAmt
					  , A.orderNum
				  FROM  v_temp A
					  , tb_order_delivery_request B
				 WHERE  A.orderNum = B.order_num
				   AND  A.orderDestInseq = B.order_dest_inseq
				   AND  A.dlvyVndrId = B.dlvy_vndr_id
				 GROUP BY A.orderNum ) X
			  , (SELECT  A.order_num
					   , SUM(A.cpn_amt) cpn_amt
				   FROM  tb_cart_coupon_history A
				  WHERE  A.order_num = #value#
				  GROUP BY A.order_num
				) Y
		 WHERE  X.orderNum = Y.order_num(+)
		 ORDER BY X.orderNum
	</select>
	
	<select id="selectPaymentSumByOrderNum" parameterClass="payment" resultClass="int">
		SELECT  NVL((SUM(A.pymnt_amt) + SUM(A.canc_rtn_amt)), 0) orderAmt
		  FROM  tb_payment A
		 WHERE  A.order_num = #orderNum#
		 GROUP BY A.order_num
	</select>
	
    <select id="selectPaymentSumByOrderNum2" parameterClass="payment" resultClass="int">
        SELECT NVL((SUM(A.pymnt_amt) + SUM(A.canc_rtn_amt)), 0) orderAmt
          FROM tb_payment A
         WHERE A.order_num = #orderNum#
           and A.PYMNT_STAT_CODE != 'C0101'
         GROUP BY A.order_num
    </select>
	
	<select id="selectMainPaymentSumByOrderNum" parameterClass="payment" resultClass="int">
		WITH v_temp AS (
			SELECT  NVL(SUM(A.pymnt_amt), 0) orderAmt
				  , A.pymnt_means_code
				  , A.order_num
			  FROM  tb_payment A
			 WHERE  A.order_num = #orderNum#
			   AND  A.pymnt_stat_code in ('C0101','C0102')
			   AND  A.pymnt_means_code NOT IN ('C0115', 'C0116','C0118','C0119','C011B','C011C','C011F')
			 GROUP BY A.order_num, A.pymnt_means_code
			 
			 UNION
			
			SELECT  NVL(SUM(A.canc_rtn_amt), 0) orderAmt
				  , B.pymnt_means_code pymnt_means_code
				  , B.order_num
			  FROM  tb_payment A
				  , tb_payment B
			 WHERE  A.order_num = B.order_num
			   AND  A.org_pymnt_inseq = B.pymnt_inseq
			   AND  A.order_num = #orderNum#
			   AND  A.org_pymnt_inseq IS NOT NULL
			   AND  A.pymnt_stat_code IN ('C0103', 'C0104')
			   AND  B.pymnt_means_code NOT IN ('C0115', 'C0116','C0118','C0119','C011B','C011C','C011F')
			 GROUP BY B.order_num, B.pymnt_means_code
		)
		SELECT SUM(X.orderAmt) orderAmt
		  FROM  v_temp X
		 GROUP BY X.order_num, X.pymnt_means_code
	</select>
	
	<select id="selectCartSeltPrdtByOrderId" parameterClass="string" resultClass="cartParam">
		SELECT cart_seq cartSeq
		  FROM tb_cart_selt_prdt
		 WHERE order_id = #orderId#
	</select>
	
	<update id="updatePaymentLGUPlusInfo" parameterClass="payment">
		UPDATE  tb_payment
		   SET  pymnt_means_code = #pymntMeansCode#
			  , lgup_deal_num = #lgupDealNum#
			  , lgup_chpr_deal_num = #lgupChprDealNum#
			  , lgup_pymnt_hdphn_num = #lgupPymntHdphnNum#
			  , part_canc_psplt_yn = #partCancPspltYn#
			  , pymnt_organ_code = #pymntOrganCode#
			  , pymnt_organ_name = #pymntOrganName#
			  , prmt_num = #prmtNum#
		 WHERE  order_num = #orderNum#
		   AND  pymnt_inseq = #pymntInseq#
	</update>
	
	<insert id="insertCreditTransfer" parameterClass="creditPayment">
		INSERT INTO tb_credit_transfer
		(
			order_num
		  , pymnt_inseq
		  , code_id
		)
		VALUES
		(
			#orderNum#
		  , #pymntInseq#
		  , #codeId#
		)
	</insert>
	
	<insert id="insertCreditPayment" parameterClass="creditPayment">
		INSERT INTO tb_credit_payment
		(
			order_num
		  , pymnt_inseq
		  , code_id
		  , itrst_free_yn
		  , mitp_count
		)
		VALUES
		(
			#orderNum#
		  , #pymntInseq#
		  , #codeId#
		  , #itrstFreeYn#
		  , #mitpCount#
		)
	</insert>
	
	<select id="selectOrderProductListByOrderNum" parameterClass="string" resultClass="cartProductListData">
		SELECT  A.sell_prdt_bcode sellPrdtBcode
			  , C.sell_prdt_bcode primeSellPrdtBcode
			  , FC_GET_PRODUCT_IMAGE_URL(A.sell_prdt_bcode) productImageUrl
			  , C.prdt_name prdtName
			  , B.sell_prdt_gbn sellPrdtGbn
			  , B.spec_name specName
			  , A.sngl_prdt_sell_price sellPrice
			  , A.order_count prdtCount
			  , ((A.sngl_prdt_sell_price + NVL((SELECT SUM(X.optn_price)
									   FROM tb_kyobo_select_option X
									  WHERE A.order_num = X.order_num 
										AND A.order_prdt_inseq = X.order_prdt_inseq 
										AND X.optn_yn = 'N'),0))  * (A.order_count-A.canc_count)) sumSellPrice
			  , NVL((SELECT SUM(X.sngl_prdt_save_price * prdt_count)
				   FROM tb_order_product_saved X 
				  WHERE A.order_num = X.order_num
					AND A.order_prdt_inseq = X.order_prdt_inseq), 0) sumSavedPrice
			  , G.vndr_name   dlvyVndrName
			  , A.order_prdt_inseq productInnerSequence
			  , E.dlvy_vndr_id dlvyVndrId
			  , B.gcard_auto_pay_yn gcardAutoPayYn
			  , B.gcard_auto_pay_day gcardAutoPayDay
			  , B.gcard_expiry_day gcardExpiryDay
			  , B.rcrd_cd rcrdCd
			  , H.rtng_code rtngCode
		  FROM  tb_order_product A
			  , tb_sell_product B
			  , tb_sell_product C
			  , tb_order D
			  , tb_order_delivery_request E
			  , tb_order_destination F
			  , tb_vendor G
			  , tb_record H
		 WHERE  A.sell_prdt_bcode = B.sell_prdt_bcode
		   AND  A.order_num = D.order_num
		   AND  A.order_num = F.order_num
		   AND  A.order_dest_inseq = F.order_dest_inseq
		   AND  F.order_num = E.order_num
		   AND  F.order_dest_inseq = E.order_dest_inseq
		   AND  A.dlvy_vndr_id = E.dlvy_vndr_id
		   AND  A.dlvy_vndr_id = G.vndr_id
		   AND  FC_GET_BARCODE(A.sell_prdt_bcode) = C.sell_prdt_bcode
		   AND  A.order_num = #value#
		   AND  B.rcrd_cd = H.rcrd_cd(+)
	</select>

	<select id="selectRecobellProductListByOrderNum" parameterClass="string" resultClass="cartProductListData">
<!-- 		SELECT  B.sell_prdt_bcode sellPrdtBcode -->
<!-- 			  , B.PRDT_NAME prdtName -->
<!-- 			  , A.sngl_prdt_sell_price sellPrice -->
<!-- 			  , SUM(A.order_count) prdtCount -->
<!-- 		  FROM  tb_order_product A -->
<!-- 			  , tb_sell_product B -->
<!-- 	     WHERE  FC_GET_BARCODE(A.sell_prdt_bcode) = B.sell_prdt_bcode -->
<!-- 		   AND  A.order_num = #value# -->
<!-- 		 GROUP BY B.sell_prdt_bcode, A.sngl_prdt_sell_price, B.PRDT_NAME -->
		SELECT  B.sell_prdt_bcode sellPrdtBcode
			  , B.PRDT_NAME prdtName
			  , A.sngl_prdt_sell_price sellPrice
			  , SUM(A.order_count) prdtCount
			  , C.vndr_name   dlvyVndrName
			  , D.ctgr_name   ctgrName
		  FROM  tb_order_product A
			  , tb_sell_product B
			  , tb_vendor C
			  , tb_category D
              , tb_product_category E
	     WHERE  FC_GET_BARCODE(A.sell_prdt_bcode) = B.sell_prdt_bcode
	       AND  A.dlvy_vndr_id = C.vndr_id
	       AND  D.ctgr_id = E.ctgr_id
           AND  E.sell_prdt_bcode = B.sell_prdt_bcode
		   AND  A.order_num = #value#
		 GROUP BY B.sell_prdt_bcode, A.sngl_prdt_sell_price, B.PRDT_NAME, C.vndr_name, D.ctgr_name
	</select>
	
	<select id="selectKyoboSelectOptionListByOrderProduct" parameterClass="orderProduct" resultClass="orderOptionForKyobo">
		SELECT  A.order_num		 orderNum
			  , A.order_prdt_inseq  productInnerSequence
			  , A.optn_yn		   optionYn
			  , A.optn_price		price
			  , A.optn_inseq		innerSequence
			  , A.optn_name		 name
			  , A.cvsl_cont		 cvslName
			  , A.bcode			 barcode
			  , A.optn_value		value
			  , A.chge_price		chargePrice
		  FROM  tb_kyobo_select_option A
		 WHERE  A.order_num = #orderNum#
		   AND  A.order_prdt_inseq = #productInnerSequence#
	</select>
	
	<select id="selectOrderProductFreeGiftListByOrderNum" parameterClass="orderProduct" resultClass="cartProductFreeGiftListData">
		SELECT  A.free_gift_count   prdtCount
			  , A.free_gift_id	  freeGiftId
			  , A.order_num		 orderNum
			  , A.order_prdt_inseq  productInnerSequence
			  , B.free_gift_name	freeGiftName
		  FROM  tb_order_product_free_gift A
			  , tb_free_gift_master B
		 WHERE  A.free_gift_id = B.free_gift_id
		   AND  A.order_num = #orderNum#
		   AND  A.order_prdt_inseq = #productInnerSequence#
	</select>
	
	<select id="selectOrderDlvyVndrFreeGiftListByOrderNum" parameterClass="string" resultClass="cartProductFreeGiftListData">
		SELECT  A.order_num		 orderNum 
			  , A.order_dest_inseq  destinationSequence
			  , A.dlvy_vndr_id	  dlvyVndrId
			  , A.free_gift_id	  freeGiftId
			  , A.free_gift_count   prdtCount
			  , B.free_gift_name	freeGiftName
		  FROM  tb_order_dlvy_vndr_free_gift A
			  , tb_free_gift_master B
		 WHERE  A.free_gift_id = B.free_gift_id
		   AND  A.order_num = #orderNum#
	</select>
	
	<select id="selectPaymentInfo" parameterClass="string" resultClass="paymentInfo">
		WITH v_temp AS (
			SELECT  SUM(DECODE(A.pymnt_means_code, 'C0111', A.pymnt_amt, 0)) paymentAmtC0111
				  , SUM(DECODE(A.pymnt_means_code, 'C0112', A.pymnt_amt, 0)) paymentAmtC0112
				  , SUM(DECODE(A.pymnt_means_code, 'C0113', A.pymnt_amt, 0)) paymentAmtC0113
				  , SUM(DECODE(A.pymnt_means_code, 'C0114', A.pymnt_amt, 0)) paymentAmtC0114
				  , SUM(DECODE(A.pymnt_means_code, 'C0115', A.pymnt_amt, 0)) paymentAmtC0115
				  , SUM(DECODE(A.pymnt_means_code, 'C0116', A.pymnt_amt, 0)) paymentAmtC0116
				  , SUM(DECODE(A.pymnt_means_code, 'C0117', A.pymnt_amt, 0)) paymentAmtC0117
				  , SUM(DECODE(A.pymnt_means_code, 'C0118', A.pymnt_amt, 0)) paymentAmtC0118
				  , SUM(DECODE(A.pymnt_means_code, 'C0119', A.pymnt_amt, 0)) paymentAmtC0119
                  , SUM(DECODE(A.pymnt_means_code, 'C011A', A.pymnt_amt, 0)) paymentAmtC011A
                  , SUM(DECODE(A.pymnt_means_code, 'C011B', A.pymnt_amt, 0)) paymentAmtC011B
                  , SUM(DECODE(A.pymnt_means_code, 'C011C', A.pymnt_amt, 0)) paymentAmtC011C
                  , SUM(DECODE(A.pymnt_means_code, 'C011D', A.pymnt_amt, 0)) paymentAmtC011D
                  , SUM(DECODE(A.pymnt_means_code, 'C011E', A.pymnt_amt, 0)) paymentAmtC011E
                  , SUM(DECODE(A.pymnt_means_code, 'C011F', A.pymnt_amt, 0)) paymentAmtC011F
                  , SUM(DECODE(A.pymnt_means_code, 'C011G', A.pymnt_amt, 0)) paymentAmtC011G
                  , SUM(DECODE(A.pymnt_means_code, 'C011H', A.pymnt_amt, 0)) paymentAmtC011H
                  , SUM(DECODE(A.pymnt_means_code, 'C011I', A.pymnt_amt, 0)) paymentAmtC011I
                  , SUM(DECODE(A.pymnt_means_code, 'C011J', A.pymnt_amt, 0)) paymentAmtC011J
                  , SUM(DECODE(A.pymnt_means_code, 'C011K', A.pymnt_amt, 0)) paymentAmtC011K
                  , SUM(DECODE(A.pymnt_means_code, 'C011L', A.pymnt_amt, 0)) paymentAmtC011L
                  , SUM(DECODE(A.pymnt_means_code, 'C011M', A.pymnt_amt, 0)) paymentAmtC011M
                  , SUM(DECODE(A.pymnt_means_code, 'C011N', A.pymnt_amt, 0)) paymentAmtC011N
				  , A.order_num orderNum 
				  , '01' pymntInseq
			  FROM  tb_payment A
			 WHERE  A.order_num = #value#
			   AND  A.pymnt_stat_code in ('C0101','C0102')
			   AND  (A.key_yn IS NULL OR A.key_yn = 'N')
			 GROUP BY A.order_num
		)
		SELECT  A.paymentAmtC0111
			  , A.paymentAmtC0112
			  , A.paymentAmtC0113 
			  , A.paymentAmtC0114
			  , A.paymentAmtC0115
			  , A.paymentAmtC0116
			  , A.paymentAmtC0118
			  , A.paymentAmtC0119
              , A.paymentAmtC011A
              , A.paymentAmtC011B
              , A.paymentAmtC011C
              , A.paymentAmtC011D
              , A.paymentAmtC011E
              , A.paymentAmtC011F
              , A.paymentAmtC011G
              , A.paymentAmtC011H
              , A.paymentAmtC011I
              , A.paymentAmtC011J
              , A.paymentAmtC011K
              , A.paymentAmtC011L
              , A.paymentAmtC011M
              , A.paymentAmtC011N
              , (  A.paymentAmtC0111 + A.paymentAmtC0112 + A.paymentAmtC0113 
                 + A.paymentAmtC0114 + A.paymentAmtC0117 + A.paymentAmtC011A 
                 + A.paymentAmtC011D + A.paymentAmtC011E + A.paymentAmtC011G 
                 + A.paymentAmtC011H + A.paymentAmtC011I + A.paymentAmtC011J
                 + A.paymentAmtC011K + A.paymentAmtC011L + A.paymentAmtC011M
                 + A.paymentAmtC011N) pymntAmt
			  , (NVL((SELECT SUM(DECODE(X.count_cpn_yn,'Y',X.order_count,1) * X.cpn_dscnt_amt) 
						FROM tb_order_product X 
					   WHERE X.order_num = A.orderNum),0)
				+ NVL((SELECT SUM(Y.cpn_dscnt_amt)
						 FROM tb_order_delivery_request Y
						WHERE Y.order_num = A.orderNum),0)
				+ NVL((SELECT  Z.cpn_amt
						 FROM  tb_cart_coupon_history Z
						WHERE  Z.order_num = A.orderNum
						  AND  Z.cpn_canc_yn = 'N'),0)) cpnDscntAmt
			  , (SELECT SUM(Y.order_dlvy_amt) FROM tb_order_delivery_request Y WHERE Y.order_num = A.orderNum) dlvyAmt
			  , NVL((SELECT SUM(Z.sngl_prdt_save_price * Z.prdt_count) FROM tb_order_product_saved Z WHERE Z.order_num = A.orderNum),0) savedPrice
			  , B.pymnt_means_code pymntMeansCode
			  , B.pymnt_dtm pymntDtm
			  , B.lgup_pymnt_hdphn_num lgupPymntHdphnNum
			  , B.lgup_deal_num lgupDealNum
			  , B.lgup_chpr_deal_num lgupChprDealNum
			  , B.prmt_num prmtNum
			  , C.paymentCodeId
			  , C.itrstFreeYn
			  , C.mitpCount
			  , C.transferCodeId
			  , (select D.LGD_ACCOUNTNUM from TB_CASH_PAYMENT D where D.ORDER_NUM = B.ORDER_NUM and D.PYMNT_INSEQ = B.PYMNT_INSEQ) lgdACCOUNTNUM
              , B.PYMNT_ORGAN_NAME lgdACCOUNTNAME
              , B.PYMNT_STAT_CODE pymntStatCode 
              , A.paymentAmtC0118 gsAmt
              , D.CARDNAME niceCardNm
              , D.CARDQUOTA niceCardqyota
              , D.BANKNAME niceBank
              , D.RCPTTID  niceBankTID
              , D.VBANKBANKNAME nicevBank
              , D.VBANKNUM nicevBankNum
              , (select D.LGTID from TB_NPAYCASHREQ D where D.ORDER_NUM = B.ORDER_NUM and D.SEQ = 1 and D.GUBUN = '3') pymntOrganName
		  FROM  v_temp A
			  , tb_payment B
			  ,(SELECT  X.code_id paymentCodeId
					  , X.itrst_free_yn itrstFreeYn
					  , X.mitp_count mitpCount
					  , Y.code_id transferCodeId
				  FROM  tb_credit_payment X
					  , tb_credit_transfer Y
					  , v_temp Z
				 WHERE  Z.orderNum = X.order_num(+)
				   AND  Z.pymntInseq = X.pymnt_inseq(+)
				   AND  Z.orderNum = Y.order_num(+)
				   AND  Z.pymntInseq = Y.pymnt_inseq(+)) C
             , TB_NICEPAY_INFO D
		 WHERE A.orderNum = B.order_num
		   AND A.pymntInseq = B.pymnt_inseq
           and A.orderNum = D.ORDER_NUM(+) 
           and A.pymntInseq = D.PYMNT_INSEQ(+)
	</select>
	
    <select id="getOrderOfficeProductYn" parameterClass="string" resultClass="string">
		select (case when (select nvl(sum(ORDER_PRDT_AMT),0) AMT
		                    from TB_ORDER_PRODUCT A
		                       , TB_PRODUCT_CATEGORY B
		                   where A.ORDER_NUM = #value#
		                     and A.SELL_PRDT_BCODE = B.SELL_PRDT_BCODE
		                     and B.STD_CTGR_YN = 'Y'
                             and B.CTGR_ID like '00001000%') <![CDATA[>]]> 0 
                      and to_char(sysdate,'yyyymmdd') between '20120629' and '20120831'  
		             then 'Y' 
		             else 'N' 
		         end) orderOfficeProductYn
		  from dual 
    </select>
	
	<select id="selectUsableCpnCartSeqList" parameterClass="cartCriteria" resultClass="int">
		WITH v_temp AS (
		  SELECT  A.cpn_id cpnId
				, B.sell_prdt_bcode sellPrdtBcode
			FROM  tb_user_coupon A
				, tb_coupon_apply_product B
		   WHERE  A.cpn_id = B.cpn_id
			 AND  A.kyobo_cpn_id = B.kyobo_cpn_id
			 AND  A.user_num = #userNum#
			 AND  A.mall_id = #mallId#
			 AND  TO_CHAR(SYSDATE, 'yyyyMMdd') <![CDATA[<=]]> A.cpn_valid_dt
			 AND  A.user_cpn_stat_code = 'C0611'
           union all
          SELECT A.cpn_id cpnId
               , '' sellPrdtBcode
            FROM tb_user_coupon A
           where A.user_num = #userNum#
             AND A.mall_id = #mallId#
             AND TO_CHAR(SYSDATE, 'yyyyMMdd') <![CDATA[<=]]> A.cpn_valid_dt
             AND A.user_cpn_stat_code = 'C0611'
             and A.cpn_id = '8000652983'
           union all
          SELECT A.cpn_id cpnId
               , '' sellPrdtBcode
            FROM tb_user_coupon A
           where A.user_num = #userNum#
             AND A.mall_id = #mallId#
             AND TO_CHAR(SYSDATE, 'yyyyMMdd') <![CDATA[<=]]> A.cpn_valid_dt
             AND A.user_cpn_stat_code = 'C0611'
             and A.cpn_id = '8000657940'
             
		)
		SELECT  C.cart_seq cartSeq
		  FROM  v_temp A
			  , tb_cart_selt_prdt B
			  , tb_cart C
		 WHERE  (A.sellPrdtBcode = C.sell_prdt_bcode or A.cpnId = '8000652983' or A.cpnId = '8000657940')
		   AND  B.cart_seq = C.cart_seq
		   AND  C.user_yn = 'Y'
		   AND  C.mall_id = #mallId#
		   AND  C.user_num = #userNum#
		   AND  B.order_id = #orderId# 
		   
		UNION
		
		SELECT  C.cart_seq cartSeq
		  FROM  tb_cart_selt_prdt D
			  , tb_cart C 
		 WHERE  D.cart_seq = C.cart_seq
		   AND  C.user_yn = 'Y'
		   AND  C.mall_id = #mallId#
		   AND  C.user_num = #userNum#
		   AND  D.order_id = #orderId#
		   AND  exists (SELECT * 
						  FROM  tb_user_coupon A
							  , tb_coupon_master B
						 WHERE  A.cpn_id = B.cpn_id
						   AND  A.kyobo_cpn_id = B.kyobo_cpn_id
						   AND  A.user_num = C.user_num
						   AND  A.mall_id = C.mall_id
						   AND  TO_CHAR(SYSDATE, 'yyyyMMdd') <![CDATA[<=]]> A.cpn_valid_dt
						   AND  A.user_cpn_stat_code = 'C0611'
						   AND  B.scope_gbn = 'C'
						   AND 'Y' = FC_IS_VALID_CTGR_CPN(C.sell_prdt_bcode, A.kyobo_cpn_id)
						   AND (   B.sngl_prdt_limit_price = 0 
								OR B.sngl_prdt_limit_price IS NULL
								OR (FC_GET_DC_PRICE(C.sell_prdt_bcode, #mallId#) + FC_GET_DC_PRICE(C.cvsl_bcode, #mallId#) >= B.sngl_prdt_limit_price)
								)
						)
	</select>
	
	<select id="selectUsableCpnListBySellPrdtBcode" parameterClass="cartCriteria" resultClass="userCouponListData">
		SELECT  B.user_cpn_seq userCouponSequence
			  , B.cpn_id couponId
			  , B.kyobo_cpn_id kyoboCouponId
			  , A.cpn_name couponName
			  , A.rate_yn rateYn
			  , A.cpn_dscnt_amt couponDiscountAmount
			  , A.cpn_dscnt_rate couponDiscountRate
			  , A.count_cpn_yn countCpnYn
			  , NVL(A.sngl_prdt_limit_price, 0) snglPrdtLimitPrice
		  FROM  tb_coupon_master A
			  , tb_user_coupon B
		 WHERE  A.cpn_id = B.cpn_id
		   AND  A.kyobo_cpn_id = B.kyobo_cpn_id
		   AND  FC_IS_VALID_CTGR_CPN(#sellPrdtBcode#, B.kyobo_cpn_id) = 'Y'
		   AND  A.scope_gbn = 'C'
		   AND  (  A.sngl_prdt_limit_price = 0 
				OR A.sngl_prdt_limit_price IS NULL
				OR (FC_GET_DC_PRICE(#sellPrdtBcode#, #mallId#) >= A.sngl_prdt_limit_price)
				)
		   AND  B.user_num = #userNum#
		   AND  B.mall_id = #mallId#
		   AND  TO_CHAR(SYSDATE, 'yyyyMMdd') <![CDATA[<=]]> B.cpn_valid_dt
		   AND  B.user_cpn_stat_code = 'C0611'
			<isNotEmpty property="userCouponSequence" prepend="AND">
				B.user_cpn_seq = #userCouponSequence#
			</isNotEmpty>
		   
		UNION
		
		SELECT  C.user_cpn_seq userCouponSequence
			  , C.cpn_id couponId
			  , C.kyobo_cpn_id kyoboCouponId
			  , A.cpn_name couponName
			  , A.rate_yn rateYn
			  , A.cpn_dscnt_amt couponDiscountAmount
			  , A.cpn_dscnt_rate couponDiscountRate
			  , A.count_cpn_yn countCpnYn
			  , NVL(A.sngl_prdt_limit_price, 0) snglPrdtLimitPrice
		  FROM  tb_coupon_master A
			  , tb_coupon_apply_product B
			  , tb_user_coupon C
		 WHERE  A.cpn_id = B.cpn_id
		   AND  A.cpn_id = C.cpn_id
		   AND  B.kyobo_cpn_id = C.kyobo_cpn_id
		   AND  A.scope_gbn = 'P'
		   AND  B.sell_prdt_bcode = #sellPrdtBcode#
		   AND  C.user_num = #userNum#
		   AND  C.mall_id = #mallId#
		   AND  TO_CHAR(SYSDATE, 'yyyyMMdd') <![CDATA[<=]]> C.cpn_valid_dt
		   AND  C.user_cpn_stat_code = 'C0611'
			<isNotEmpty property="userCouponSequence" prepend="AND">
				C.user_cpn_seq = #userCouponSequence#
			</isNotEmpty>
			
		union all
		
		SELECT c.user_cpn_seq usercouponsequence
		     , c.cpn_id couponid
		     , c.kyobo_cpn_id kyobocouponid
		     , a.cpn_name couponname
		     , a.rate_yn rateyn
		     , a.cpn_dscnt_amt coupondiscountamount
		     , a.cpn_dscnt_rate coupondiscountrate
		     , a.count_cpn_yn countcpnyn
		     , NVL (a.sngl_prdt_limit_price, 0) snglprdtlimitprice
		  FROM tb_coupon_master a
		     , tb_user_coupon c
		 WHERE a.cpn_id = c.cpn_id
		   AND a.scope_gbn = 'P'
		   AND c.user_num = #userNum#
		   AND c.mall_id = #mallId#
		   AND TO_CHAR (SYSDATE, 'yyyyMMdd') <![CDATA[<=]]> c.cpn_valid_dt
		   AND c.user_cpn_stat_code = 'C0611'
		   and a.cpn_id = '8000652983'
            <isNotEmpty property="userCouponSequence" prepend="AND">
                c.user_cpn_seq = #userCouponSequence#
            </isNotEmpty>
        union all
        
        SELECT  B.user_cpn_seq userCouponSequence
              , B.cpn_id couponId
              , B.kyobo_cpn_id kyoboCouponId
              , A.cpn_name couponName
              , A.rate_yn rateYn
              , A.cpn_dscnt_amt couponDiscountAmount
              , A.cpn_dscnt_rate couponDiscountRate
              , A.count_cpn_yn countCpnYn
              , NVL(A.sngl_prdt_limit_price, 0) snglPrdtLimitPrice
          FROM  tb_coupon_master A
              , tb_user_coupon B
         WHERE  A.CPN_ID = '8000657940' 
           and A.cpn_id = B.cpn_id
           AND A.scope_gbn = 'P'
           AND (  A.sngl_prdt_limit_price = 0 
                OR A.sngl_prdt_limit_price IS NULL
                OR (FC_GET_DC_PRICE(#sellPrdtBcode#, #mallId#) >= A.sngl_prdt_limit_price)
                )
           AND  B.user_num = #userNum#
           AND  B.mall_id = #mallId#
           AND  TO_CHAR(SYSDATE, 'yyyyMMdd') <![CDATA[<=]]> B.cpn_valid_dt
           AND  B.user_cpn_stat_code = 'C0611'
            <isNotEmpty property="userCouponSequence" prepend="AND">
                B.user_cpn_seq = #userCouponSequence#
            </isNotEmpty>

	</select>
	
	<select id="selectUsableCpnListByOrderAmt" parameterClass="cartCriteria" resultClass="userCouponListData">
		SELECT  A.user_cpn_seq userCouponSequence
			  , A.cpn_id couponId
			  , A.kyobo_cpn_id kyoboCouponId
			  , B.cpn_name couponName
			  , B.cpn_dscnt_amt couponDiscountAmount
			  , B.cpn_std_amt couponStandardAmount
			  , TO_CHAR (A.cpn_gain_dtm, 'yyyy-MM-dd') couponApplyStartDate
       		  , substr(a.cpn_valid_dt,1,4) || '-' || substr(a.cpn_valid_dt,5,2) || '-' || substr(a.cpn_valid_dt,7,2) couponApplyEndDate
		  FROM  tb_user_coupon A
			  , tb_coupon_master B
		 WHERE  A.cpn_id = B.cpn_id
		   AND  A.kyobo_cpn_id = B.kyobo_cpn_id
		   AND  A.user_num = #userNum#
		   AND  B.scope_gbn = 'O'
		   AND  B.CPN_USE_SITE is null
		   AND  A.mall_id = #mallId#
		   AND  A.user_cpn_stat_code = 'C0611'
		   AND  TO_CHAR(SYSDATE, 'yyyyMMdd') <![CDATA[<=]]> A.cpn_valid_dt
		<isNotEmpty property="userCouponSequence">
		   AND  A.user_cpn_seq = #userCouponSequence#
		</isNotEmpty>
		<isEmpty property="userCouponSequence">
		   AND  B.cpn_std_amt <![CDATA[<=]]> (SELECT NVL(SUM((FC_GET_DC_PRICE(T1.sell_prdt_bcode, #mallId#) + FC_GET_DC_PRICE(T1.cvsl_bcode, #mallId#)) * T1.prdt_count),0) orderPrice
												FROM tb_cart T1
												   , tb_cart_selt_prdt T2
											   WHERE T1.cart_seq = T2.cart_seq
												 AND T1.user_num = #userNum#
												 AND T2.order_id = #orderId#
												 and not exists (select T3.cpn_id from TB_COUPON_APPLY_CATEGORY T3 where T3.CPN_ID = b.cpn_id)
												 and not exists (select T3.cpn_id from TB_COUPON_APPLY_EVENT T3 where T3.CPN_ID = b.cpn_id)
												 and (B.CPN_USE_RATE is null or B.CPN_USE_RATE <![CDATA[<=]]> FC_GET_CHGE_RATE(T1.sell_prdt_bcode,'02'))
												 and T1.sell_prdt_bcode not in (select T3.SELL_PRDT_BCODE from TB_EXP_PRODUCT T3 where T3.GUBUN in ('01','02','03'))
										      )
			 union all
			SELECT a.user_cpn_seq usercouponsequence
			     , a.cpn_id couponid
			     , a.kyobo_cpn_id kyobocouponid
			     , b.cpn_name couponname
			     , b.cpn_dscnt_amt coupondiscountamount
			     , b.cpn_std_amt couponstandardamount
			     , TO_CHAR (A.cpn_gain_dtm, 'yyyy-MM-dd') couponApplyStartDate
       		     , substr(a.cpn_valid_dt,1,4) || '-' || substr(a.cpn_valid_dt,5,2) || '-' || substr(a.cpn_valid_dt,7,2) couponApplyEndDate
			  FROM tb_user_coupon a
			     , tb_coupon_master b
			 WHERE a.cpn_id = b.cpn_id
			   AND a.kyobo_cpn_id = b.kyobo_cpn_id
			   AND a.user_num = #userNum#
			   AND b.scope_gbn = 'O'
			   AND  B.CPN_USE_SITE is null
			   AND a.mall_id = #mallId#
			   AND a.user_cpn_stat_code = 'C0611'
			   AND TO_CHAR (SYSDATE, 'yyyyMMdd') <![CDATA[<=]]> a.cpn_valid_dt
			   AND b.cpn_std_amt <![CDATA[<=]]> (SELECT NVL (SUM((fc_get_dc_price (T1.sell_prdt_bcode, #mallId#) + fc_get_dc_price (T1.cvsl_bcode, #mallId#))* T1.prdt_count),0) orderprice
			                           FROM tb_cart T1
			                              , tb_cart_selt_prdt T2 
			                              , TB_PRODUCT_CATEGORY T3
			                          WHERE T1.cart_seq = T2.cart_seq 
			                            AND T1.user_num = #userNum#
			                            AND T2.order_id = #orderId#
			                            and T1.sell_prdt_bcode = T3.sell_prdt_bcode
			                            and T3.STD_CTGR_YN = 'Y'
			                            and (B.CPN_USE_RATE is null or B.CPN_USE_RATE <![CDATA[<=]]> FC_GET_CHGE_RATE(T1.sell_prdt_bcode,'02'))
			                            and exists (select T4.cpn_id from TB_COUPON_APPLY_CATEGORY T4 where T4.CPN_ID = b.cpn_id and substr(T3.CTGR_ID,1,length(T4.CTGR_ID)) = T4.CTGR_ID)
			                            and T1.sell_prdt_bcode not in (select T4.SELL_PRDT_BCODE from TB_EXP_PRODUCT T4 where T4.GUBUN in ('01','02','03'))
			                        )  
             union all
            SELECT a.user_cpn_seq usercouponsequence
                 , a.cpn_id couponid
                 , a.kyobo_cpn_id kyobocouponid
                 , b.cpn_name couponname
                 , b.cpn_dscnt_amt coupondiscountamount
                 , b.cpn_std_amt couponstandardamount
                 , TO_CHAR (A.cpn_gain_dtm, 'yyyy-MM-dd') couponApplyStartDate
       		     , substr(a.cpn_valid_dt,1,4) || '-' || substr(a.cpn_valid_dt,5,2) || '-' || substr(a.cpn_valid_dt,7,2) couponApplyEndDate
              FROM tb_user_coupon a
                 , tb_coupon_master b
             WHERE a.cpn_id = b.cpn_id
               AND a.kyobo_cpn_id = b.kyobo_cpn_id
               AND a.user_num = #userNum#
               AND b.scope_gbn = 'O'
               AND  B.CPN_USE_SITE is null
               AND a.mall_id = #mallId#
               AND a.user_cpn_stat_code = 'C0611'
               AND TO_CHAR (SYSDATE, 'yyyyMMdd') <![CDATA[<=]]> a.cpn_valid_dt
               AND b.cpn_std_amt <![CDATA[<=]]> (SELECT NVL (SUM((fc_get_dc_price (T1.sell_prdt_bcode, #mallId#) + fc_get_dc_price (T1.cvsl_bcode, #mallId#))* T1.prdt_count),0) orderprice
                                       FROM tb_cart T1
                                          , tb_cart_selt_prdt T2 
                                      WHERE T1.cart_seq = T2.cart_seq 
                                        AND T1.user_num = #userNum#
                                        AND T2.order_id = #orderId#
                                        and (B.CPN_USE_RATE is null or B.CPN_USE_RATE <![CDATA[<=]]> FC_GET_CHGE_RATE(T1.sell_prdt_bcode,'02'))
                                        and exists (select T4.SELL_PRDT_BCODE
                                                      from TB_COUPON_APPLY_EVENT T3
                                                      join TB_EVENT_SELL_PRODUCT T4 on T3.EVENT_ID = T4.EVENT_ID and T3.EVENT_TYPE_INSEQ = T4.EVENT_TYPE_INSEQ
                                                     where T3.CPN_ID = b.cpn_id
                                                       and T4.SELL_PRDT_BCODE = FC_GET_BARCODE(T1.sell_prdt_bcode))
                                        and T1.sell_prdt_bcode not in (select T3.SELL_PRDT_BCODE from TB_EXP_PRODUCT T3 where T3.GUBUN in ('01','02','03'))
                                    )  
		</isEmpty>
	</select>
	
	<select id="selectOrderDeliveryList" parameterClass="orderCriteria" resultClass="orderSimpleInfo">
		SELECT TA.ORDER_DTM orderdatetime,
		  TA.ORDER_NUM orderNum,
		  TC.PRDT_NAME prdtname,
		  TD.NUM prdtClassCount,
		  FC_GET_ORDER_STATUS_CODE(TA.ORDER_NUM) orderStatusCode,
		  TA.ESCR_YN escrowYn,
		  TA.ESCR_AGRE_GBN escrowAgreementGbn,
		  NVL((SELECT SUM(PYMNT_AMT + CANC_RTN_AMT) PYMNT_AMT
				 FROM TB_PAYMENT
				WHERE ORDER_NUM = TA.ORDER_NUM),0) orderPrdtAmt
		FROM TB_ORDER TA ,
		  TB_ORDER_PRODUCT TB ,
		  TB_SELL_PRODUCT TC,
		  (SELECT A.ORDER_NUM,
			COUNT(*)-1 NUM
		  FROM TB_ORDER_PRODUCT A
		  GROUP BY A.ORDER_NUM
		  )TD
		WHERE
		<isNotEmpty property="userNum">
		  TA.USER_NUM = #userNum#
		</isNotEmpty>
		<isEmpty property="userNum">
		  TA.ORDER_NUM = #orderNo#
		AND  TA.PASSWD = #password#
		</isEmpty>
		AND TA.ORDER_NUM					   = TB.ORDER_NUM
		AND FC_GET_BARCODE(TB.SELL_PRDT_BCODE) = TC.SELL_PRDT_BCODE
		<isEqual property="orderTermType" compareValue="0" prepend="AND">
		  TA.ORDER_DTM <![CDATA[>]]>  ADD_MONTHS(SYSDATE, -6)
		</isEqual>
		<isEqual property="orderTermType" compareValue="1" prepend="AND">
		  TA.ORDER_DTM <![CDATA[<=]]>  ADD_MONTHS(SYSDATE, -6)
		</isEqual>
		AND TB.ORDER_PRDT_INSEQ				= '01'
		AND TA.ORDER_NUM					   = TD.ORDER_NUM
		ORDER BY TA.ORDER_DTM DESC
	</select>
	
	<select id="selectOrderDeliveryListCount" parameterClass="orderCriteria" resultClass="int">
		SELECT
			COUNT(*)
		FROM
			(SELECT TA.ORDER_DTM orderdatetime,
			  TA.ORDER_NUM orderNum,
			  TC.PRDT_NAME prdtname,
			  TD.NUM orderCount,
			  TA.ORDER_STATUS_CODE orderStatusCode
			FROM TB_ORDER TA ,
			  TB_ORDER_PRODUCT TB ,
			  TB_SELL_PRODUCT TC,
			  (SELECT A.ORDER_NUM,
				COUNT(*)-1 NUM
			  FROM TB_ORDER_PRODUCT A
			  GROUP BY A.ORDER_NUM
			  )TD
			WHERE
			<isNotEmpty property="userNum">
			  TA.USER_NUM = #userNum#
			</isNotEmpty>
			<isEmpty property="userNum">
			  TA.ORDER_NUM = #orderNo#
			AND  TA.PASSWD = #password#
			</isEmpty>
			AND TA.ORDER_NUM					   = TB.ORDER_NUM
			AND FC_GET_BARCODE(TB.SELL_PRDT_BCODE) = TC.SELL_PRDT_BCODE
			<isEqual property="orderTermType" compareValue="0" prepend="AND">
			  TA.ORDER_DTM <![CDATA[>]]>  ADD_MONTHS(SYSDATE, -6)
			</isEqual>
			<isEqual property="orderTermType" compareValue="1" prepend="AND">
			  TA.ORDER_DTM <![CDATA[<=]]>  ADD_MONTHS(SYSDATE, -6)
			</isEqual>
			AND TB.ORDER_PRDT_INSEQ				= '01'
			AND TA.ORDER_NUM					   = TD.ORDER_NUM)
		WHERE  ROWNUM <![CDATA[ < ]]> #topCount# + 1
	</select>
	
	<select id="selectOrderDeliveryDetail" parameterClass="orderCriteria" resultClass="orderProductListData">
		SELECT  
		  TA.ORDER_DTM orderDatetime
		, TA.ORDER_NUM orderNum
		, TB.ORDER_PRDT_INSEQ productInnerSequence
		, TC.SELL_PRDT_BCODE barcode
		, FC_GET_PRODUCT_IMAGE_URL(TC.SELL_PRDT_BCODE) productImageUrl
		, TC.PRDT_NAME productName
		, TD.SELL_PRDT_GBN gbn
		, TD.SPEC_NAME specName
		, TB.ORDER_COUNT orderCount
		, TB.CANC_COUNT cancelCount
		, TB.SNGL_PRDT_SELL_PRICE sellProductPrice
		, TA.ORDER_STATUS_CODE orderStatusCode
		, TB.ORDER_PRDT_STAT_CODE  statusCode
		, TE.SEND_NO sendNo
		, TE.TCB_ID tcbId
		, TE.DLVY_STATUS_CODE dlvyStatusCode
		, CASE TA.ORDER_STATUS_CODE   
		  WHEN 'C028C' THEN (CASE TB.ORDER_PRDT_STAT_CODE
					   WHEN 'C0172' THEN TB.ORDER_PRDT_STAT_CODE
					   ELSE TE.DLVY_STATUS_CODE
					   END)
		  ELSE TE.DLVY_STATUS_CODE
		  END orderStatus
		, TE.DLVY_VNDR_ID deliveryVendorId
		, TF.TCB_URL tcbUrl
		, TF.TCB_NAME tcbName
		, CASE 
			WHEN (TE.DLVY_STATUS_CODE = 'C0123' OR TE.DLVY_STATUS_CODE = 'C0124') THEN TE.DLVY_COUNT
			ELSE TE.DLVY_STBY_COUNT
		  END dlvyCount
		, DECODE(TB.COUNT_CPN_YN, 'N', TB.CPN_DSCNT_AMT, TB.CPN_DSCNT_AMT * 
			(CASE WHEN (TE.DLVY_STATUS_CODE = 'C0123' OR TE.DLVY_STATUS_CODE = 'C0124') THEN TE.DLVY_COUNT
				ELSE TE.DLVY_STBY_COUNT
			END)) couponPrice
		, TR.RCRD_CD rcrdCd
		, TR.RTNG_CODE rtngCode
		, TC.gcard_auto_pay_yn gcardAutoPayYn
		FROM
		  TB_ORDER TA
		, TB_ORDER_PRODUCT TB
		, TB_SELL_PRODUCT TC
		, TB_SELL_PRODUCT TD
		, (SELECT
				D.ORDER_NUM,
				D.ORDER_PRDT_INSEQ,
				C.DLVY_VNDR_ID,
				C.DLVY_STATUS_CODE,
				C.TCB_ID,
				C.SEND_NO,
				D.DLVY_COUNT,
				D.DLVY_STBY_COUNT
		   FROM
				TB_ORDER_DESTINATION A,
				TB_ORDER_DELIVERY_REQUEST B,
				tb_delivery C,
				TB_ORDER_DELIVERY_PRODUCT D
		   WHERE
					A.order_dest_inseq = '01'
				AND A.order_num = B.ordeR_num
				AND A.order_dest_inseq = B.order_dest_inseq
				AND B.order_num = C.order_num
				AND B.order_dest_inseq = C.order_dest_inseq
				AND B.dlvy_vndr_id = C.dlvy_vndr_id
				AND C.dlvy_gbn_code = 'C0131'
				AND D.order_dlvy_prdt_stat_code != 'C0235'
				AND C.dlvy_id = D.dlvy_id)TE
		, TB_TACBAE TF
		, TB_RECORD TR
		WHERE
		  TA.ORDER_NUM = TB.ORDER_NUM
		<isNotEmpty property="userNum" prepend="AND">
			TA.USER_NUM = #userNum#
		</isNotEmpty>
		<isEmpty property="userNum" prepend="AND">
			TA.ORDER_NUM = #orderNo#
		AND  TA.PASSWD = #password#
		</isEmpty>
		AND FC_GET_BARCODE(TB.SELL_PRDT_BCODE) = TC.SELL_PRDT_BCODE
		AND TB.SELL_PRDT_BCODE = TD.SELL_PRDT_BCODE
		AND TB.ORDER_NUM = TE.ORDER_NUM
		AND TB.ORDER_PRDT_INSEQ = TE.ORDER_PRDT_INSEQ
		AND TE.TCB_ID = TF.TCB_ID(+)
		AND TC.RCRD_CD = TR.RCRD_CD(+)
		<isEqual property="orderTermType" compareValue="2" prepend="AND">
			TB.ORDER_PRDT_STAT_CODE = 'C0172'
		</isEqual>
		<isNotEmpty property="orderNo" prepend="AND">
			TA.ORDER_NUM = #orderNo#
		</isNotEmpty>
		ORDER BY TA.ORDER_NUM DESC, TB.ORDER_PRDT_INSEQ
	</select>
	
	<select id="selectOrderDeliveryCancelDetail" parameterClass="orderCriteria" resultClass="orderProductListData">
		WITH V_TEMP AS (
			SELECT
			  TC.SELL_PRDT_BCODE barcode
			, TB.DLVY_VNDR_ID deliveryVendorId
			, FC_GET_PRODUCT_IMAGE_URL(TC.SELL_PRDT_BCODE) productImageUrl
			, TC.PRDT_NAME productName
			, 'C0264' dlvyStatusCode
			, TB.CANC_COUNT dlvyCount
			, 'C0103' rtnStatusCode
			, TB.SELL_PRDT_BCODE
			, TB.ORDER_PRDT_INSEQ productInnerSequence
			FROM
			  TB_ORDER TA
			, TB_ORDER_PRODUCT TB
			, TB_SELL_PRODUCT TC
			WHERE
			  TA.ORDER_NUM = TB.ORDER_NUM
			AND TB.CANC_COUNT <![CDATA[>]]> 0
			AND TA.ORDER_NUM = #orderNo#
			<isNotEmpty property="userNum" prepend="AND">
				TA.USER_NUM = #userNum#
			</isNotEmpty>
			<isEmpty property="userNum" prepend="AND">
				TA.ORDER_NUM = #orderNo#
			AND  TA.PASSWD = #password#
			</isEmpty>
			AND FC_GET_BARCODE(TB.SELL_PRDT_BCODE) = TC.SELL_PRDT_BCODE
			UNION ALL
			SELECT
			  TE.SELL_PRDT_BCODE barcode
			, TD.DLVY_VNDR_ID deliveryVendorId
			, FC_GET_PRODUCT_IMAGE_URL(TE.SELL_PRDT_BCODE) productImageUrl
			, TE.PRDT_NAME productName
			, TA.CNSL_GBN_CODE dlvyStatusCode
			, CASE 
			  WHEN NVL(TC.DLVY_COUNT,0) !=0 THEN NVL(TC.DLVY_COUNT,0)
			  ELSE TB.RTN_COUNT
			  END dlvyCount
			, TA.RTN_STATUS_CODE rtnStatusCode
			, TD.SELL_PRDT_BCODE
			, TD.ORDER_PRDT_INSEQ productInnerSequence
			FROM
			  TB_RETURN_EXCHANGE_MASTER TA
			, TB_RETURN_EXCHANGE_PRODUCT TB
			, (SELECT
				B.ORDER_NUM
			  , B.DLVY_COUNT
			  , B.ORDER_PRDT_INSEQ
			  , A.RTN_SEQ
			  FROM
				TB_DELIVERY A
			  , TB_ORDER_DELIVERY_PRODUCT B
			  WHERE
				A.ORDER_NUM = B.ORDER_NUM
			  AND A.DLVY_ID = B.DLVY_ID
			  AND A.ORDER_NUM = #orderNo#
			  AND A.DLVY_GBN_CODE != 'C0131') TC
			, TB_ORDER_PRODUCT TD
			, TB_SELL_PRODUCT TE
			, TB_ORDER TF
			WHERE
			  TA.ORDER_NUM = #orderNo#
			<isNotEmpty property="userNum" prepend="AND">
				TF.USER_NUM = #userNum#
			</isNotEmpty>
			<isEmpty property="userNum" prepend="AND">
				TF.ORDER_NUM = #orderNo#
			AND  TF.PASSWD = #password#
			</isEmpty>
			AND TA.ORDER_NUM = TB.ORDER_NUM
			AND TA.RTN_SEQ = TB.RTN_SEQ
			AND TB.ORDER_NUM = TC.ORDER_NUM (+)
			AND TB.ORDER_PRDT_INSEQ = TC.ORDER_PRDT_INSEQ(+)
			AND TB.RTN_SEQ = TC.RTN_SEQ(+)
			AND TB.ORDER_NUM = TD.ORDER_NUM
			AND TB.ORDER_PRDT_INSEQ = TD.ORDER_PRDT_INSEQ
			AND FC_GET_BARCODE(TD.SELL_PRDT_BCODE) = TE.SELL_PRDT_BCODE
			AND TF.ORDER_NUM = TA.ORDER_NUM
			AND TA.RTN_STATUS_CODE IS NOT NULL
			AND TA.RTN_STATUS_CODE != 'C0279'
		)
		SELECT  A.*
			  , B.SPEC_NAME specName
			  , B.SELL_PRDT_GBN gbn
			  , C.RCRD_CD rcrdCd
              , c.RTNG_CODE rtngCode
		  FROM  V_TEMP A
			  , TB_SELL_PRODUCT B
			  , TB_RECORD C
		 WHERE  A.SELL_PRDT_BCODE = B.SELL_PRDT_BCODE
		   AND b.rcrd_cd = c.rcrd_cd(+)
	</select>
	
	<select id="selectFreeGiftList" parameterClass="orderCriteria" resultClass="cartProductFreeGiftListData">
		Select
		  T1.FREE_GIFT_NAME freeGiftName
		From
		  Tb_Free_Gift_Master T1
		, (SELECT
			T.FREE_GIFT_ID
		  FROM
			(SELECT
			  A.FREE_GIFT_ID
			FROM
			  TB_ORDER_PRODUCT_FREE_GIFT A
			WHERE
			  A.Order_Num = #orderNo#
			UNION ALL
			SELECT
			  A.FREE_GIFT_ID
			FROM
			  TB_ORDER_DLVY_VNDR_FREE_GIFT A
			WHERE
			  A.Order_Num = #orderNo#)T
		  Group By T.Free_Gift_Id) T2
		Where
		  T1.FREE_GIFT_ID = T2.FREE_GIFT_ID
	</select>
	
	<select id="selectOrderDeliveryInfo" parameterClass="orderCriteria" resultClass="orderParam">
		SELECT
		  A.BUYER_NAME buyerName
		, A.BUYER_EMAIL_ADDR buyerEmail
		, A.BUYER_HDPHN_NUM handPhone
		, A.BUYER_TEL_NUM telePhone
		, B.RCVR_NAME receiverName
		, B.RCVR_HDPHN_NUM receiverHandPhone
		, B.RCVR_TEL_NUM receiverTelePhone
		, B.RCVR_POST_NUM receiverPostNum
		, B.RCVR_ADDR receiverAddress
		, B.RCVR_DTL_ADDR receiverDetailAddress
		, B.DLVY_MSG deliveryMessage
		, B.ORDER_MSG orderMessage
		, B.GIFT_MSG giftMessage
		, A.ORDER_NUM orderNum
		, A.mall_id mallId
		FROM
		  TB_ORDER A,
		  TB_ORDER_DESTINATION B
		WHERE
		  A.ORDER_NUM = B.ORDER_NUM
		AND A.ORDER_NUM = #orderNo#
		AND B.ORDER_DEST_INSEQ = '01'
	</select>
	
	<select id="selectOrderDetailRefundPaymentInfo" parameterClass="orderCriteria" resultClass="paymentInfo">
		WITH v_temp AS (
			SELECT  A.order_num orderNum
				  , A.pymnt_means_code pymntMeansCode
				  , NVL(SUM(A.CANC_RTN_AMT),0) cancRtnAmt
			  FROM  tb_payment A
			 WHERE  A.pymnt_stat_code IN ('C0103', 'C0104')
			   AND  A.order_num = #orderNo#
			 GROUP BY A.order_num, A.pymnt_means_code 
		)
		SELECT  A.pymntMeansCode pymntMeansCode
			  , SUM(A.cancRtnAmt) cancRtnAmt
		  FROM  v_temp A
		 GROUP BY A.orderNum, A.pymntMeansCode
		 ORDER BY A.orderNum, A.pymntMeansCode
	</select>
	
	<select id="selectOrderDetailRefundDlvyInfo" parameterClass="orderCriteria" resultClass="int">
		WITH v_temp AS (
			SELECT  E.order_num
				  , E.order_dest_inseq
				  , E.dlvy_vndr_id
			  FROM  tb_order_cancel_history A
				  , tb_order_cancel_product B
				  , tb_order_product C
				  , tb_order_delivery_product D
				  , tb_delivery E
			 WHERE  A.order_num = B.order_num
			   AND  A.order_canc_inseq = B.order_canc_inseq
			   AND  B.order_num = C.order_num
			   AND  B.order_prdt_inseq =  C.order_prdt_inseq
			   AND  C.order_num = D.order_num
			   AND  C.order_prdt_inseq = D.order_prdt_inseq
			   AND  D.dlvy_id = E.dlvy_id
			   AND  A.order_num = #orderNo#
			   AND  A.order_canc_gbn = 'C'
			   AND  E.dlvy_gbn_code = 'C0131'
			   AND  E.dlvy_status_code != 'C0125'
			 GROUP BY E.order_num, E.order_dest_inseq, E.dlvy_vndr_id
		)
		SELECT  SUM(A.orderDlvyChngAmt) orderDlvyChngAmt
		  FROM (SELECT  NVL(SUM(B.order_dlvy_chng_amt), 0) orderDlvyChngAmt
				  FROM  v_temp A
					  , tb_order_delivery_request B
				 WHERE  A.order_num = B.order_num
				   AND  A.order_dest_inseq = B.order_dest_inseq
				   AND  A.dlvy_vndr_id = B.dlvy_vndr_id
				
				UNION ALL
				
				SELECT  NVL(SUM((-1) * A.dlvy_chng_amt), 0) orderDlvyChngAmt
				  FROM  tb_order_cancel_history A
				 WHERE  A.order_num = #orderNo#
				   AND  A.order_canc_gbn = 'R'
				) A
	</select>
	
	<select id="selectTotalOrderCancelAmtByOrderNum" parameterClass="string" resultClass="int">
		WITH v_temp AS (   
			SELECT  NVL((-1)*SUM(B.order_dlvy_amt), 0) cancDlvyAmt
				  , 0 cancPrdtPrice
			  FROM  tb_delivery A
				  , tb_order_delivery_request B
			 WHERE  A.order_num = B.order_num
			   AND  A.order_dest_inseq = B.order_dest_inseq
			   AND  A.dlvy_vndr_id = B.dlvy_vndr_id
			   AND  A.order_num = #value#
			   AND  A.dlvy_gbn_code = 'C0131'
			   AND  A.dlvy_status_code = 'C0125'
			   
			UNION ALL
			
			SELECT  NVL(SUM((B.sngl_prdt_sell_price + B.optn_amt) * B.canc_count), 0) cancPrdtPrice
				  , 0 cancDlvyAmt
			  FROM  tb_order_cancel_history A
				  , tb_order_cancel_product B
			 WHERE  A.order_num = B.order_num
			   AND  A.order_canc_inseq = B.order_canc_inseq
			   AND  A.order_num = #value#
		)
		SELECT  SUM(A.cancDlvyAmt + A.cancPrdtPrice) cancPrice
		  FROM  v_temp A
	</select>
	
	<select id="selectOrderCancelList" parameterClass="orderCriteria" resultClass="orderSimpleInfo">
		SELECT TA.ORDER_DTM orderDatetime,
		  TA.ORDER_NUM orderNum,
		  TC.PRDT_NAME prdtName,
		  TD.NUM prdtClassCount,
		  TE.CANC_RTN_AMT orderPrdtAmt,
		  FC_GET_ORDER_STATUS_CODE(TA.ORDER_NUM) orderStatusCode,
		  TA.ESCR_YN escrowYn,
		  TA.ESCR_AGRE_GBN escrowAgreementGbn
		FROM TB_ORDER TA ,
		  TB_ORDER_PRODUCT TB ,
		  TB_SELL_PRODUCT TC,
		  (SELECT A.ORDER_NUM,
			COUNT(*)-1 NUM
		  FROM TB_ORDER_PRODUCT A
		  GROUP BY A.ORDER_NUM
		  ) TD,
		  (SELECT SUM(CANC_RTN_AMT * -1) CANC_RTN_AMT,
			A.ORDER_NUM
		  FROM TB_ORDER_CANCEL_HISTORY A ,
			TB_PAYMENT B
		  WHERE A.ORDER_NUM	  = B.ORDER_NUM
		  AND A.ORDER_CANC_INSEQ = B.ORDER_CANC_INSEQ
		  AND A.ORDER_CANC_GBN   = 'C'
		  GROUP BY A.ORDER_NUM
		  )TE
		WHERE
		<isNotEmpty property="userNum">
			TA.USER_NUM = #userNum#
		</isNotEmpty>
		<isEmpty property="userNum">
			TA.ORDER_NUM = #orderNo#		  
		AND  TA.PASSWD = #password#
		</isEmpty>
		AND TA.ORDER_NUM					   = TB.ORDER_NUM
		AND FC_GET_BARCODE(TB.SELL_PRDT_BCODE) = TC.SELL_PRDT_BCODE
		AND TB.ORDER_PRDT_INSEQ				= '01'
		AND TA.ORDER_NUM					   = TD.ORDER_NUM
		AND TD.ORDER_NUM					   = TE.ORDER_NUM
		ORDER BY TA.ORDER_DTM DESC
	</select>
	
	<select id="selectOrderCancelListCount" parameterClass="orderCriteria" resultClass="int">
		SELECT
			COUNT(*)
		FROM
			(SELECT TA.ORDER_DTM,
			  TA.ORDER_NUM,
			  TC.PRDT_NAME,
			  TD.NUM,
			  TE.CANC_RTN_AMT,
			  TA.ORDER_STATUS_CODE
			FROM TB_ORDER TA ,
			  TB_ORDER_PRODUCT TB ,
			  TB_SELL_PRODUCT TC,
			  (SELECT B.ORDER_NUM,
				COUNT(*)-1 NUM
			  FROM TB_ORDER_CANCEL_HISTORY A ,
				TB_ORDER_CANCEL_PRODUCT B
			  WHERE A.ORDER_NUM	= B.ORDER_NUM
			  AND A.ORDER_CANC_GBN = 'C'
			  GROUP BY B.ORDER_NUM
			  ) TD,
			  (SELECT SUM(CANC_RTN_AMT * -1) CANC_RTN_AMT,
				A.ORDER_NUM
			  FROM TB_ORDER_CANCEL_HISTORY A ,
				TB_PAYMENT B
			  WHERE A.ORDER_NUM	  = B.ORDER_NUM
			  AND A.ORDER_CANC_INSEQ = B.ORDER_CANC_INSEQ
			  AND A.ORDER_CANC_GBN   = 'C'
			  GROUP BY A.ORDER_NUM
			  )TE
			WHERE
			<isNotEmpty property="userNum">
				TA.USER_NUM = #userNum#
			</isNotEmpty>
			<isEmpty property="userNum">
				TA.ORDER_NUM = #orderNo#		  
			AND  TA.PASSWD = #password#
			</isEmpty>
			AND TA.ORDER_NUM					   = TB.ORDER_NUM
			AND FC_GET_BARCODE(TB.SELL_PRDT_BCODE) = TC.SELL_PRDT_BCODE
			AND TB.ORDER_PRDT_INSEQ				= '01'
			AND TA.ORDER_NUM					   = TD.ORDER_NUM
			AND TD.ORDER_NUM					   = TE.ORDER_NUM)
		WHERE  ROWNUM <![CDATA[ < ]]> #topCount# + 1
	</select>
	
	<select id="selectCancelableOrderList" parameterClass="orderCriteria" resultClass="orderSimpleInfo">
        WITH v_temp AS (
            SELECT  A.order_num orderNum
                  , A.order_dtm orderDtm
                  , MAX(decode(A.order_status_code, 'C0281', 'C0281', D.dlvy_status_code)) dlvyStatusCode
              FROM  tb_order A
                  , tb_order_destination B
                  , tb_order_delivery_request C
                  , tb_delivery D
             WHERE  A.order_num = B.order_num
               AND  B.order_num = C.order_num
               AND  B.order_dest_inseq = C.order_dest_inseq
               AND  C.order_num = D.order_num
               AND  C.order_dest_inseq = D.order_dest_inseq
               AND  C.dlvy_vndr_id = D.dlvy_vndr_id
               AND  A.order_status_code in ('C0281','C0282')
               AND  B.order_dest_inseq = '01'
               AND  D.dlvy_gbn_code = 'C0131'
             <isNotEmpty property="userNum" prepend="AND">
                    A.user_num = #userNum#
             </isNotEmpty>
             <isEmpty property="userNum" prepend="AND">
                    A.order_num = #orderNo#
               AND  A.passwd = #password#
             </isEmpty>
             GROUP BY A.order_num, A.order_dtm
        )
        SELECT  A.orderNum orderNum
              , A.orderDtm orderDatetime
              , MAX(C.prdt_name) prdtName
              , COUNT(B.order_prdt_inseq) prdtClassCount
              , NVL((SELECT  SUM(D.pymnt_amt + D.canc_rtn_amt)
                       FROM  tb_payment D
                      WHERE  A.orderNum = D.order_num), 0) orderAmt
              , MAX(A.dlvyStatusCode) dlvyStatusCode
          FROM  v_temp A
              , tb_order_product B
              , tb_sell_product C
         WHERE  A.orderNum = B.order_num
           AND  FC_GET_BARCODE(B.sell_prdt_bcode) = C.sell_prdt_bcode
           AND  A.dlvyStatusCode IN ('C0281','C0121', 'C0122')
         GROUP BY A.orderNum, A.orderDtm
         ORDER BY A.orderDtm DESC
    </select>
	
	<select id="checkCancelableOrder" parameterClass="orderCriteria" resultClass="string">
		WITH v_temp AS (
			SELECT  A.order_num orderNum
				  , MAX(D.dlvy_status_code) dlvyStatusCode
			  FROM  tb_order A
				  , tb_order_destination B
				  , tb_order_delivery_request C
				  , tb_delivery D
			 WHERE  A.order_num = B.order_num
			   AND  B.order_num = C.order_num
			   AND  B.order_dest_inseq = C.order_dest_inseq
			   AND  C.order_num = D.order_num
			   AND  C.order_dest_inseq = D.order_dest_inseq
			   AND  C.dlvy_vndr_id = D.dlvy_vndr_id
			   AND  A.order_num = #orderNo#
			   AND  A.order_status_code in ('C0281','C0282')
			   AND  B.order_dest_inseq = '01'
			   AND  D.dlvy_gbn_code = 'C0131'
			 <isNotEmpty property="userNum" prepend="AND">
					A.user_num = #userNum#
			 </isNotEmpty>
			 <isEmpty property="userNum" prepend="AND">
					A.order_num = #orderNo#
			   AND  A.passwd = #password#
			 </isEmpty>
			 GROUP BY A.order_num
		)
		SELECT  A.orderNum orderNum
		  FROM  v_temp A
			  , tb_order_product B
			  , tb_sell_product C
		 WHERE  A.orderNum = B.order_num
		   AND  FC_GET_BARCODE(B.sell_prdt_bcode) = C.sell_prdt_bcode
		   AND  A.dlvyStatusCode = 'C0121'
		 GROUP BY A.orderNum
		 ORDER BY A.orderNum DESC
	</select>
	
	<select id="selectCancelableOrderListCount" parameterClass="orderCriteria" resultClass="int">
		WITH v_temp AS (
			SELECT  A.order_num orderNum
				  , A.order_dtm orderDtm
				  , MAX(D.dlvy_status_code) dlvyStatusCode
			  FROM  tb_order A
				  , tb_order_destination B
				  , tb_order_delivery_request C
				  , tb_delivery D
			 WHERE  A.order_num = B.order_num
			   AND  B.order_num = C.order_num
			   AND  B.order_dest_inseq = C.order_dest_inseq
			   AND  C.order_num = D.order_num
			   AND  C.order_dest_inseq = D.order_dest_inseq
			   AND  C.dlvy_vndr_id = D.dlvy_vndr_id
			   AND  A.order_status_code = 'C0282'
			 <isNotEmpty property="userNum" prepend="AND">
					A.user_num = #userNum#
			 </isNotEmpty>
			 <isEmpty property="userNum" prepend="AND">
					A.order_num = #orderNo#
			   AND  A.passwd = #password#
			 </isEmpty>
			 GROUP BY A.order_num, A.order_dtm
		)
		SELECT  COUNT(*)
		  FROM( SELECT  A.orderNum
				  FROM  v_temp A
					  , tb_order_product B
					  , tb_sell_product C
				 WHERE  A.orderNum = B.order_num
				   AND  FC_GET_BARCODE(B.sell_prdt_bcode) = C.sell_prdt_bcode
				   AND  A.dlvyStatusCode IN ('C0121', 'C0122')
				 GROUP BY A.orderNum, A.orderDtm
				 )
		 WHERE  ROWNUM <![CDATA[ < ]]> #topCount# + 1
	</select>
	
	<select id="selectPaymentList" parameterClass="payment" resultClass="payment">
		SELECT  order_num			   orderNum
			  , pymnt_inseq			 pymntInseq
			  , pymnt_means_code		pymntMeansCode
			  , pymnt_stat_code		 pymntStatCode
			  , pymnt_amt			   pymntAmt
			  , pymnt_dtm			   pymntDtm
			  , canc_rtn_amt			cancRtnAmt
			  , lgup_deal_num		   lgupDealNum
			  , lgup_chpr_deal_num	  lgupChprDealNum
			  , lgup_pymnt_hdphn_num	lgupPymntHdphnNum
			  , part_canc_psplt_yn	  partCancPspltYn
			  , NVL(key_yn,'N')		 keyYn
		   FROM tb_payment
		  WHERE order_num = #orderNum#
		 	and pymnt_stat_code != 'C0101'
		 <isNotEmpty property="pymntMeansCode">
		   AND  pymnt_stat_code = #pymntMeansCode#
		 </isNotEmpty>
		 <isNotEmpty property="pymntInseq">
		   AND  pymnt_inseq = #pymntInseq#
		 </isNotEmpty>
	</select>
	
	<select id="selectUsableDeliveryCpnList" parameterClass="cartCriteria" resultClass="userCouponListData">
		SELECT  B.user_cpn_seq userCouponSequence
			  , B.cpn_id couponId
			  , B.kyobo_cpn_id kyoboCouponId
			  , A.cpn_name couponName
			  , A.rate_yn rateYn
			  , A.cpn_dscnt_amt couponDiscountAmount
			  , A.cpn_dscnt_rate couponDiscountRate
			  , A.count_cpn_yn countCpnYn
			  , NVL(A.sngl_prdt_limit_price, 0) snglPrdtLimitPrice
		  FROM  tb_coupon_master A
			  , tb_user_coupon B
		 WHERE  A.cpn_id = B.cpn_id
		   AND  A.kyobo_cpn_id = B.kyobo_cpn_id
		   AND  B.user_num = #userNum#
		   AND  B.mall_id = #mallId#
		   AND  TO_CHAR(SYSDATE, 'yyyyMMdd') <![CDATA[<=]]> B.cpn_valid_dt
		   AND  B.user_cpn_stat_code = 'C0611'
		   AND  A.scope_gbn = 'D'
		   <isNotEmpty property="orderId">
		      AND A.CPN_STD_AMT <![CDATA[<=]]> (SELECT  NVL(SUM((FC_GET_DC_PRICE(A.sell_prdt_bcode, #mallId#) + FC_GET_DC_PRICE(A.cvsl_bcode, #mallId#)) * A.prdt_count),0) orderPrice
                                                  FROM  tb_cart A
                                                      , tb_cart_selt_prdt B
                                               WHERE  A.cart_seq = B.cart_seq
                                                 AND  A.user_num = #userNum#
                                                 AND  B.order_id = #orderId#)
		   </isNotEmpty>
			<isNotEmpty property="userCouponSequence" prepend="AND">
				B.user_cpn_seq = #userCouponSequence#
			</isNotEmpty>
	</select>
	
	<select id="selectUsableCpnDlvyVndrList" parameterClass="cartCriteria" resultClass="totalProductPriceByDeliveryVendor">
		WITH v_temp AS(
			SELECT  C.vndr_id dlvyVndrId
				  , C.vndr_name dlvyVndrName
				  , c.dlvy_levy_std_amt dlvyLevyStdAmt
				  , SUM((FC_GET_DC_PRICE(A.sell_prdt_bcode, #mallId#) + DECODE(A.cvsl_prdt_yn, 'Y', A.cvsl_price, 0)) * A.prdt_count) sellPriceSum
				  , C.dlvy_amt dlvyAmt
				  , sum(a.prdt_count) prdtCountSum
				  , MAX(FC_GET_FREE_DLVY_YN(A.sell_prdt_bcode, #mallId#)) freeDlvyVndr
			  FROM  tb_cart A
				  , tb_sell_product B
				  , tb_vendor C
				  , tb_cart_selt_prdt D
			WHERE  FC_GET_BARCODE(A.sell_prdt_bcode) = B.sell_prdt_bcode
			  AND  B.dlvy_vndr_id = C.vndr_id
			  AND  A.cart_seq = D.cart_seq
			  AND  D.order_id = #orderId#
			  AND  A.user_num = #userNum#
			  AND  A.mall_id = #mallId#
			GROUP BY C.vndr_id, C.vndr_name, C.dlvy_levy_std_amt, C.dlvy_amt
		)
		SELECT  A.*
			  , CASE
					WHEN A.dlvyLevyStdAmt - A.sellPriceSum > 0 THEN A.dlvyAmt 
					ELSE 0
				END AS dlvyAmtResult
		  FROM  v_temp A
		 WHERE  A.dlvyLevyStdAmt > A.sellPriceSum
		   AND  A.freeDlvyVndr = 'N'
	</select>
	
	<select id="selectOrderProductSavedListByOrderNum" parameterClass="string" resultClass="orderProductSaved">
		SELECT  order_num orderNum
			  , order_prdt_inseq orderPrdtInseq
			  , saved_inseq savedInseq
			  , sngl_prdt_save_price snglPrdtSavePrice
			  , save_gbn_code saveGbnCode
			  , regst_dtm regstDtm
			  , prdt_count prdtCount
			  , saved_yn savedYn
		  FROM  tb_order_product_saved
		 WHERE  order_num = #value#
	</select>
	
	<insert id="insertOrderProductSavedForUserGrade" parameterClass="orderCriteria">
		INSERT INTO tb_order_product_saved(order_num, order_prdt_inseq, saved_inseq, sngl_prdt_save_price, save_gbn_code, regst_dtm, prdt_count, saved_yn)
		WITH v_temp AS (
			SELECT  A.order_num orderNum
				  , A.order_prdt_inseq orderPrdtInseq
				  , (SELECT  LPAD(NVL(max(saved_inseq) + 1, 1), 2, '0')
					   FROM  tb_order_product_saved
					  WHERE  order_num = A.order_num
						AND  order_prdt_inseq = A.order_prdt_inseq) savedInseq
				  , FC_GET_DC_PRICE(A.sell_prdt_bcode, #mallId#) sellPrice
				  , A.order_count orderCount
				  , FC_GET_USER_ADD_SAVED_RATE(#userNum#, #mallId#) addSavedRate
			  FROM  tb_order_product A
			 WHERE  A.order_num = #orderNo#
		)
		SELECT  A.orderNum
			  , A.orderPrdtInseq
			  , A.savedInseq
			  , FC_GET_CAL_CHGE_PRICE(A.sellPrice, A.addSavedRate) snglPrdtSavePrice
			  , 'C0682'
			  , SYSDATE
			  , orderCount
			  , 'N'
		  FROM  v_temp A
		 WHERE  A.addSavedRate > 0
	</insert>
	
	<insert id="insertOrderCancelHistory" parameterClass="orderCancelHistory">
		<selectKey keyProperty="orderCancInseq" resultClass="string" type="pre">
			SELECT lpad(nvl(max(A.order_canc_inseq) + 1, 1), 2, '0') FROM tb_order_cancel_history A WHERE A.order_num = #orderNum#
		</selectKey>
		INSERT INTO tb_order_cancel_history
		(
			order_num
		  , order_canc_inseq
		  , regst_dtm
		  , dlvy_chng_amt
		  , order_canc_gbn
		  , rtn_seq
		)
		VALUES
		(
			#orderNum#
		  , #orderCancInseq#
		  , SYSDATE
		  , #dlvyChngAmt#
		  , #orderCancGbn#
		  , #rtnSeq#
		)
	</insert>
	
	<insert id="insertOrderCancelProduct" parameterClass="orderCancelProduct">
		INSERT INTO tb_order_cancel_product
		(
			order_num
		  , order_canc_inseq
		  , order_prdt_inseq
		  , canc_count
		  , sngl_prdt_sell_price
		  , cpn_dscnt_amt
		  , optn_amt
		)
		VALUES
		(
			#orderNum#
		  , #orderCancInseq#
		  , #orderPrdtInseq#
		  , #cancCount#
		  , #snglPrdtSellPrice#
		  , #cpnDscntAmt#
		  , #optnAmt#
		)
	</insert>
	
	<select id="selectKyoboSelectOptionPriceSumByOrderProduct" parameterClass="orderProduct" resultClass="int">
		SELECT  NVL(SUM(A.optn_price),0) optionPriceSum
		  FROM  tb_kyobo_select_option A
		 WHERE  A.order_num = #orderNum#
		   AND  A.order_prdt_inseq = #productInnerSequence#
	</select>
	
	<insert id="insertOrderProductSavedCancelForPart" parameterClass="orderProductSavedCriteria">
		INSERT INTO tb_order_product_saved(order_num, order_prdt_inseq, saved_inseq, sngl_prdt_save_price, save_gbn_code, regst_dtm, prdt_count, saved_yn)
		SELECT  A.order_num
			  , A.order_prdt_inseq orderPrdtInseq
			  , (SELECT  LPAD(NVL(max(saved_inseq) + 1, 1), 2, '0')
				   FROM  tb_order_product_saved
				  WHERE  order_num = A.order_num
					AND  order_prdt_inseq = A.order_prdt_inseq) savedInseq
			  , ((-1)*A.sngl_prdt_save_price) snglPrdtSavePrice
			  , #saveGbnCodeForRefund#
			  , SYSDATE
			  , C.canc_count cancelCount
			  , 'N'
		  FROM  tb_order_product_saved A
			  , tb_order_product B
			  , tb_order_cancel_product C
		 WHERE  A.order_num = C.order_num
		   AND  A.order_prdt_inseq = C.order_prdt_inseq
		   AND  B.order_num = C.order_num
		   AND  B.order_prdt_inseq = C.order_prdt_inseq
		   AND  A.order_num = #orderNum#
		   AND  C.order_canc_inseq = #orderCancInseq#
		   AND  A.save_gbn_code = #saveGbnCode#
	</insert>
	
	<insert id="partCancelOrderProductSavedForUserGrade"  parameterClass="orderProductSavedCriteria">
		INSERT INTO tb_order_product_saved(order_num, order_prdt_inseq, saved_inseq, sngl_prdt_save_price, save_gbn_code, regst_dtm, prdt_count, saved_yn)
		WITH v_temp AS (
			SELECT  A.order_num orderNum
				  , A.order_prdt_inseq orderPrdtInseq
				  , SUM(DECODE(A.save_gbn_code, 'C0682', A.prdt_count, 0)) prdtCountC0682
				  , SUM(DECODE(A.save_gbn_code, 'C0685', A.prdt_count, 0)) prdtCountC0685
				  , SUM(DECODE(A.save_gbn_code, 'C0686', A.prdt_count, 0)) prdtCountC0686
				  , MAX(A.sngl_prdt_save_price) snglPrdtSavePrice
			  FROM  tb_order_product_saved A
			 WHERE  A.order_num = #orderNum#
			   AND  A.save_gbn_code IN ('C0682', 'C0685', 'C0686')
			 GROUP BY A.order_num, A.order_prdt_inseq
			 ORDER BY A.order_num, A.order_prdt_inseq
		)
		SELECT  A.orderNum
			  , A.orderPrdtInseq
			  , (SELECT  LPAD(NVL(max(saved_inseq) + 1, 1), 2, '0')
				   FROM  tb_order_product_saved
				  WHERE  order_num = A.orderNum
					AND  order_prdt_inseq = A.orderPrdtInseq) savedInseq
			  , ((-1) * A.snglPrdtSavePrice) snglPrdtSavePrice
			  , #saveGbnCodeForRefund#
			  , SYSDATE
			  , C.canc_count cancelCount
			  , 'N'
		  FROM  v_temp A
			  , tb_order_product B
			  , tb_order_cancel_product C
		 WHERE  A.orderNum = C.order_num
		   AND  A.orderPrdtInseq = C.order_prdt_inseq
		   AND  B.order_num = C.order_num
		   AND  B.order_prdt_inseq = C.order_prdt_inseq
		   AND  (A.prdtCountC0682 - A.prdtCountC0685 - A.prdtCountC0686) > 0
		   AND  C.order_canc_inseq = #orderCancInseq#
	</insert>
	
	<select id="selectOrderDeliveryRequestForOrderDlvyChngAmt" parameterClass="string" resultClass="orderDeliveryRequest">
		WITH v_temp AS (
			SELECT  A.order_num orderNum
				  , B.order_dest_inseq orderDestInseq
				  , A.dlvy_vndr_id dlvyVndrId
				  , SUM(A.sngl_prdt_sell_price * (A.order_count-A.canc_count)) sumSellPrice
				  , SUM(DECODE(A.count_cpn_yn,'Y',(A.order_count-A.canc_count),1) * A.cpn_dscnt_amt) cpnDscntAmt
				  , FC_IS_FREE_DLVY_ORDER_PRODUCT(A.order_num, A.dlvy_vndr_id) freeDlvyPrdtYn
			  FROM  tb_order_product A
				  , tb_order_destination B
			 WHERE  A.order_num = B.order_num
			   AND  A.order_dest_inseq = B.order_dest_inseq
			   AND  A.order_num = #value#
			   AND  (A.order_count - A.canc_count)  > 0
			 GROUP BY A.order_num, B.order_dest_inseq, A.dlvy_vndr_id
		)
		SELECT  A.orderNum orderNum
			  , B.order_dest_inseq destinationSequence
			  , B.dlvy_vndr_id deliveryVendorId
			  , B.at_dlvy_amt deliveryChangeAmount
		  FROM  v_temp A
			  , tb_order_delivery_request B
		 WHERE  A.orderNum = B.order_num
		   AND  A.orderDestInseq = B.order_dest_inseq
		   AND  A.dlvyVndrId = B.dlvy_vndr_id
		   AND  B.order_dlvy_amt + B.order_dlvy_chng_amt = 0
		   AND  A.freeDlvyPrdtYn = 'N'
		   AND  B.at_dlvy_std_amt > A.sumSellPrice
	</select>
	
	<select id="selectOrderDeliveryRequestForCancelDiveryOrderDlvyChngAmt" parameterClass="string" resultClass="orderDeliveryRequest">
		WITH v_temp AS (
			SELECT  A.order_num orderNum
				  , B.order_dest_inseq orderDestInseq
				  , A.dlvy_vndr_id dlvyVndrId
				  , SUM(A.sngl_prdt_sell_price * (A.order_count-A.canc_count)) sumSellPrice
				  , SUM(DECODE(A.count_cpn_yn,'Y',(A.order_count-A.canc_count),1) * A.cpn_dscnt_amt) cpnDscntAmt
				  , FC_IS_FREE_DLVY_ORDER_PRODUCT(A.order_num, A.dlvy_vndr_id) freeDlvyPrdtYn
			  FROM  tb_order_product A
				  , tb_order_destination B
			 WHERE  A.order_num = B.order_num
			   AND  A.order_dest_inseq = B.order_dest_inseq
			   AND  A.order_num = #value#
			   AND  (A.order_count - A.canc_count)  = 0
			 GROUP BY A.order_num, B.order_dest_inseq, A.dlvy_vndr_id
		)
		SELECT  A.orderNum orderNum
			  , B.order_dest_inseq destinationSequence
			  , B.dlvy_vndr_id deliveryVendorId
			  , (-1) * (B.order_dlvy_amt + B.order_dlvy_chng_amt) deliveryChangeAmount
		  FROM  v_temp A
			  , tb_order_delivery_request B
		 WHERE  A.orderNum = B.order_num
		   AND  A.orderDestInseq = B.order_dest_inseq
		   AND  A.dlvyVndrId = B.dlvy_vndr_id
		   AND  B.order_dlvy_amt + B.order_dlvy_chng_amt > 0
		   AND  A.freeDlvyPrdtYn = 'N'
	</select>
	
	<update id="updateOrderDeliveryRequestForOrderDlvyChngAmt" parameterClass="orderDeliveryRequest">
		UPDATE  tb_order_delivery_request
		   SET  order_dlvy_chng_amt = #deliveryChangeAmount#
			  , order_dlvy_amt_chng_rsn_code = #deliveryAmountChangeReasonCode#
		 WHERE  order_num = #orderNum#
		   AND  order_dest_inseq = #destinationSequence#
		   AND  dlvy_vndr_id = #deliveryVendorId#
	</update>
	
	<update id="updateOrderCancelHistoryForDlvyChngAmt" parameterClass="orderCancelHistory">
		UPDATE  tb_order_cancel_history
		   SET  dlvy_chng_amt = #dlvyChngAmt#
		WHERE  order_num = #orderNum#
		  AND  order_canc_inseq = #orderCancInseq#
	</update>
	
	<select id="selectPartCancelOrderDeliveryProductDlvyId" parameterClass="string" resultClass="string">
		SELECT  A.dlvy_id dlvyId
		  FROM  tb_delivery A
		 WHERE  A.dlvy_id = #value#
		   AND  NOT EXISTS (SELECT 1 
							  FROM tb_order_delivery_product 
							 WHERE dlvy_id = A.dlvy_id
							   and order_dlvy_prdt_stat_code != 'C0235')
	</select>
	
	<update id="updatePartCancelOrderProductDeliveryCancel" parameterClass="string">
		UPDATE tb_delivery 
		   SET dlvy_status_code = 'C0125'
		 WHERE dlvy_id = #value#
	</update>
	
	<select id="selectSumRefundDeliveryAmtPartCancelOrder" parameterClass="delivery" resultClass="int">
		WITH v_temp AS (
			SELECT  B.order_dlvy_amt + B.order_dlvy_chng_amt - B.cpn_dscnt_amt dlvyAmt
			  FROM  tb_delivery A
				  , tb_order_delivery_request B
			 WHERE  A.order_num = B.order_num
			   AND  A.order_dest_inseq = B.order_dest_inseq
			   AND  A.dlvy_vndr_id = B.dlvy_vndr_id
			   AND  B.order_dest_inseq = '01'
			<isNotEmpty property="deliveryId">
			   AND  A.dlvy_id IN ($deliveryId$)
			</isNotEmpty>
			<isNotEmpty property="orderNum">
			   AND  A.order_num = #orderNum#
			</isNotEmpty>
			 ORDER BY B.order_num, B.order_dest_inseq, B.dlvy_vndr_id
		)
		SELECT  NVL(SUM(A.dlvyAmt),0) sumDlvyAmt
		  FROM  v_temp A
	</select>
	
	<select id="selectPaymentListForCancelOrder" parameterClass="string" resultClass="payment">
		WITH v_temp AS (
			SELECT  A.order_num orderNum
				  , A.pymnt_inseq pymntInseq
				  , A.pymnt_means_code pymntMeansCode
				  , SUM(A.pymnt_amt) pymntAmt
				  , SUM(A.canc_rtn_amt) cancRtnAmt
			  FROM  tb_payment A
			 WHERE  A.order_num = #value#
			   AND  A.pymnt_stat_code = 'C0102'
			 GROUP BY A.order_num, A.pymnt_inseq, A.pymnt_means_code
			
			UNION
			
			SELECT  B.order_num orderNum
				  , B.pymnt_inseq pymntInseq
				  , B.pymnt_means_code pymntMeansCode
				  , NVL(SUM(A.pymnt_amt),0) pymntAmt
				  , NVL(SUM(A.canc_rtn_amt), 0) cancRtnAmt
			  FROM  tb_payment A
				  , tb_payment B
			 WHERE  A.order_num = B.order_num
			   AND  A.org_pymnt_inseq = B.pymnt_inseq
			   AND  A.order_num = #value#
			   AND  A.org_pymnt_inseq IS NOT NULL
			   AND  A.pymnt_stat_code IN ('C0103','C0104')
			 GROUP BY B.order_num, B.pymnt_inseq, B.pymnt_means_code
		)
		SELECT  X.*
			  , Z.lgup_deal_num lgupDealNum
			  , NVL(Z.key_yn,'N') keyYn
			  , Z.part_canc_psplt_yn partCancPspltYn
			  , Y.code_id paymentCodeId
		  FROM (SELECT  A.orderNum orderNum
					  , MAX(A.pymntInseq) pymntInseq
					  , A.pymntMeansCode pymntMeansCode
					  , SUM(A.pymntAmt + A.cancRtnAmt) pymntAmt
				  FROM  v_temp A
				 GROUP BY A.orderNum, A.pymntMeansCode) X
			   , tb_credit_payment Y
			   , tb_payment Z
		 WHERE  X.orderNum = Y.order_num (+)
		   AND  X.pymntInseq = Y.pymnt_inseq (+)
		   AND  Z.order_num = X.orderNum
		   AND  Z.pymnt_inseq = X.pymntInseq
		   AND  X.pymntAmt > 0
	</select>
	
	<insert id="insertPaymentForPartCancel" parameterClass="paymentInfo">
		<selectKey keyProperty="pymntInseq" resultClass="string" type="pre">SELECT LPAD(NVL(MAX(X.pymnt_inseq) + 1, 1), 2, '0') FROM tb_payment X WHERE X.order_num = #orderNum#</selectKey>
		INSERT INTO tb_payment (order_num, pymnt_inseq, pymnt_means_code, pymnt_stat_code, pymnt_amt, pymnt_dtm, canc_rtn_amt, org_pymnt_inseq, part_canc_psplt_yn, order_canc_inseq, key_yn)
		SELECT  A.order_num orderNum
			  , #pymntInseq# pymntInseqForCancel
			  , A.pymnt_means_code pymntMeansCode
			  , #pymntStatCode# pymntStatCode
			  , 0 pymntAmt
			  , SYSDATE
			  , #cancRtnAmt# cancRtnAmt
			  , A.pymnt_inseq orgPymntInseq
			  , 'N' partCancPspltYn
			  , #orderCancInseq# orderCancInseq
			  , A.key_yn keyYn
		  FROM  tb_payment A
		 WHERE  A.order_num = #orderNum#
		   AND  A.pymnt_inseq = #pymntInseqForCancel#
		   AND  A.pymnt_stat_code = 'C0102'
	</insert>
	
	<insert id="insertOrderCancelProductForAllCancel" parameterClass="orderCancelProduct">
		INSERT INTO tb_order_cancel_product(order_num, order_canc_inseq, order_prdt_inseq, canc_count, sngl_prdt_sell_price, cpn_dscnt_amt, optn_amt)
		SELECT  A.order_num orderNum
			  , #orderCancInseq# orderCancInseq
			  , A.order_prdt_inseq orderPrdtInseq
			  , A.order_count cancCount
			  , (-1) * A.sngl_prdt_sell_price snglPrdtSellPrice
			  , NVL(DECODE(A.count_cpn_yn, 'Y', A.order_count, 1) * A.cpn_dscnt_amt, 0) cpnDscntAmt
			  , (SELECT  NVL((-1)*SUM(X.optn_price),0) optionPriceSum
				   FROM  tb_kyobo_select_option X
				  WHERE  X.order_num = A.order_num
					AND  X.order_prdt_inseq = A.order_prdt_inseq) optnAmt
		  FROM  tb_order_product A
		 WHERE  A.order_num = #orderNum#
	</insert>
	
	<select id="getCartProductListForNoUser" parameterClass="frontCart" resultClass="cartParam">
		SELECT 
				cart_seq cartSeq
			  , prdt_count prdtCount
			  , user_num userNum
			  , mall_id mallId
			  , user_yn userYn
			  , sesn_hash_key sesnHashKey
			  , sell_prdt_bcode sellPrdtBcode
			  , cvsl_cont cvslCont
			  , cvsl_price cvslPrice
			  , cvsl_bcode cvslBcode
			  , cvsl_font cvslFont 
			  , cvsl_prdt_yn cvslPrdtYn
			  , optn_prdt_yn optnPrdtYn
			  , order_make_yn orderMakeYn
			  , order_make_cont orderMakeCont
			  , note note
			  , regst_dtm regstDtm
			  , optn_name_list optnNameList
			  , optn_value_list optnValueList
		  FROM tb_cart
		 WHERE user_yn = 'N' 
		   AND mall_id = #mallId#
		   AND sesn_hash_key = #sesnHashKey# 
	</select>
	
	<select id="getCartProductListForUser" parameterClass="frontCart" resultClass="cartParam">
		SELECT 
				cart_seq cartSeq
			  , prdt_count prdtCount
			  , user_num userNum
			  , mall_id mallId
			  , user_yn userYn
			  , sesn_hash_key sesnHashKey
			  , sell_prdt_bcode sellPrdtBcode
			  , cvsl_cont cvslCont
			  , cvsl_price cvslPrice
			  , cvsl_bcode cvslBcode
			  , cvsl_font cvslFont 
			  , cvsl_prdt_yn cvslPrdtYn
			  , optn_prdt_yn optnPrdtYn
			  , order_make_yn orderMakeYn
			  , order_make_cont orderMakeCont
			  , note note
			  , regst_dtm regstDtm
			  , optn_name_list optnNameList
			  , optn_value_list optnValueList
		  FROM tb_cart
		 WHERE user_yn = 'Y' 
		   AND mall_id = #mallId#
		   AND user_num = #userNum# 
	</select>
	
	<delete id="deleteSelectdCart" parameterClass="int">
		DELETE FROM TB_CART_SELT_PRDT
		 WHERE cart_seq = #value#
	</delete>
	
	<delete id="deleteCartProductForKey" parameterClass="int">
		DELETE FROM TB_CART
		 WHERE cart_seq = #value#
	</delete>
	
	<select id="getCartProductForIndex" parameterClass="frontCart" resultClass="int">
		SELECT 
				cart_seq cartSeq
		  FROM tb_cart
		 WHERE 1 = 1
			<isEmpty property="userNum" prepend="AND">
				user_num is null
			</isEmpty> 
			<isNotEmpty property="userNum" prepend="AND">
				user_num = #userNum#
			</isNotEmpty>
		   AND mall_id = #mallId#
		   AND user_yn = #userYn# 
			<isEmpty property="sesnHashKey" prepend="AND">
				sesn_hash_key is null
			</isEmpty> 
			<isNotEmpty property="sesnHashKey" prepend="AND">
				sesn_hash_key = #sesnHashKey#
			</isNotEmpty>
		   and sell_prdt_bcode = #sellPrdtBcode#
		   and optn_prdt_yn = #optnPrdtYn#
		   <isEmpty property="optnValueList" prepend="AND">
				optn_value_list is null
		   </isEmpty>
		   <isNotEmpty property="optnValueList" prepend="AND">
				optn_value_list = #optnValueList#
		   </isNotEmpty>
	</select>
	
	<select id="getOldSelectedsSequences" parameterClass="cartParam" resultClass="int">
		SELECT B.cart_seq 
		  FROM tb_cart A, tb_cart_selt_prdt B
		 WHERE A.cart_seq = B.cart_seq
		   AND A.user_yn = 'N' 
		   AND mall_id = #mallId#
		   AND sesn_hash_key = #sesnHashKey#
		   and B.order_id = #orderId#
	</select>
	
	<delete id="deleteCartSelectProductBy3DayLater">
		DELETE FROM tb_cart_selt_prdt 
		 WHERE cart_seq in (SELECT cart_seq FROM tb_cart WHERE to_char(regst_dtm + 3, 'yyyyMMdd') <![CDATA[ <= ]]> to_char(sysdate, 'yyyyMMdd'))
	</delete>
	 
	<delete id="deleteCart3DayLater">
		DELETE FROM tb_cart 
		 WHERE cart_seq in (SELECT cart_seq FROM tb_cart WHERE to_char(regst_dtm + 3, 'yyyyMMdd') <![CDATA[ <= ]]> to_char(sysdate, 'yyyyMMdd'))
	</delete>
	
	<select id="getSavedAmount" parameterClass="orderProductKey" resultClass="productSaved">
		SELECT nvl(sum(decode(A.save_gbn_code, 'C0681', (A.sngl_prdt_save_price * A.prdt_count), 'C0683', (A.sngl_prdt_save_price * A.prdt_count), 'C0687', (A.sngl_prdt_save_price * A.prdt_count), 'C0689', (A.sngl_prdt_save_price * A.prdt_count), 0)),0) productSaved,
			   nvl(sum(decode(A.save_gbn_code, 'C0682', (A.sngl_prdt_save_price * A.prdt_count), 'C0686', (A.sngl_prdt_save_price * A.prdt_count), 'C0688', (A.sngl_prdt_save_price * A.prdt_count), 'C068A', (A.sngl_prdt_save_price * A.prdt_count), 0)),0) gradeSaved,
			   nvl(sum(decode(A.save_gbn_code, 'C0681', (B.sngl_prdt_sell_price * A.prdt_count), 'C0683', (B.sngl_prdt_sell_price * A.prdt_count), 'C0687', (B.sngl_prdt_sell_price * A.prdt_count), 'C0689', (B.sngl_prdt_sell_price * A.prdt_count), 0)),0) productPrice
		  FROM tb_order_product_saved A,
			   tb_order_product B
		 WHERE A.save_gbn_code in ('C0681', 'C0682', 'C0683', 'C0686' ,'C0687' ,'C0688' ,'C0689' ,'C068A')
		   AND A.order_num = #orderNum# 
		   AND A.order_prdt_inseq = #productInnerSequence#
		   AND A.order_num = B.order_num
		   AND A.order_prdt_inseq = B.order_prdt_inseq
		   AND A.saved_yn = 'N'
	</select>
	
    <select id="getAmtAmount" parameterClass="userOrder" resultClass="productSaved">
		select 0 productSaved
		     , 0 gradeSaved
		     , B.sngl_prdt_sell_price * A.DLVY_COUNT productPrice
		  from TB_ORDER_DELIVERY_PRODUCT A
		     , TB_ORDER_PRODUCT B   
		 where A.SAVED_YN is null
		   and A.ORDER_NUM = B.ORDER_NUM
		   and A.ORDER_PRDT_INSEQ = B.ORDER_PRDT_INSEQ
		   and A.ORDER_DLVY_PRDT_SEQ = #orderDlvyPrdtSeq#
		   and A.SAVED_YN is null
    </select>
	
	<update id="savedOrderProductSaved" parameterClass="orderProductKey">
		UPDATE tb_order_product_saved
		   SET saved_yn = 'Y'
		 WHERE save_gbn_code in ('C0681', 'C0682', 'C0683', 'C0686' ,'C0687' ,'C0688' ,'C0689' ,'C068A')
		   AND order_num = #orderNum# 
		   AND order_prdt_inseq = #productInnerSequence#
	</update>
	
    <update id="amtOrderProductSaved" parameterClass="userOrder">
        UPDATE tb_order_delivery_product
           SET SAVED_YN = 'Y'
         WHERE ORDER_DLVY_PRDT_SEQ = #orderDlvyPrdtSeq#
    </update>
	
	<select id="getSavedAmountForReturn" parameterClass="orderProductKey" resultClass="productSaved">
		SELECT nvl(sum(A.sngl_prdt_save_price * A.prdt_count), 0) productSaved,
			   nvl(sum(b.sngl_prdt_sell_price * A.prdt_count), 0) productPrice
		  FROM tb_order_product_saved A, 
			   tb_order_product B
		 WHERE A.save_gbn_code = 'C0684'
		   AND A.order_num = #orderNum# 
		   AND A.order_prdt_inseq = #productInnerSequence#
		   AND A.order_num = B.order_num
		   AND A.order_prdt_inseq = B.order_prdt_inseq
		   AND A.saved_yn = 'N'
	</select>
	
	<update id="savedOrderProductReturnSaved" parameterClass="orderProductKey">
		UPDATE tb_order_product_saved
		   SET saved_yn = 'Y'
		 WHERE save_gbn_code in ('C0684', 'C0685')
		   AND order_num = #orderNum# 
		   AND order_prdt_inseq = #productInnerSequence#
	</update>
	
	<select id="getUserGradeMaxReturnSaved" parameterClass="orderProductKey" resultClass="int">
		WITH v_temp AS (
		SELECT nvl(sum(sngl_prdt_save_price * prdt_count), 0) ss1
		  FROM tb_order_product_saved 
		 WHERE order_num = #orderNum# 
		   and order_prdt_inseq = #productInnerSequence#
		   AND save_gbn_code in ('C0682', 'C0686')
		UNION ALL   
		SELECT nvl(sum(sngl_prdt_save_price * prdt_count), 0) ss1
		  FROM tb_order_product_saved 
		 WHERE order_num = #orderNum# 
		   and order_prdt_inseq = #productInnerSequence#  
		   AND save_gbn_code = 'C0685'
		   AND saved_yn = 'Y'
		) SELECT sum(ss1) FROM v_temp	
	</select>
	
	<select id="getUserGradeReturnSaved" parameterClass="orderProductKey" resultClass="int">
		SELECT nvl(sum(sngl_prdt_save_price * prdt_count), 0) 
		  FROM tb_order_product_saved 
		 WHERE save_gbn_code = 'C0685'
		   AND order_num = #orderNum# 
		   AND order_prdt_inseq = #productInnerSequence#
		   AND saved_yn = 'N'
	</select>
	
	<select id="selectDepositList" parameterClass="depositCriteria" resultClass="deposit">
		SELECT
		  A.MOD_DTM modifyDatetime
		, A.DPST_CHNG_RSN_CODE changeReasonCode
		, (SELECT CODE_NAME FROM TB_CODE WHERE CODE = A.DPST_CHNG_RSN_CODE) || A.CHNG_RSN_CONT changeReasonContent
		, A.CHNG_AMT changeAmount
		, A.PYMNT_ORDER_NUM paymentOrderNum
		, A.RPMNT_REQ_DTM repaymentRequestDatetime
		, A.RPMNT_CMPLT_DTM repaymentCompleteDatetime
		FROM
		  TB_DEPOSIT A
		<isEqual property="userYn" compareValue="N">
		, TB_ORDER B
		</isEqual>
		WHERE
			A.USER_YN = #userYn#
		<isEqual property="userYn" compareValue="Y" prepend="AND">
			A.USER_NUM = #num#
		</isEqual>
		<isEqual property="userYn" compareValue="N" prepend="AND">
			B.ORDER_NUM = #orderNum#
		AND A.NON_USER_ORDER_NUM = B.ORDER_NUM
		</isEqual>
		<isEqual property="viewType" compareValue="1" prepend="AND">
			A.DPST_CHNG_RSN_CODE IN ('C0642', 'C0647')
		</isEqual>
		ORDER BY A.dpst_seq DESC
	</select>
	
	<select id="selectDepositListCount" parameterClass="depositCriteria" resultClass="int">
		SELECT
			COUNT(*)
		FROM
			(SELECT
			  A.MOD_DTM
			FROM
			  TB_DEPOSIT A
			<isEqual property="userYn" compareValue="N">
			, TB_ORDER B
			</isEqual>
			WHERE
				A.USER_YN = #userYn#
			<isEqual property="userYn" compareValue="Y" prepend="AND">
				A.USER_NUM = #num#
			</isEqual>
			<isEqual property="userYn" compareValue="N" prepend="AND">
				B.ORDER_NUM = #orderNum#
			AND A.NON_USER_ORDER_NUM = B.ORDER_NUM
			</isEqual>
			<isEqual property="viewType" compareValue="1" prepend="AND">
				A.DPST_CHNG_RSN_CODE IN ('C0642', 'C0647')
			</isEqual>)
		WHERE  ROWNUM <![CDATA[ < ]]> #topCount# + 1
	</select>
	
	<select id="selectDepositRefundList" parameterClass="depositCriteria" resultClass="deposit">
		SELECT
		  A.REGST_DTM modifyDatetime
		, A.REQ_AMT changeAmount
		, (SELECT CODE_NAME FROM TB_CODE WHERE CODE = A.DPST_RPMNT_REQ_STAT_CODE) changeReasonContent
		, A.LAST_MOD_DTM lastModDatetime
		FROM
		  TB_DEPOSIT_REPAYMENT_REQUEST A
		<isEqual property="userYn" compareValue="N">
		, TB_ORDER B
		</isEqual>
		WHERE
			A.USER_YN = #userYn#
		<isEqual property="userYn" compareValue="Y" prepend="AND">
			A.USER_NUM = #num#
		</isEqual>
		<isEqual property="userYn" compareValue="N" prepend="AND">
			A.NON_USER_ORDER_NUM = #orderNum#
		AND A.NON_USER_ORDER_NUM = B.ORDER_NUM
		</isEqual>
		ORDER BY A.REGST_DTM DESC
	</select>
	
	<select id="selectDepositRefundListCount" parameterClass="depositCriteria" resultClass="int">
		SELECT
			COUNT(*)
		FROM
			(SELECT
				  A.REGST_DTM modifyDatetime
				, A.REQ_AMT changeAmount
				, (SELECT CODE_NAME FROM TB_CODE WHERE CODE = A.DPST_RPMNT_REQ_STAT_CODE) changeReasonContent
				, A.LAST_MOD_DTM lastModDatetime
				FROM
				  TB_DEPOSIT_REPAYMENT_REQUEST A
				<isEqual property="userYn" compareValue="N">
				, TB_ORDER B
				</isEqual>
				WHERE
					A.USER_YN = #userYn#
				<isEqual property="userYn" compareValue="Y" prepend="AND">
					A.USER_NUM = #num#
				</isEqual>
				<isEqual property="userYn" compareValue="N" prepend="AND">
					A.NON_USER_ORDER_NUM = #orderNum#
				AND A.NON_USER_ORDER_NUM = B.ORDER_NUM
				AND B.PASSWD = #password#
				</isEqual>)
		WHERE  ROWNUM <![CDATA[ < ]]> #topCount# + 1
	</select>
	
	<select id="selectTotalDepositAmount" parameterClass="depositCriteria" resultClass="depositParam">
		SELECT
			NVL(SUM(A.CHNG_AMT),0) totalDepositAmount
			,NVL(SUM(A.CHNG_AMT),0) availableRefundAmount
			,NVL(SUM(CASE A.DPST_CHNG_RSN_CODE
				WHEN 'C0642' THEN A.CHNG_AMT
				END),0) reqRefundAmount
		FROM
		  TB_DEPOSIT A
		WHERE
			A.USER_YN = #userYn#
		<isEqual property="userYn" compareValue="Y" prepend="AND">
			A.USER_NUM = #num#
		</isEqual>
		<isEqual property="userYn" compareValue="N" prepend="AND">
			A.non_user_order_num = #orderNum#
		</isEqual>
	</select>

	<insert id="savedDepositRefund" parameterClass="depositParam">
		<selectKey keyProperty="reqSequence" resultClass="int" type="pre">
			SELECT DEPOSIT_REQUEST_SEQ.NEXTVAL FROM DUAL
		</selectKey>
		/*OrderSQL.savedDepositRefund*/
		
		INSERT INTO
		TB_DEPOSIT_REPAYMENT_REQUEST(
		REQ_SEQ, REQ_AMT, REGST_DTM, RPMNT_ACNT_NUM, LAST_MOD_DTM, USER_NUM, MALL_ID, USER_YN, NON_USER_ORDER_NUM, DPST_RPMNT_REQ_STAT_CODE, BANK_CODE, ACNT_HLDR_NAME)
		VALUES(#reqSequence#, #changeAmount#*(-1), SYSDATE, #rpmntAcntNum#, SYSDATE, #userNum#, #mallId#, #userYN#, #nonUserOrderNum#, #dpstRpmntReqStatCode#, #bankCode#, #accountHolderName#)
	</insert>

	<insert id="savedDepositRefundBank" parameterClass="depositParam">
		INSERT INTO TB_DEPOSIT(
		DPST_SEQ, CHNG_AMT, MOD_DTM, DPST_CHNG_RSN_CODE, NON_USER_ORDER_NUM, PYMNT_ORDER_NUM,
		REQ_SEQ, RPMNT_ACNT_NUM, 
		USER_NUM, MALL_ID, USER_YN, BANK_CODE, ANCT_HLDR_NAME
		)
		VALUES(DPST_SEQ.NEXTVAL, #changeAmount#*(-1), SYSDATE, 'C0642', #nonUserOrderNum#, #paymentOrderNum#,
		#reqSequence#, #rpmntAcntNum#, 
		#userNum#, #mallId#, #userYN#, #bankCode#, #accountHolderName#)
	</insert>
	
	<select id="selectReturnExchangeProductList" parameterClass="int" resultClass="orderProduct">
		SELECT  E.order_num					 orderNum
			  , E.order_prdt_inseq			  productInnerSequence
			  , E.sell_prdt_bcode			   barcode
			  , E.vndr_cntrt_id				 vendorCntractId
			  , (E.order_count - FC_GET_ORDER_PRDT_CANC_COUNT(E.order_num, E.order_prdt_inseq))  orderCount
			  , E.order_prdt_amt				sellProductPriceSum
			  , C.dlvy_count					cancelCount
			  , E.cpn_dscnt_amt				 couponPrice
			  , E.order_prdt_stat_code		  statusCode
			  , E.optn_price_sum				optionPrice
			  , E.sngl_prdt_buy_price		   buyPrice
			  , E.sngl_prdt_sell_price		  sellProductPrice
			  , E.sngl_prdt_chge_price		  chargePrice
			  , E.sngl_prdt_kyobo_chge_price	kyoboChargePrice
			  , E.kyobo_ccl_yn				  kyoboCalculateYn
			  , E.order_dest_inseq			  destinationInnerSequence
			  , E.dlvy_vndr_id				  deliveryVendorId
			  , E.optn_name					 optionName
			  , E.ctgr_id					   categoryId
			  , E.sngl_prdt_dscnt_rate		  discountRate
			  , E.sngl_prdt_org_sell_price	  orgSellPrice
			  , E.last_mod_dtm				  lastModifyDatetime
			  , E.free_dlvy_yn				  freeDeliveryYn
			  , E.count_cpn_yn				  countCouponYn
		  FROM  tb_return_exchange_master A
			  , tb_delivery B
			  , tb_order_delivery_product C
			  , tb_order_product E
		 WHERE  A.rtn_seq = B.rtn_seq
		   AND  A.order_num = B.order_num
		   AND  B.dlvy_id = C.dlvy_id
		   AND  C.order_num = E.order_num
		   AND  C.order_prdt_inseq = E.order_prdt_inseq
		   AND  A.rtn_seq = #value#
		   AND  B.dlvy_gbn_code != 'C0131'
		   AND  C.order_dlvy_prdt_stat_code='C0234'
	</select>
	
	<select id="selectReturnExchangeDeliveryAmt" parameterClass="int" resultClass="int">
		SELECT  NVL(SUM(DECODE(A.rtn_exchg_rns_code, 'C0521', DECODE(C.dlvy_vndr_id, '0625', (CASE
																							  WHEN (C.order_dlvy_amt + C.order_dlvy_chng_amt) > 0 THEN C.at_dlvy_amt
																							  ELSE (C.at_dlvy_amt * 2)
																						  END) * (-1)
														  , 0)
					, 0)),0) orderDlvyAmt
		  FROM  tb_return_exchange_master A
			  , tb_delivery B
			  , tb_order_delivery_request C
		 WHERE  A.rtn_seq = B.rtn_seq
		   AND  A.order_num = B.order_num
		   AND  B.order_num = C.order_num
		   AND  B.order_dest_inseq = C.order_dest_inseq
		   AND  B.dlvy_vndr_id = C.dlvy_vndr_id
		   AND  A.rtn_seq = #value#
	</select>
	
	<select id="selectOrderDeliveryRequestForHottracksDelivery" parameterClass="int" resultClass="orderDeliveryRequest">
		SELECT  C.order_num orderNum
			  , C.order_dest_inseq destinationSequence
			  , C.dlvy_vndr_id deliveryVendorId
			  , C.at_dlvy_amt deliveryChangeAmount
		  FROM  tb_return_exchange_master A
			  , tb_delivery B
			  , tb_order_delivery_request C
		 WHERE  A.rtn_seq = B.rtn_seq
		   AND  A.order_num = B.order_num
		   AND  B.order_num = C.order_num
		   AND  B.order_dest_inseq = C.order_dest_inseq
		   AND  B.dlvy_vndr_id = C.dlvy_vndr_id
		   AND  (C.order_dlvy_amt + C.order_dlvy_chng_amt) = 0
		   AND  C.dlvy_vndr_id = '0625'
		   AND  A.rtn_seq = #value#
	</select>
	
	<select id="selectSumUserGradeOrderProductSaved" parameterClass="string" resultClass="int">
		SELECT  NVL(SUM(A.sngl_prdt_save_price * A.prdt_count),0) amt
		  FROM  tb_order_product_saved A
		 WHERE  A.order_num = #value#
		   AND  A.save_gbn_code IN ('C0682', 'C0685')
	</select>
	
	<insert id="cancelOrderProductSavedForUserGrade" parameterClass="orderProductSavedCriteria">
		INSERT INTO tb_order_product_saved(order_num, order_prdt_inseq, saved_inseq, sngl_prdt_save_price, save_gbn_code, regst_dtm, prdt_count, saved_yn)
		WITH v_temp AS (
			SELECT  A.order_num orderNum
				  , A.order_prdt_inseq orderPrdtInseq
				  , SUM(DECODE(A.save_gbn_code, 'C0682', A.prdt_count, 0)) prdtCountC0682
				  , SUM(DECODE(A.save_gbn_code, 'C0685', A.prdt_count, 0)) prdtCountC0685
				  , SUM(DECODE(A.save_gbn_code, 'C0686', A.prdt_count, 0)) prdtCountC0686
				  , MAX(A.sngl_prdt_save_price) snglPrdtSavePrice
			  FROM  tb_order_product_saved A
			 WHERE  A.order_num = #orderNum#
			   AND  A.save_gbn_code IN ('C0682', 'C0685', 'C0686')
			 GROUP BY A.order_num, A.order_prdt_inseq
			 ORDER BY A.order_num, A.order_prdt_inseq
		)
		SELECT  A.orderNum
			  , A.orderPrdtInseq
			  , (SELECT  LPAD(NVL(max(saved_inseq) + 1, 1), 2, '0')
				   FROM  tb_order_product_saved
				  WHERE  order_num = A.orderNum
					AND  order_prdt_inseq = A.orderPrdtInseq) savedInseq
			  , ((-1) * A.snglPrdtSavePrice) snglPrdtSavePrice
			  , #saveGbnCodeForRefund#
			  , SYSDATE
			  , (prdtCountC0682 - prdtCountC0685 - prdtCountC0686) cancelCount
			  , 'N'
		  FROM  v_temp A
		 WHERE  (prdtCountC0682 - prdtCountC0685 - prdtCountC0686) > 0
	</insert>
	
	 <select id="getCartCountByUser" parameterClass="userInfo" resultClass="int">
		SELECT count(*) 
		  FROM tb_cart a
		  INNER JOIN tb_sell_product b on a.sell_prdt_bcode = b.sell_prdt_bcode and b.sell_prdt_gbn <![CDATA[<>]]> 'C' and b.sell_prdt_gbn <![CDATA[<>]]> 'F'
		 WHERE a.user_num = #num# 
		   AND a.mall_id = #mallId# 
		   AND a.user_yn = 'Y'
		   AND A.GROUPSELLYN is null
	</select>
	
	<select id="getCartCountByNoUser" parameterClass="cartCriteria" resultClass="int">
		SELECT count(*) 
		  FROM tb_cart 
		 WHERE user_num is null 
		   AND mall_id = #mallId# 
		   AND user_yn = 'N'
		   AND sesn_hash_key = #sesnHashKey#
		   AND GROUPSELLYN is null
	</select>
	
	<select id="selectEscrowOrderDeliveryProductInfoList" resultClass="escrowOrderDeliveryInfo" parameterClass="deliveryCriteria">
		SELECT  A.order_num oid
			  , A.order_num || F.order_prdt_inseq productId
			  , D.ship_regst_dt || '0900' dlvdate
			  , D.tcb_id dlvcompcode
			  , D.send_no dlvno
			  , D.dlvy_cmplt_dt || '0900' rcvdate
			  , B.rcvr_name rcvname
			  , D.dlvy_id dlvyId
		  FROM  tb_order A
			  , tb_order_destination B
			  , tb_order_delivery_request C
			  , tb_delivery D
			  , tb_order_delivery_product E
			  , tb_order_product F
		 WHERE  A.order_num = B.order_num
		   AND  B.order_num = C.order_num
		   AND  B.order_dest_inseq = C.order_dest_inseq
		   AND  C.order_num = D.order_num
		   AND  C.order_dest_inseq = D.order_dest_inseq
		   AND  C.dlvy_vndr_id = D.dlvy_vndr_id
		   AND  D.dlvy_id = E.dlvy_id
		   AND  E.order_num = F.order_num
		   AND  E.order_prdt_inseq = F.order_prdt_inseq
		   AND  A.escr_yn = 'Y'
		   AND  A.escr_send_yn = 'N'
		   AND  A.mall_id = '02'
		   AND  A.escr_agre_gbn IS NULL
		   AND  B.order_dest_inseq = '01'
		   AND  D.dlvy_gbn_code = 'C0131'
		   AND  D.escr_send_gbn IS NULL
		   AND  F.order_prdt_stat_code != 'C0172'
		   AND  NOT EXISTS (SELECT *
							  FROM tb_delivery X 
							 WHERE X.order_num = D.order_num
							   AND X.order_dest_inseq = D.order_dest_inseq
							   AND X.sales_gbn != 'F')
		   AND  NOT EXISTS (SELECT *
							  FROM tb_delivery X 
							 WHERE X.order_num = D.order_num
							   AND X.order_dest_inseq = D.order_dest_inseq
							   AND X.tcb_id IN ($tcbIds$))
	</select>
	
	<select id="selectEscrowOrderDeliveryCompletionOrderInfoList" resultClass="escrowOrderDeliveryInfo" parameterClass="deliveryCriteria">
		WITH v_temp AS (
			SELECT  A.order_num
			  FROM  tb_order A
				  , tb_order_destination B
				  , tb_order_delivery_request C
				  , tb_delivery D
			 WHERE  A.order_num = B.order_num
			   AND  B.order_num = C.order_num
			   AND  B.order_dest_inseq = C.order_dest_inseq
			   AND  C.order_num = D.order_num
			   AND  C.order_dest_inseq = D.order_dest_inseq
			   AND  C.dlvy_vndr_id = D.dlvy_vndr_id
			   AND  A.escr_yn = 'Y'
			   AND  A.escr_send_yn = 'N'
			   AND  A.mall_id = '02'
			   AND  A.escr_agre_gbn IS NULL
			   AND  B.order_dest_inseq = '01'
			   AND  D.dlvy_gbn_code = 'C0131'
			   AND  D.escr_send_gbn IS NULL
			   AND  NOT EXISTS (SELECT *
								  FROM tb_delivery X 
								 WHERE X.order_num = D.order_num
								   AND X.order_dest_inseq = D.order_dest_inseq
								   AND X.dlvy_status_code != 'C0124')
			   AND  EXISTS (SELECT *
							  FROM tb_delivery X 
							 WHERE X.order_num = D.order_num
							   AND X.order_dest_inseq = D.order_dest_inseq
							   AND X.tcb_id IN ($tcbIds$))
			  GROUP BY A.order_num
			
			UNION
			
			SELECT  A.order_num 
			  FROM  tb_order A
			 WHERE  A.escr_yn = 'Y'
			   AND  A.escr_send_yn = 'N'
			   AND  A.mall_id = '02'
			   AND  A.escr_agre_gbn IS NULL
			   AND  EXISTS (SELECT 1 
							  FROM tb_order_cancel_history B 
							 WHERE B.order_num = A.order_num) 
							   AND 0 <![CDATA[<]]> (SELECT sum(pymnt_amt + canc_rtn_amt) 
										 FROM tb_payment 
										WHERE ordeR_num = A.order_num)
			   AND  'C0124' <![CDATA[<=]]> (SELECT  MIN(D1.dlvy_status_code) dlvy_code
								  FROM  tb_order A1
									  , tb_order_destination B1
									  , tb_order_delivery_request C1
									  , tb_delivery D1
								 WHERE  A1.order_num = B1.order_num
								   AND  A1.order_num = A.order_num
								   AND  A1.mall_id = '02'
								   AND  B1.order_dest_inseq = '01'
								   AND  B1.order_num = C1.order_num
								   AND  B1.order_dest_inseq = C1.order_dest_inseq
								   AND  C1.order_num = D1.order_num
								   AND  C1.order_dest_inseq = D1.order_dest_inseq
								   AND  C1.dlvy_vndr_id = D1.dlvy_vndr_id
								   AND  D1.dlvy_gbn_code = 'C0131'
								  )
		)
		SELECT  A.order_num oid
			  , MAX(D.dlvy_cmplt_dt) || '0900' rcvdate
			  , B.rcvr_name rcvname
		  FROM  v_temp A
			  , tb_order_destination B
			  , tb_order_delivery_request C
			  , tb_delivery D
		 WHERE  A.order_num = B.order_num
		   AND  B.order_num = C.order_num
		   AND  B.order_dest_inseq = C.order_dest_inseq
		   AND  C.order_num = D.order_num
		   AND  C.order_dest_inseq = D.order_dest_inseq
		   AND  C.dlvy_vndr_id = D.dlvy_vndr_id
		   AND  B.order_dest_inseq = '01'
		 GROUP BY A.order_num, B.rcvr_name
	</select>
	
	<update id="updateEscrowSendGbnDelivery" parameterClass="delivery">
		UPDATE  tb_delivery
		   SET  escr_send_gbn = 'S'
		 WHERE  order_num = #orderNum#
		 <isNotEmpty property="deliveryId">
		   AND  dlvy_id = #deliveryId#
		 </isNotEmpty>
	</update>
	
	<update id="updateEscrowSendYnOrder" parameterClass="string">
		UPDATE  tb_order
		   SET  escr_send_yn = 'Y'
		 WHERE  order_num = #value#
	</update>
	
	<select id="selectSpecificationOnTransactionProductInfoList" parameterClass="orderCriteria" resultClass="orderProductListData">
		WITH v_temp AS (
			SELECT  B.order_num orderNum
				  , B.order_prdt_inseq orderPrdtInseq
				  , B.sell_prdt_bcode sellPrdtBcode
				  , (B.order_count - B.canc_count) orderCount
				  , 0 dlvyCount
				  , B.SNGL_PRDT_SELL_PRICE snglPrdtSellPrice
			  FROM  tb_order A
				  , tb_order_product B
			 WHERE  A.order_num = B.order_num
			   AND  A.order_num = #orderNo#
			   AND  B.order_count - B.canc_count > 0
			
			UNION ALL
			
			SELECT  C.order_num orderNum
				  , C.order_prdt_inseq orderPrdtInseq
				  , D.sell_prdt_bcode sellPrdtBcode
				  , 0 orderCount
				  , C.dlvy_count dlvyCount
				  , 0 snglPrdtSellPrice
			  FROM  tb_return_exchange_master A
				  , tb_delivery B
				  , tb_order_delivery_product C
				  , tb_order_product D
			 WHERE  A.rtn_seq = B.rtn_seq
			   AND  A.order_num = B.order_num
			   AND  B.dlvy_id = C.dlvy_id
			   AND  C.order_num = D.order_num
			   AND  C.order_prdt_inseq = D.order_prdt_inseq
			   AND  B.dlvy_gbn_code = 'C0132'
			   AND  A.order_num = #orderNo#
			   AND  A.rtn_status_code IN ('C0277', 'C0278')
		)
		SELECT  A.*
			  , (SELECT  prdt_name
				   FROM  tb_sell_product
				  WHERE  sell_prdt_bcode = FC_GET_BARCODE(A.barcode)) productName
			  , DECODE(A.vatTaxYn, 'Y', ROUND(snglPrdtSellPrice/ 1.1), snglPrdtSellPrice) sellProductPrice
			  , decode(A.vatTaxYn, 'Y', (snglPrdtSellPrice - ROUND(snglPrdtSellPrice/ 1.1)), 0) vat
			  , (snglPrdtSellPrice * (A.orderCount - A.returnCount)) sumSellPrice
		  FROM (SELECT  X.orderNum
					  , X.orderPrdtInseq productInnerSequence
					  , X.sellPrdtBcode barcode
					  , Y.spec_name specName
					  , SUM(X.orderCount) orderCount
					  , SUM(X.dlvyCount) returnCount
					  , MAX(X.snglPrdtSellPrice) snglPrdtSellPrice
					  , Z.vat_tax_yn vatTaxYn
				  FROM  v_temp X
					  , tb_sell_product Y
					  , tb_vendor_contract Z
				 WHERE  X.sellPrdtBcode = Y.sell_prdt_bcode
				   AND  Y.vndr_cntrt_id = Z.vndr_cntrt_id
				 GROUP BY X.orderNum, X.orderPrdtInseq, X.sellPrdtBcode, Y.spec_name, Z.vat_tax_yn
				) A
		 WHERE  (A.orderCount - A.returnCount) > 0
		 ORDER BY A.orderNum, A.productInnerSequence
	</select>
	
	<select id="selectSpecificationOnTransactionInfo" parameterClass="string" resultClass="orderSimpleInfo">
		WITH v_temp AS (
			SELECT  A.order_num orderNum
				  , A.buyer_name buyerName
				  , B.user_id userId
				  , A.order_dtm orderDatetime
			  FROM  tb_order A
				  , tb_user B
			 WHERE  A.user_num = B.user_num (+)
			   AND  A.order_num = #value#
		)
		SELECT  A.*
			  , NVL(SUM(C.order_dlvy_amt + C.order_dlvy_chng_amt - C.cpn_dscnt_amt),0) deliveryAmt
		  FROM  v_temp A
			  , tb_order_destination B
			  , tb_order_delivery_request C
		 WHERE  A.orderNum = B.order_num
		   AND  B.order_dest_inseq = '01'
		   AND  B.order_num = C.order_num
		   AND  B.order_dest_inseq = C.order_dest_inseq
		 GROUP BY A.orderNum, A.buyerName, A.userId, A.orderDatetime
	</select>
	
	<update id="updateEscrowAgreementGbn" parameterClass="order">
		UPDATE  tb_order
		   SET  escr_agre_gbn = #escrowAgreementGbn#
			  , escr_dt = to_char(sysdate, 'yyyyMMdd')
		 WHERE  order_num = #orderNum#
	</update>
	
	<update id="updateOrderCashReceiptYn" parameterClass="order">
		UPDATE  tb_order
		   SET  cash_rcpt_issue_yn = #cashReceiptYn#
		 WHERE  order_num = #orderNum#
	</update>
	
	<select id="selectTotalCancelCouponAmt" parameterClass="string" resultClass="int">
		WITH v_temp AS (
			SELECT  SUM(A.cpn_dscnt_amt) sumCouponAmt
				  , 0 dlvyCpnAmt
				  , 0 orderCpnAmt
			  FROM  tb_order_cancel_product A
			 WHERE  A.order_num = #value#
			
			UNION
			
			SELECT  0 sumCouponAmt
				  , SUM(A.cpn_dscnt_amt) dlvyCpnAmt
				  , 0 orderCpnAmt
			  FROM  tb_order_delivery_request A
				  , tb_delivery B
			 WHERE  A.order_num = B.order_num
			   AND  A.order_dest_inseq = B.order_dest_inseq
			   AND  A.dlvy_vndr_id = B.dlvy_vndr_id
			   AND  A.order_num = #value#
			   AND  B.dlvy_gbn_code = 'C0131'
			   AND  B.dlvy_status_code = 'C0125'
			   
			UNION
			
			SELECT  0 sumCouponAmt
				  , 0 dlvyCpnAmt
				  , SUM(A.cpn_amt * (-1)) orderCpnAmt
			  FROM  tb_cart_coupon_history A
			 WHERE  A.order_num = #value#
			   AND  A.cpn_canc_yn = 'Y'
		)
		SELECT  NVL(SUM(sumCouponAmt + dlvyCpnAmt + orderCpnAmt), 0) cpnDscntAmt
		  FROM  v_temp
	</select>
	
	<select id="getPgCalculateList" parameterClass="string" resultClass="pgCalculate">
		SELECT 'D' label,
			   rownum sequence,
			   'hottracks' storeId,
			   A.order_num orderNum,
			   to_char(a.order_dtm, 'yyyyMMdd') orderDate,
			   decode(B.pymnt_means_code, 'C0111', 'SC0010', 'C0112', 'SC0030', 'C0113', 'SC0060', 'C0114', 'SC0111', 'XXX') paymentCode,
			   CASE 
				 WHEN B.pymnt_means_code = 'C0111' THEN decode(b.pymnt_stat_code, 'C0101', 'XX', 'C0102', 'CA01', 'C0103', 'CA02', 'CA04')
				 WHEN B.pymnt_means_code = 'C0112' THEN decode(b.pymnt_stat_code, 'C0101', 'XX', 'C0102', 'AC01', 'C0103', 'AC02', 'AC02')
				 WHEN B.pymnt_means_code = 'C0113' THEN decode(b.pymnt_stat_code, 'C0101', 'XX', 'C0102', 'WR01', 'C0103', 'WR02', 'WR02')
				 WHEN B.pymnt_means_code = 'C0114' THEN decode(b.pymnt_stat_code, 'C0101', 'XX', 'C0102', 'TC01', 'C0103', 'TC02', 'TC02')
				 ELSE 'XX'
			   END transactionType,
			   decode(b.pymnt_stat_code, 'C0101', 0, 'C0102', b.pymnt_amt, 'C0103', b.canc_rtn_amt, b.canc_rtn_amt) paymentAmount,
			   round(decode(b.pymnt_stat_code, 'C0101', 0, 'C0102', b.pymnt_amt, 'C0103', b.canc_rtn_amt, b.canc_rtn_amt) * 0.03) chageAmount,
			   to_char(a.order_dtm, 'yyyyMMdd') salesDate,
			   to_char(a.order_dtm + 2, 'yyyyMMdd') payTodoDate
		  FROM tb_order A, tb_payment B
		 WHERE A.order_num = B.order_num
		   AND A.order_dtm between to_date(#value# || '000000', 'yyyyMMddhh24miss') and to_date(#value# || '235959', 'yyyyMMddhh24miss')
		   AND b.pymnt_means_code in ('C0111', 'C0112', 'C0113', 'C0114')	
	</select>
	
	<select id="getPgPayment" parameterClass="string" resultClass="pgPayment">
		SELECT 'hottracks' storeId,
			   decode(B.pymnt_means_code, 'C0111', 'SC0010', 'C0112', 'SC0030', 'C0113', 'SC0060', 'C0114', 'SC0111', 'XXX') paymentCode,
			   nvl(B.lgup_deal_num, 'XX') transactionNum,
			   A.order_num orderNum,
			   nvl(b.pymnt_organ_code, 'XX') paymentOrganCode,
			   nvl(b.pymnt_organ_name, 'XX') paymentOrganName,
			   'xxxxx' buyerId,
			   pymnt_amt transferAmount,
			   nvl(a.escr_yn, 'N') escrYn,
			   to_char(b.pymnt_dtm, 'yyyyMMddhh24miss') paymentDth,
			   '00000000' permitNum,
			   '10' status
		  FROM tb_order A, 
			   tb_payment B
		 WHERE A.order_num = B.order_num
		   AND A.order_dtm between to_date(#value# || '000000', 'yyyyMMddhh24miss') and to_date(#value# || '235959', 'yyyyMMddhh24miss')
		   AND b.pymnt_means_code in ('C0111', 'C0112', 'C0113', 'C0114')
		   AND B.pymnt_stat_code = 'C0102'
	</select>
	
	<select id="getPgPaymentForCancel" parameterClass="string" resultClass="pgPayment">
		SELECT 'hottracks' storeId,
			   decode(B.pymnt_means_code, 'C0111', 'SC0010', 'C0112', 'SC0030', 'C0113', 'SC0060', 'C0114', 'SC0111', 'XXX') paymentCode,
			   nvl(C.lgup_deal_num, 'XX') transactionNum,
			   A.order_num orderNum,
			   nvl(C.pymnt_organ_code, 'XX') paymentOrganCode,
			   nvl(C.pymnt_organ_name, 'XX') paymentOrganName,
			   'xxxxx' buyerId,
			   -b.canc_rtn_amt transferAmount,
			   nvl(a.escr_yn, 'N') escrYn,
			   to_char(b.pymnt_dtm, 'yyyyMMddhh24miss') paymentDth,
			   NVL(C.prmt_num,'00000000') permitNum,
			   '20' status
		  FROM tb_order A, 
			   tb_payment B,
			   tb_payment C
		 WHERE A.order_num = B.order_num
		   AND B.order_num = C.order_num
		   AND B.org_pymnt_inseq = C.pymnt_inseq
		   AND A.order_dtm between to_date(#value# || '000000', 'yyyyMMddhh24miss') and to_date(#value# || '235959', 'yyyyMMddhh24miss')
		   AND b.pymnt_means_code in ('C0111', 'C0112', 'C0113', 'C0114')
		   AND B.pymnt_stat_code in ('C0103', 'C0104')
	</select>
	
	<select id="selectOrderCancelProductList" parameterClass="string" resultClass="orderProductListData">
		WITH v_temp AS (
			SELECT  C.order_num
				  , C.order_prdt_inseq
				  , SUM(C.canc_count) canc_count
				  , SUM(C.canc_count * c.sngl_prdt_sell_price - C.cpn_dscnt_amt) sumSellPrice
			  FROM  tb_order A
				  , tb_order_cancel_history B
				  , tb_order_cancel_product C
			 WHERE  A.order_num = B.order_num
			   AND  B.order_num = C.order_num
			   AND  B.order_canc_inseq = C.order_canc_inseq
			   AND  A.order_num = #value#
			 GROUP BY C.order_num, C.order_prdt_inseq
		)
		SELECT  D.sell_prdt_bcode barcode
			  , FC_GET_PRODUCT_IMAGE_URL(D.sell_prdt_bcode) productImageUrl
			  , D.prdt_name productName
			  , C.sell_prdt_gbn gbn
			  , C.spec_name specName
			  , A.canc_count cancelCount
			  , NVL(A.sumSellPrice,0) sumSellPrice
			  , E.rcrd_cd rcrdCd
		  FROM  v_temp A
			  , tb_order_product B
			  , tb_sell_product C
			  , tb_sell_product D
			  , tb_record E
		 WHERE  A.order_num = B.order_num
		   AND  A.order_prdt_inseq = B.order_prdt_inseq
		   AND  B.sell_prdt_bcode = C.sell_prdt_bcode
		   AND  FC_GET_BARCODE(C.sell_prdt_bcode) = D.sell_prdt_bcode
		   AND  C.RCRD_CD = E.RCRD_CD(+)
	</select>
	
	<select id="selectdeliveryProductList" parameterClass="string" resultClass="cartProductListData">
		SELECT 
		  FC_GET_BARCODE(c.SELL_PRDT_BCODE) sellPrdtBcode,
		  a.DLVY_VNDR_ID dlvyVndrId, 
		  FC_GET_PRODUCT_IMAGE_URL(c.SELL_PRDT_BCODE) productImageUrl,
		  d.prdt_name prdtName,
		  d.sell_prdt_gbn sellPrdtGbn,
		  d.spec_name specName,
		  b.DLVY_COUNT prdtCount,
		  c.sngl_prdt_sell_price sellPrice,
		  NVL((SELECT SUM(X.sngl_prdt_save_price * prdt_count)
						   FROM tb_order_product_saved X 
						  WHERE A.order_num = X.order_num
							AND b.order_prdt_inseq = X.order_prdt_inseq), 0) sumSavedPrice
		FROM
		  TB_DELIVERY a,
		  TB_ORDER_DELIVERY_PRODUCT b,
		  TB_ORDER_PRODUCT c,
		  TB_SELL_PRODUCT d
		WHERE
		  a.DLVY_ID = #dlvyId#
		AND a.DLVY_ID = b.DLVY_ID
		AND a.ORDER_NUM = b.ORDER_NUM
		AND b.ORDER_NUM = c.ORDER_NUM
		AND b.ORDER_PRDT_INSEQ = c.ORDER_PRDT_INSEQ
		AND FC_GET_BARCODE(c.SELL_PRDT_BCODE) = d.SELL_PRDT_BCODE
	</select>
	
	<select id="selectDeliveryInfo" parameterClass="map" resultClass="orderDestinationParam">
		SELECT b.order_num orderNum,
		  b.order_dest_inseq innerSequence,
		  b.rcvr_name receiverName,
		  b.rcvr_hdphn_num receiverHandPhone,
		  b.rcvr_tel_num receiverTelePhone,
		  b.rcvr_post_num receiverPostNum,
		  b.rcvr_addr receiverAddress,
		  b.rcvr_dtl_addr receiverDetailAddress,
		  b.wish_dlvy_dt wishDeliveryDate,
		  b.rcvr_email_addr receiverEmail,
		  b.dlvy_msg deliveryMessage,
		  b.gift_msg giftMessage,
		  b.order_msg orderMessage,
		  d.REGST_DTM deliveryDate,
		  a.ORDER_DTM orderDate,
		  d.DLVY_METHD_CODE dlvyMethd,
		  E.TCB_NAME tcbName, 
		  d.SEND_NO sendNo
		FROM TB_ORDER a,
		  TB_ORDER_DESTINATION b,
		  TB_ORDER_DELIVERY_REQUEST c,
		  TB_DELIVERY d,
		  TB_TACBAE E
		WHERE a.ORDER_NUM = b.ORDER_NUM
		AND b.ORDER_NUM = c.ORDER_NUM
		AND b.ORDER_DEST_INSEQ = c.ORDER_DEST_INSEQ
		AND c.ORDER_NUM = d.ORDER_NUM
		AND c.ORDER_DEST_INSEQ = d.ORDER_DEST_INSEQ
		AND c.DLVY_VNDR_ID = d.DLVY_VNDR_ID
		AND d.TCB_ID = e.TCB_ID (+)
		AND a.ORDER_NUM = #orderNum#
		AND d.DLVY_ID = #dlvyId#
	</select>
	
	<select id="selectOrderDetailByOrderNumForKyoboMall" parameterClass="string" resultClass="orderDetail">
		WITH v_temp AS(
			SELECT  SUM(A.sngl_prdt_sell_price * A.order_count) sumOrderAmt
				  , SUM(A.cpn_dscnt_amt) sumCouponAmt
				  , SUM(NVL((SELECT SUM(b.optn_price)
							   FROM tb_kyobo_select_option B 
							  WHERE A.order_num = B.order_num 
								AND A.order_prdt_inseq = B.order_prdt_inseq 
								AND B.optn_yn = 'N'),0) * A.order_count ) totalCvslAmt
				  , A.order_num orderNum
				  , A.dlvy_vndr_id dlvyVndrId
				  , B.order_dest_inseq orderDestInseq
			  FROM  tb_order_product A
				  , tb_order_destination B
				  , tb_order C
			 WHERE  A.order_num = B.order_num
			   AND  A.order_dest_inseq = B.order_dest_inseq
			   AND  B.order_num = C.order_num
			   AND  B.order_dest_inseq = '01'
			   AND  A.order_num = #value#
			 GROUP BY A.order_num, A.dlvy_vndr_id, B.order_dest_inseq
		)
		SELECT  A.order_num orderNum
			  , A.buyer_name buyerName
			  , A.order_user_id orderUserId
			  , A.buyer_tel_num buyerTelNum
			  , A.buyer_hdphn_num buyerHandphoneNumber
			  , A.order_dtm orderDate
			  , A.kyobo_pymnt_vrfy_dtm paymentDate
			  , A.mall_id mallId
			  , B.rcvr_name receiverName
			  , B.rcvr_tel_num receiverTelNumber
			  , B.rcvr_hdphn_num receiverHandphoneNumber
			  , B.rcvr_post_num receiverPostNumber
			  , B.rcvr_addr receiverAddress
			  , B.rcvr_dtl_addr receiverDetailAddress
			  , B.dlvy_msg deliveryMessage
			  , B.gift_msg giftMessage
			  , B.order_msg orderMessage
			  , (C.totalPrdtAmt - C.totalCpnDscntAmt + C.totalDlvyAmt) orderPrice
		  FROM  tb_order A
			  , tb_order_destination B
			  ,(SELECT  NVL(SUM(A.sumOrderAmt + A.totalCvslAmt),0) totalPrdtAmt
					  , NVL(SUM(B.order_dlvy_amt),0) totalDlvyAmt
					  , NVL(SUM(B.cpn_dscnt_amt),0) + NVL(SUM(A.sumCouponAmt), 0) totalCpnDscntAmt
					  , A.orderNum
				  FROM  v_temp A
					  , tb_order_delivery_request B
				 WHERE  A.orderNum = B.order_num
				   AND  A.orderDestInseq = B.order_dest_inseq
				   AND  A.dlvyVndrId = B.dlvy_vndr_id  
				 GROUP BY A.orderNum ) C
		 WHERE  A.order_num = B.order_num
		   AND  B.order_num = C.orderNum
		   AND  B.order_dest_inseq = '01'
	</select>
	
	<select id="selectOrderDeliveryProductByOrderNumForKyoboMall" parameterClass="string" resultClass="orderDeliveryProductParam">
		SELECT  F.sell_prdt_bcode productBarcode
			  , I.prdt_name productName
			  , G.spec_name specName
			  , I.sell_prdt_gbn sellPrdtGbn
			  , CASE 
					WHEN (D.dlvy_status_code = 'C0123' OR D.dlvy_status_code = 'C0124') THEN E.dlvy_count
					ELSE E.dlvy_stby_count
				  END deliveryCount
			  , F.sngl_prdt_sell_price singleProductSellPrice
			  , F.order_prdt_stat_code orderProductStatusCode
			  , E.order_dlvy_prdt_ship_stat_code shippingStatusCode
			  , D.dlvy_status_code orderDeliveryProductStatusCode
			  , D.send_no sendNo
			  , H.tcb_name tacbaeName
		  FROM  tb_order A
			  , tb_order_destination B
			  , tb_order_delivery_request C
			  , tb_delivery D
			  , tb_order_delivery_product E
			  , tb_order_product F
			  , tb_sell_product G
			  , tb_tacbae H
			  , tb_sell_product I
		 WHERE  A.order_num = B.order_num
		   AND  B.order_num = C.order_num
		   AND  B.order_dest_inseq = C.order_dest_inseq
		   AND  C.order_num = D.order_num
		   AND  C.order_dest_inseq = D.order_dest_inseq
		   AND  C.dlvy_vndr_id = D.dlvy_vndr_id
		   AND  D.dlvy_id = E.dlvy_id
		   AND  E.order_num = F.order_num
		   AND  E.order_prdt_inseq = F.order_prdt_inseq
		   AND  F.sell_prdt_bcode = G.sell_prdt_bcode
		   AND  D.tcb_id = H.tcb_id(+)
		   AND  FC_GET_BARCODE(F.sell_prdt_bcode) = I.sell_prdt_bcode
		   AND  B.order_dest_inseq = '01'
		   AND  A.order_num = #value#
		   AND  D.dlvy_gbn_code = 'C0131'
	</select>
	
	<select id="selectPaymentDealNumListForCancelCashReceipt" parameterClass="int" resultClass="payment">
		WITH v_temp AS (
			SELECT  B.order_num
				  , B.pymnt_means_code
				  , NVL(SUM(B.pymnt_amt + B.canc_rtn_amt), 0) pymntAmt
			  FROM  tb_tax_bill_request_order A
				  , tb_payment B
			 WHERE  A.order_num = B.order_num
			   AND  A.tax_bill_seq = #taxBillSeq#
			   AND  B.pymnt_means_code = 'C0112'
			 GROUP BY B.order_num, B.pymnt_means_code
		)
		SELECT  Y.lgup_deal_num lgupDealNum
			  , Y.order_num orderNum
		  FROM  v_temp X
			  , tb_payment Y
		 WHERE  X.order_num = Y.order_num
		   AND  X.pymnt_means_code = Y.pymnt_means_code
		   AND  X.pymntAmt > 0
		   AND  Y.pymnt_stat_code = 'C0102'
	</select>
	
	
	<select id="getOrderProductByError1" resultClass="orderProductInfo">
		SELECT A.order_num orderNum,
			   A.order_prdt_inseq productInnerSequence,
			   A.sell_prdt_bcode barcode,
			   B.mall_id mallId,
			   A.sngl_prdt_sell_price sellProductPrice,
			   A.sngl_prdt_buy_price buyPrice,
			   A.sngl_prdt_chge_price chargePrice,
			   FC_GET_CHGE_RATE_AT_DATE(sell_prdt_bcode, mall_id, B.order_dtm) chargeRate
		  FROM tb_order_product A, 
			   tb_order B 
		 WHERE A.order_num = B.order_num
		   AND B.order_dtm between to_date('20110723'||'000000', 'yyyyMMddhh24miss') and to_date('20110729'||'000000', 'yyyyMMddhh24miss')
		   AND B.mall_id = '01'
	</select>
	
	<update id="updateOrderProductForPriceByKey" parameterClass="orderProduct">
		UPDATE tb_order_product
		   SET SNGL_PRDT_BUY_PRICE		  = #buyPrice#,				
			   SNGL_PRDT_CHGE_PRICE		 = #chargePrice#			 
		 WHERE 
			   ORDER_NUM					= #orderNum#				
		   AND ORDER_PRDT_INSEQ			 = #productInnerSequence#	
	</update>
	
	<insert id="insertCartCouponHistory" parameterClass="cartCouponHistory">
		<selectKey keyProperty="cartCouponInseq" resultClass="string" type="pre">
			SELECT LPAD(NVL(MAX(A.cart_cpn_inseq) + 1, 1), 2, '0') FROM tb_cart_coupon_history A WHERE A.order_num = #orderNum#
		</selectKey>
		INSERT INTO tb_cart_coupon_history (
			order_num
		  , cart_cpn_inseq
		  , cpn_amt
		  , cpn_id
		  , kyobo_cpn_id
		  , cpn_canc_yn
		  , regst_dtm
		  , use_limit_amt
		  , ccl_yn
		  , order_canc_inseq
		  , sales_yn
		)
		VALUES
		(
			#orderNum#
		  , #cartCouponInseq#
		  , #couponAmount#
		  , #couponId#
		  , #kyoboCouponId#
		  , #couponCancelYn#
		  , SYSDATE
		  , #useLimitAmount#
		  , 'N'
		  , #orderCancelInnerSequence#
		  , #salesYn#
		)
	</insert>
	
	<insert id="cancelCartCouponHistory" parameterClass="cartCouponHistory">
		INSERT INTO tb_cart_coupon_history (order_num, cart_cpn_inseq, cpn_amt, cpn_id, kyobo_cpn_id, cpn_canc_yn, regst_dtm, use_limit_amt, ccl_yn, order_canc_inseq, sales_yn)
		WITH v_temp AS (
			SELECT  LPAD(NVL(MAX(cart_cpn_inseq) + 1, 1), 2, '0') cart_cpn_inseq
				  , order_num
			  FROM  tb_cart_coupon_history
			 WHERE  order_num = #orderNum#
			 GROUP BY order_num
		)
		SELECT  B.order_num
			  , A.cart_cpn_inseq
			  , (-1) * B.cpn_amt cpn_amt 
			  , B.cpn_id
			  , B.kyobo_cpn_id
			  , 'Y'
			  , SYSDATE
			  , B.use_limit_amt
			  , 'N'
			  , #orderCancelInnerSequence#
			  , 'N'
		  FROM  v_temp A
			  , tb_cart_coupon_history B
		 WHERE  A.order_num = B.order_num
		   AND  A.order_num = #orderNum#
	</insert>
	
	<select id="selectCancelableOrderCouponIdByOrderNum" parameterClass="string" resultClass="int">
		WITH v_temp AS (
			SELECT  B.order_num
				  , B.order_prdt_inseq
				  , (B.order_count * B.sngl_prdt_sell_price) prdt_amt
			  FROM  tb_order A
				  , tb_order_product B
			 WHERE  A.order_num = B.order_num
			   AND  A.order_num = #value#
			   
			UNION
			
			SELECT  C.order_num
				  , C.order_prdt_inseq
				  , SUM(C.canc_count * C.sngl_prdt_sell_price) prdt_amt
			  FROM  tb_order A
				  , tb_order_cancel_history B
				  , tb_order_cancel_product C
			 WHERE  A.order_num = B.order_num
			   AND  B.order_num = C.order_num
			   AND  B.order_canc_inseq = C.order_canc_inseq
			   AND  A.order_num = #value#
			 GROUP BY C.order_num, C.order_prdt_inseq
		)
		SELECT  Y.cpn_amt cpn_amt
		  FROM (SELECT  SUM(A.prdt_amt) prdt_amt
					  , A.order_num
				  FROM  v_temp A
				 GROUP BY A.order_num) X
			  , (SELECT  SUM(A.cpn_amt) cpn_amt
					   , A.use_limit_amt
					   , A.order_num
					   , A.cpn_id
				   FROM  tb_cart_coupon_history A
				  WHERE  A.order_num = #value#
				  GROUP BY A.order_num, A.cpn_id, A.use_limit_amt) Y
		 WHERE  X.order_num = Y.order_num
		   AND  Y.use_limit_amt > X.prdt_amt
		   AND  Y.cpn_amt > 0
	</select>
	
	<select id="selectCartCouponHistoryUseLimitAmt" parameterClass="string" resultClass="cartCouponHistory">
		WITH v_temp AS (
			SELECT  B.order_num
				  , B.order_prdt_inseq
				  , ((B.order_count - FC_GET_ORDER_PRDT_CANC_COUNT(B.order_num, B.order_prdt_inseq)) * B.sngl_prdt_sell_price) prdt_amt
			  FROM  tb_order A
				  , tb_order_product B
			 WHERE  A.order_num = B.order_num
			   AND  A.order_num = #value#
		)
		SELECT  X.prdt_amt sumProductAmount
			  , Y.cpn_amt couponAmount
			  , Y.use_limit_amt useLimitAmount
		  FROM (SELECT  SUM(A.prdt_amt) prdt_amt
					  , A.order_num
				  FROM  v_temp A
				 GROUP  BY order_num
				) X
			  , (SELECT  order_num
					   , use_limit_amt
					   , SUM(cpn_amt) cpn_amt
				   FROM  tb_cart_coupon_history
				  WHERE  order_num = #value#
				  GROUP  BY order_num, use_limit_amt) Y
		 WHERE  X.order_num = Y.order_num
	</select>
	
		
	<select id="selectPaymentAmtByOrderNum" parameterClass="payment" resultClass="int">
		SELECT  FC_GET_PYMNT_AMT_BY_MEANS_CODE(#orderNum#, #pymntMeansCode#)
		  FROM  dual
	</select>
	
	<select id="selectOrderCancelPaymentInfo" parameterClass="orderCancelHistory" resultClass="paymentInfo">
		WITH v_temp AS (
			SELECT  A.pymnt_amt
				  , A.pymnt_dtm
				  , A.pymnt_inseq
				  , A.order_num
			  FROM  tb_payment A
			 WHERE  A.order_num = #orderNum#
			   AND  A.order_canc_inseq = #orderCancInseq#
			   AND  A.pymnt_stat_code = 'C0102'
		)
		SELECT  A.pymnt_amt pymntAmt
			  , A.pymnt_dtm pymntDtm
			  , B.paymentCodeId
			  , B.itrstFreeYn
			  , NVL(B.mitpCount, 0) mitpCount
			  , B.transferCodeId
		  FROM  v_temp A
			  ,(SELECT  X.code_id paymentCodeId
					  , X.itrst_free_yn itrstFreeYn
					  , X.mitp_count mitpCount
					  , Y.code_id transferCodeId
				  FROM  tb_credit_payment X
					  , tb_credit_transfer Y
					  , v_temp Z
				 WHERE  Z.order_num = X.order_num(+)
				   AND  Z.pymnt_inseq = X.pymnt_inseq(+)
				   AND  Z.order_num = Y.order_num(+)
				   AND  Z.pymnt_inseq = Y.pymnt_inseq(+)) B
	</select>
	
	<select id="selectOrderCancelPaymentAmount" parameterClass="orderCancelHistory" resultClass="int">
		SELECT  NVL(SUM(A.canc_rtn_amt),0) cancRtnAmt
		  FROM  tb_payment A
		 WHERE  A.order_num = #orderNum#
		   AND  A.order_canc_inseq = #orderCancInseq#
		   AND  A.pymnt_stat_code IN ('C0103', 'C0104')
	</select>
	
	<select id="selectMainPaymentAmount" parameterClass="string" resultClass="int">
		SELECT  NVL(SUM(A.pymnt_amt + A.canc_rtn_amt),0) pymntAmt
		  FROM  tb_payment A
		 WHERE  A.order_num = #value#
		    AND  A.pymnt_means_code NOT IN ('C0115', 'C0116','C0118','C0119','C011B','C011C','C011F')
	</select>
	
	<sql id="fromOfPlentyOrder">
		  FROM TB_ORDER O
		  JOIN TB_ORDER_PRODUCT OP ON (O.ORDER_NUM = OP.ORDER_NUM)
		  JOIN TB_SELL_PRODUCT SP ON (OP.SELL_PRDT_BCODE = SP.SELL_PRDT_BCODE)
		  JOIN TB_VENDOR V ON (SUBSTR(SP.VNDR_CNTRT_ID, 0, 4) = V.VNDR_ID)
		  JOIN TB_VENDOR DV ON (SP.DLVY_VNDR_ID = DV.VNDR_ID)
		  LEFT JOIN TB_ORDER_COMMENT OC ON (OP.ORDER_NUM = OC.ORDER_NUM AND OP.ORDER_PRDT_INSEQ = OC.ORDER_PRDT_INSEQ)
		 WHERE 1 = 1
		   AND OP.ORDER_PRDT_STAT_CODE IN ('C0171', 'C0172')
		   AND O.ORDER_DTM BETWEEN TO_DATE(#startDate#||'000000', 'yyyyMMddHH24Miss')
							 AND TO_DATE(#endDate#||'235959', 'yyyyMMddHH24Miss')
		   <isNotEmpty property="orderNumber" prepend="AND">
			   O.ORDER_NUM = #orderNumber#
		   </isNotEmpty>
		   <isNotEmpty property="userNum" prepend="AND">
			   O.USER_NUM = #userNum#
		   </isNotEmpty>
		   <isNotEmpty property="buyerName" prepend="AND">
			   O.BUYER_NAME = #buyerName#
		   </isNotEmpty>
		   <isNotEmpty property="minOrderSellPrice" prepend="AND">
			   OP.ORDER_PRDT_AMT >= #minOrderSellPrice#
		   </isNotEmpty>
		   <isNotEmpty property="maxOrderSellPrice" prepend="AND">
			   OP.ORDER_PRDT_AMT <![CDATA[<=]]> #maxOrderSellPrice#
		   </isNotEmpty>
		   <isNotEmpty property="minOrderCount" prepend="AND">
			   OP.ORDER_COUNT >= #minOrderCount#
		   </isNotEmpty>
		   <isNotEmpty property="maxOrderCount" prepend="AND">
			   OP.ORDER_COUNT <![CDATA[<=]]> #maxOrderCount#
		   </isNotEmpty>
		   <isNotEqual property="mallId" compareValue="00" prepend="AND">
			   O.MALL_ID = #mallId#
		   </isNotEqual>
		   <isNotEmpty property="sellPrdtBcode" prepend="AND">
               SP.SELL_PRDT_BCODE = #sellPrdtBcode#
		   </isNotEmpty>
           <isNotEmpty property="vndrId" prepend="AND">
               V.VNDR_ID = #vndrId#
           </isNotEmpty>
	</sql>
	
	<select id="listOfPlentyOrder" parameterClass="plentyOrderCriteria" resultClass="plentyOrderData">
		SELECT TO_CHAR(O.ORDER_DTM, 'yyyyMMdd HH24:Mi:ss')	  orderDtm
			 , OP.ORDER_PRDT_STAT_CODE	  orderPrdtStatCode
			 , O.ORDER_NUM				  orderNum
			 , OP.ORDER_PRDT_INSEQ		  orderPrdtInseq
			 , NVL(O.USER_NUM, '')		  userNum
			 , O.BUYER_NAME				 buyerName
			 , SP.SELL_PRDT_BCODE		   productBarcode
			 , SP.PRDT_NAME				 productName
			 , SP.SPEC_NAME				 specName
			 , OP.ORDER_PRDT_AMT			orderAmt
			 , OP.ORDER_COUNT			   orderCount
			 , V.VNDR_ID					vendorId
			 , V.VNDR_NAME				  vendorName
			 , V.SALES_MNGR_TEL_NUM		 vendorTel
			 , SP.DLVY_VNDR_ID			  deliveryVendorId
			 , DV.VNDR_NAME				 deliveryVendorName
			 , DV.SALES_MNGR_TEL_NUM		deliveryVendorTel
			 , OC.COMMENTS				  comments
			 , OP.ORDER_DEST_INSEQ		  orderDestInseq
			 , OP.DLVY_VNDR_ID			  dlvyVndrId
			  , (select T.USER_ID from TB_USER T where T.USER_NUM = O.USER_NUM)          userId
			 <include refid="fromOfPlentyOrder"/>
		 <isEqual property="orderBy" compareValue="OrderDtmDesc">
			 ORDER BY O.ORDER_DTM DESC, O.ORDER_NUM
		 </isEqual>
		 <isEqual property="orderBy" compareValue="OrderDtmAsc">
			 ORDER BY O.ORDER_DTM ASC, O.ORDER_NUM
		 </isEqual>
		 <isEqual property="orderBy" compareValue="OrderAmtDesc">
			 ORDER BY OP.ORDER_PRDT_AMT DESC, O.ORDER_DTM DESC, O.ORDER_NUM
		 </isEqual>
		 <isEqual property="orderBy" compareValue="OrderAmtAsc">
			 ORDER BY OP.ORDER_PRDT_AMT ASC,  O.ORDER_DTM DESC, O.ORDER_NUM
		 </isEqual>
		 <isEqual property="orderBy" compareValue="OrderCountDesc">
			 ORDER BY OP.ORDER_COUNT DESC, O.ORDER_DTM DESC, O.ORDER_NUM
		 </isEqual>
		 <isEqual property="orderBy" compareValue="OrderCountAsc">
			 ORDER BY OP.ORDER_COUNT ASC, O.ORDER_DTM DESC, O.ORDER_NUM
		 </isEqual>
	</select>

	<select id="countOfPlentyOrder" parameterClass="plentyOrderCriteria" resultClass="int">
		SELECT COUNT(*)
		<include refid="fromOfPlentyOrder"/>
	</select>
	
	<select id="getPlentyOrderComments" parameterClass="plentyOrderData" resultClass="string">
		SELECT COMMENTS
		  FROM TB_ORDER_COMMENT
		 WHERE ORDER_NUM = #orderNum#
		   AND ORDER_PRDT_INSEQ = #orderPrdtInseq#
	</select>

	<insert id="insertPlentyOrderComments" parameterClass="plentyOrderData">
		INSERT INTO TB_ORDER_COMMENT (ORDER_NUM, ORDER_PRDT_INSEQ, COMMENTS, REG_ID, REG_DTM)
							  VALUES (#orderNum#, #orderPrdtInseq#, #comments#, #commentsRegId#, SYSDATE)
	</insert>

	<update id="updatePlentyOrderComments" parameterClass="plentyOrderData">
		UPDATE TB_ORDER_COMMENT
		   SET COMMENTS = #comments#
			 , REG_ID = #commentsRegId#
			 , REG_DTM = SYSDATE
		 WHERE ORDER_NUM = #orderNum#
		   AND ORDER_PRDT_INSEQ = #orderPrdtInseq#
	</update>
	
	 <select id="getReturnDeliveryAmt" parameterClass="int" resultClass="int">
		select nvl(sum(RETURN_DELI_AMT - decode(METH,1,CHADELIAMT,0)),0)
		  from TB_RETURN_DELIVERY_AMT
		 where RTN_SEQ = #value#
    </select>
    
    <update id="getReturnDeliveryAmtUpdate" parameterClass="int">
        update TB_RETURN_DELIVERY_AMT  
           set CONF_DT = to_char(sysdate,'yyyymmdd')
             , CONF_YN = 'Y'
         where RTN_SEQ = #value#
    </update>    
    
    <insert id="insertNoCash" parameterClass="noCash">
        INSERT INTO TB_CASH_PAYMENT
        (
            ORDER_NUM
            , PYMNT_INSEQ
            , LGD_CASHRECEIPTNUM
            , LGD_CASHRECEIPTSELFYN
            , LGD_CASHRECEIPTKIND
            , LGD_ACCOUNTNUM
            , LGD_CASTAMOUNT
            , LGD_CASFLAG
            , LGD_CASSEQNO
            , LGD_CASCAMOUNT
        )
        VALUES
        (
		    #orderNum#
		    , #pymntInseq#
		    , #lgdCASHRECEIPTNUM#
		    , #lgdCASHRECEIPTSELFYN#
		    , #lgdCASHRECEIPTKIND#
		    , #lgdACCOUNTNUM#
		    , #lgdCASTAMOUNT#
		    , #lgdCASFLAG#
		    , #lgdCASSEQNO#
		    , #lgdCASCAMOUNT#
        )
    </insert>
	
	
	<!-- 
		뮤직샵 - 부록 관련 주문 상품 반환
	 -->
	 <select id="getOrderRecordSupplementFromOrderProduct" parameterClass="map" resultClass="orderRecordSupplement">
	 	 with v_prdt_info as
        (
            select a.sell_prdt_bcode, a.ctgr_id, b.order_num, b.order_prdt_inseq, c.order_dtm
            from tb_product_category a
            inner join tb_order_product b on a.sell_prdt_bcode = b.sell_prdt_bcode
            inner join tb_order c on b.order_num = c.order_num
            where b.order_num = #orderNum#
        )
        select  
			a.sell_prdt_bcode sellPrdtBcode
			, a.order_num orderNum
			, a.order_count - a.canc_count cnt
			, a.order_prdt_inseq orderPrdtInseq
			, b.fgift_master_seq fgiftMasterSeq
			, b.fgift_seq fgiftSeq
			, b.live_cnt stockCount
		from tb_order_product a
		inner join 
		(
			select distinct a.order_num, c.title title , e.title fgift_title, e.live_cnt, e.fgift_seq, c.fgift_master_seq, c.fgift_prdt_code,  a.order_prdt_inseq
			from v_prdt_info a 
			inner join tb_fgift_product b on a.sell_prdt_bcode = b.sell_prdt_bcode 
			inner join tb_fgift_master c on b.fgift_master_seq = c.fgift_master_seq and c.fgift_prdt_code = 'C0952' 
			and c.fgift_code = 'C0982' and c.use_yn = 'Y' and (to_char(a.order_dtm,'YYYYMMDD')  between c.prsnt_start_day and c.prsnt_end_day or (to_char(a.order_dtm,'YYYYMMDD')  > c.prsnt_start_day and c.prsnt_limit_yn = 'Y' )) 
			inner join tb_fgift_fgift d on c.fgift_master_seq = d.fgift_master_seq 
			inner join tb_fgift e on d.fgift_seq = e.fgift_seq and e.fgift_type = 'C0962' 
			union all
			select distinct a.order_num, c.title title , e.title fgift_title, e.live_cnt, e.fgift_seq, c.fgift_master_seq, c.fgift_prdt_code,  a.order_prdt_inseq
			from v_prdt_info a 
			inner join tb_fgift_master c on a.ctgr_id like c.ctgr_id || '%' and c.fgift_prdt_code = 'C0951' 
			and c.fgift_code = 'C0982' and c.use_yn = 'Y' and (to_char(a.order_dtm,'YYYYMMDD')  between c.prsnt_start_day and c.prsnt_end_day or (to_char(a.order_dtm,'YYYYMMDD')  > c.prsnt_start_day and c.prsnt_limit_yn = 'Y' )) 
			inner join tb_fgift_fgift d on c.fgift_master_seq = d.fgift_master_seq 
			inner join tb_fgift e on d.fgift_seq = e.fgift_seq and e.fgift_type = 'C0962' 
		) b on a.order_num = b.order_num and a.order_prdt_inseq = b.order_prdt_inseq
		where a.order_count - a.canc_count > 0
	</select>
	
	<!-- 
		뮤직샵 - 주문-부록 테이블 리스트 반환
	 -->
	 <select id="getOrderRecordSupplementForCancelByOrderNum" parameterClass="string" resultClass="orderRecordSupplement">
		select
			order_num orderNum
			, order_prdt_inseq orderPrdtInseq
			, fgift_master_seq fgiftMasterSeq
			, fgift_seq fgiftSeq
			, cnt
		from tb_order_record_supplement
		where 
			order_num = #orderNum#
	</select>
	
	<!-- 
		뮤직샵 - 주문 포스터 케이스 저장
	 -->
	 <insert id="saveOrderRecordPosterByOrderNum" parameterClass="string">
		insert into tb_order_record_poster (order_num, order_prdt_inseq, poster_case_seq, cnt) 
		select  
			a.order_num
			, a.order_prdt_inseq
			, b.poster_case_seq
			, a.order_count - a.canc_count orderCount
		from tb_order_product a 
		inner join tb_order c on a.order_num = c.order_num
		inner join tb_poster_case b on a.sell_prdt_bcode = b.sell_prdt_bcode and b.use_yn = 'Y' and to_char(c.order_dtm,'YYYYMMDD') between b.prsnt_start_day and b.prsnt_end_day
		where 
			  a.order_num = #orderNum#
			  and a.order_count - a.canc_count > 0
	</insert>
	
	
	<!-- 
		뮤직샵 - 주문 사은품 저장
	 -->
	<insert id="saveOrderRecordSupplement" parameterClass="orderRecordSupplement">
		insert into tb_order_record_supplement 
		(
			order_num
			, order_prdt_inseq
			, fgift_master_seq
			, fgift_seq
			, cnt
		 )
		 values
		 (
			#orderNum#
			, #orderPrdtInseq#
			, #fgiftMasterSeq#
			, #fgiftSeq#
			, #cnt#
		 ) 
	   
	</insert>
	
	<!-- 
		뮤직샵
		주문 상품 사은품 정보
	 -->
	<select id="selectOrderGiftChoose" parameterClass="cartCriteria" resultClass="giftProduct">
		with v_prdt_info as
		(
			select b.sell_prdt_bcode,c.ctgr_id
			from tb_cart_selt_prdt a
			inner join tb_cart b on a.cart_seq = b.cart_seq
			inner join tb_product_category c on c.sell_prdt_bcode = b.sell_prdt_bcode
			where order_id = #orderId#
			<isEqual property="userYn" compareValue="true" prepend="AND">
				b.user_num = #userNum# AND b.mall_id = #mallId#
			</isEqual>
			<isEqual property="userYn" compareValue="false" prepend="AND">
					b.user_num is null AND b.sesn_hash_key = #sesnHashKey#
			</isEqual>
		)
		select 
			a.fgift_master_seq fgiftMasterSeq,
			a.title title,
			a.fgift_seq fgiftSeq,
			a.fgift_title fgiftTitle,
			a.live_cnt liveCnt,
			a.fgift_prdt_code fgiftPrdtCode,
			a.prsnt_start_day prsntStartDay, 
			a.prsnt_end_day prsntEndDay,
			a.img_url imgUrl,
			a.prsnt_limit_yn prsntLimitYn
		from
		(
			select distinct c.title title , e.title fgift_title, e.live_cnt, e.fgift_seq, c.fgift_master_seq, c.fgift_prdt_code, c.prsnt_start_day, c.prsnt_end_day, c.prsnt_limit_yn , e.img_url
			from v_prdt_info a 
			inner join tb_fgift_product b on a.sell_prdt_bcode = b.sell_prdt_bcode 
			inner join tb_fgift_master c on b.fgift_master_seq = c.fgift_master_seq and c.fgift_prdt_code = 'C0952' 
			and c.fgift_code = 'C0981' and c.use_yn = 'Y' and (to_char(sysdate,'YYYYMMDD')  between c.prsnt_start_day and c.prsnt_end_day or (to_char(sysdate,'YYYYMMDD')  > c.prsnt_start_day and c.prsnt_limit_yn = 'Y' )) 
			inner join tb_fgift_fgift d on c.fgift_master_seq = d.fgift_master_seq 
			inner join tb_fgift e on d.fgift_seq = e.fgift_seq and e.fgift_type = 'C0961' 
			union all
			select distinct c.title title , e.title fgift_title, e.live_cnt, e.fgift_seq, c.fgift_master_seq, c.fgift_prdt_code, c.prsnt_start_day, c.prsnt_end_day, c.prsnt_limit_yn , e.img_url
			from v_prdt_info a 
			inner join tb_fgift_master c on a.ctgr_id like c.ctgr_id || '%'  and c.fgift_prdt_code = 'C0951' 
			and c.fgift_code = 'C0981' and c.use_yn = 'Y' and (to_char(sysdate,'YYYYMMDD')  between c.prsnt_start_day and c.prsnt_end_day or (to_char(sysdate,'YYYYMMDD')  > c.prsnt_start_day and c.prsnt_limit_yn = 'Y' )) 
			inner join tb_fgift_fgift d on c.fgift_master_seq = d.fgift_master_seq 
			inner join tb_fgift e on d.fgift_seq = e.fgift_seq and e.fgift_type = 'C0961' 
		) a
		order by a.fgift_master_seq
	</select>
	
	<!-- 
		뮤직샵
		주문 사은품 저장
	 -->
	<insert id="insertOrderRecordGift" parameterClass="orderRecordGift">
		insert into tb_order_record_fgift
		(
			order_num
			, fgift_master_seq
			, fgift_seq
			, cnt
		)
		values
		(
			#orderNum#
			, #fgiftMasterSeq#
			, #fgiftSeq#
			, #cnt#
		)
	</insert>
	
	<!-- 
		뮤직샵
		주문 상품이 뮤직샵 상품인지 구분
	 -->
	 <select id="getIsMusicOrderOrderNum" parameterClass="string" resultClass="int">
		select count(*)
		from tb_order_product a
		inner join tb_sell_product b on a.sell_prdt_bcode = b.sell_prdt_bcode
		where b.sell_prdt_gbn in ('C','R','D')
		and a.order_num = #orderNum#
	 </select>
	 
	 
	 <!-- 
		자동 결제 히스토리 저장
	  -->
	  <insert id="insertAutoPayHist" parameterClass="autoPayHist">
			insert into tb_auto_pay_hist
			(
				order_num
				, auto_pay_seq
			)
			values
			(
				#orderNum#
				, #autoPaySeq#
			)
	  </insert>
	  <!-- 
			자동 결제 저장
	   -->
	  <insert id="insertAutoPay" parameterClass="autoPay">
			<selectKey keyProperty="autoPaySeq" resultClass="int">
				select auto_pay_seq.nextval from dual
			</selectKey>
			insert into tb_auto_pay
			(
				auto_pay_seq
				, user_num
				, auto_pay_key
				, pay_day
				, pay_date
				, sell_prdt_bcode
				, use_yn
				, regst_dtm
				, auto_pay_type
			)
			values
			(
				#autoPaySeq#
				, #userNum#
				, #autoPayKey#
				, #payDay#
				, to_char((select sysdate +1 + #payDay# from dual), 'YYYYMMDD')
				, #sellPrdtBcode#
				, 'Y'
				, sysdate
				, #autoPayType#
			)
	 </insert>
	 
	 <!-- 
		사은품 차감
	  -->
	 <update id="decreaseFgift" parameterClass="fgift">
		UPDATE tb_fgift
		   SET live_cnt = live_cnt - #sellCnt#,
			   present_cnt = present_cnt + #sellCnt#
		 WHERE fgift_seq = #fgiftSeq#
	 </update>
	 
	 <!-- 
		자동 결제 리스트 반환
	  -->
	 <select id="selectAutoPay" parameterClass="autoPay" resultClass="autoPay">
		select 
			a.auto_pay_seq autoPaySeq
			, a.pay_remove_type payRemoveType
			, a.remove_dtm removeDtm
			, a.user_num userNum
			, c.user_name userName
			, c.user_hdphn_num userHdphnNum
			, c.user_email_addr userEmailAddr
			, a.auto_pay_key autoPayKey
			, a.pay_day payDay
			, a.pay_date payDate
			, a.sell_prdt_bcode sellPrdtBcode
			, a.use_yn useYn
			, a.regst_dtm regstDtm
			, a.auto_pay_type autoPayType
			, b.prdt_name prdtName
			, FC_GET_DC_PRICE(b.sell_prdt_bcode, '02') sellPrice 
			, d.user_id userId
		from tb_auto_pay a
		inner join tb_sell_product b on a.sell_prdt_bcode = b.sell_prdt_bcode
		inner join tb_mall_user_detail c on a.user_num = c.user_num and c.mall_id = '02'
		inner join tb_user d on c.user_num = d.user_num
		<dynamic prepend="where">
			<isNotEmpty property="searchSd">
				<isNotEmpty property="searchEd" >
					a.remove_dtm between to_date(#searchSd# || '000000', 'YYYYMMDDHH24MISS') and to_date(#searchEd# || '235959', 'YYYYMMDDHH24MISS')  
				</isNotEmpty>
			</isNotEmpty>
			<isEqual property="keyField" compareValue="userName" prepend="and" removeFirstPrepend="true">
				c.user_name like #keyWord#
			</isEqual>
			<isEqual property="keyField" compareValue="userId" prepend="and" removeFirstPrepend="true">
				d.user_id like #keyWord#
			</isEqual>
			<isNotEmpty property="payRemoveType" prepend="and" removeFirstPrepend="true">
				a.pay_remove_type = #payRemoveType#
			</isNotEmpty>
			<isNotEmpty property="useYn" prepend="and" removeFirstPrepend="true">
				 a.use_yn = #useYn#
			</isNotEmpty>
			<isEqual property="isBatch" compareValue="true" prepend="and" removeFirstPrepend="true">
				a.pay_date &lt;= to_char(sysdate,'YYYYMMDD')
			</isEqual>
			<isNotEmpty property="userNum" prepend="and" removeFirstPrepend="true">
				a.user_num = #userNum#
			</isNotEmpty>
			<isNotEmpty property="sellPrdtBcode" prepend="and" removeFirstPrepend="true">
				a.sell_prdt_bcode = #sellPrdtBcode#
			</isNotEmpty>
		</dynamic>
	 </select>
	 
	 <!-- 
		자동 결제 리스트 갯수 반환
	  -->
	 <select id="selectAutoPayCnt" parameterClass="autoPay" resultClass="int">
		select 
			count(*)
		from tb_auto_pay a
		inner join tb_sell_product b on a.sell_prdt_bcode = b.sell_prdt_bcode
		inner join tb_mall_user_detail c on a.user_num = c.user_num
		inner join tb_user d on c.user_num = d.user_num
		<dynamic prepend="where">
			<isNotEmpty property="searchSd">
				<isNotEmpty property="searchEd" >
					a.remove_dtm between to_date(#searchSd# || '000000', 'YYYYMMDDHH24MISS') and to_date(#searchEd# || '235959', 'YYYYMMDDHH24MISS') 
				</isNotEmpty>
			</isNotEmpty>
			<isEqual property="keyField" compareValue="userName" prepend="and" removeFirstPrepend="true">
				c.user_name like #keyWord#
			</isEqual>
			<isEqual property="keyField" compareValue="userId" prepend="and" removeFirstPrepend="true">
				d.user_id like #keyWord#
			</isEqual>
			<isNotEmpty property="payRemoveType" prepend="and" removeFirstPrepend="true">
				a.pay_remove_type = #payRemoveType#
			</isNotEmpty>
			<isNotEmpty property="useYn" prepend="and" removeFirstPrepend="true">
				 a.use_yn = #useYn#
			</isNotEmpty>
			<isEqual property="isBatch" compareValue="true" prepend="and" removeFirstPrepend="true">
				a.pay_date &lt;= to_char(sysdate,'YYYYMMDD')
			</isEqual>
			<isNotEmpty property="userNum" prepend="and" removeFirstPrepend="true">
				a.user_num = #userNum#
			</isNotEmpty>
			<isNotEmpty property="sellPrdtBcode" prepend="and" removeFirstPrepend="true">
				a.sell_prdt_bcode = #sellPrdtBcode#
			</isNotEmpty>
		</dynamic>
	 </select>
	 
	 <!-- 
		자동 결제후 날짜 업데이트
	  -->
	 <update id="updateAutoPayDate" parameterClass="int" >
			update tb_auto_pay
			set pay_date = (select to_char(to_date(pay_date, 'YYYYMMDD') + pay_day , 'YYYYMMDD') from dual )
			where auto_pay_seq = #autoPaySeq#
	 </update>
	 
	 <!-- 
		 포스터 케이스 주문 삭제
	  -->
	  <delete id="deleteOrderRecordPosterByOrderNum" parameterClass="string">
			delete from tb_order_record_poster
			where order_num = #orderNum#
	  </delete>
	  
	  <!-- 
		부록 주문 삭제
	   -->
	   <delete id="deleteOrderRecordSupplementByOrderNum" parameterClass="string">
			delete from tb_order_record_supplement
			where order_num = #orderNum#
	   </delete>
	   
	   <!-- 
	   부록 상품 갯수 증가
		-->
		<update id="updateFgiftCountForCancel" parameterClass="fgift">
			update tb_fgift
			set live_cnt = live_cnt + #sellCnt# ,
				present_cnt = present_cnt - #presentCnt#
			where fgift_seq = #fgiftSeq#
		</update>
		
		<!-- 
			사은품 주문 삭제
		 -->
		<delete id="deleteOrderRecordGift" parameterClass="map">
			delete from tb_order_record_fgift
			where order_num = #orderNum#
			and fgift_master_seq = #fgiftMasterSeq#
			and fgift_seq = #fgiftSeq#
		 </delete>
		
		<!--
		사은품 주문 반환 
		 -->
		  <select id="selectOrderRecordGiftForCancelByOrderNum" parameterClass="map" resultClass="orderRecordGift">
			with v_prdt_info as
			(
				select a.sell_prdt_bcode,c.ctgr_id, a.order_num, c.order_dtm
				from tb_order_product a
				inner join tb_product_category c on c.sell_prdt_bcode = a.sell_prdt_bcode
				inner join tb_order c on a.order_num = c.order_num
				where a.order_num = #orderNum#
				and a.order_count-canc_count = 0
				<isNotEmpty property="orderPrdtInseq">and a.order_prdt_inseq = #orderPrdtInseq#</isNotEmpty>
			)
			select a.order_num orderNum
				, a.fgift_master_seq fgiftMasterSeq
				, a.fgift_seq fgiftSeq
				, a.cnt
			from tb_order_record_fgift a
			inner join (
				select 
					a.fgift_master_seq
					, a.fgift_seq
					, a.order_num
				from
				(
					select distinct c.fgift_master_seq, e.fgift_seq, a.order_num
					from v_prdt_info a 
					inner join tb_fgift_product b on a.sell_prdt_bcode = b.sell_prdt_bcode 
					inner join tb_fgift_master c on b.fgift_master_seq = c.fgift_master_seq and c.fgift_prdt_code = 'C0952' 
					and c.fgift_code = 'C0981' and c.use_yn = 'Y' and (to_char(a.order_dtm,'YYYYMMDD')  between c.prsnt_start_day and c.prsnt_end_day or (to_char(a.order_dtm,'YYYYMMDD')  > c.prsnt_start_day and c.prsnt_limit_yn = 'Y' )) 
					inner join tb_fgift_fgift d on c.fgift_master_seq = d.fgift_master_seq 
					inner join tb_fgift e on d.fgift_seq = e.fgift_seq and e.fgift_type = 'C0961' 
					union all
					select distinct c.fgift_master_seq, e.fgift_seq, a.order_num
					from v_prdt_info a 
					inner join tb_fgift_master c on a.ctgr_id like c.ctgr_id || '%'  and c.fgift_prdt_code = 'C0951' 
					and c.fgift_code = 'C0981' and c.use_yn = 'Y' and (to_char(a.order_dtm,'YYYYMMDD')  between c.prsnt_start_day and c.prsnt_end_day or (to_char(a.order_dtm,'YYYYMMDD')  > c.prsnt_start_day and c.prsnt_limit_yn = 'Y' )) 
					inner join tb_fgift_fgift d on c.fgift_master_seq = d.fgift_master_seq 
					inner join tb_fgift e on d.fgift_seq = e.fgift_seq and e.fgift_type = 'C0961' 
				) a
			) b on b.fgift_master_seq = a.fgift_master_seq and b.fgift_seq = a.fgift_seq and b.order_num = a.order_num
		 </select>
		 
		 <!-- 
			주문 완료 부록 정보 반환
		  -->
		 <select id="selectOrderProductSupplementListByOrderNum" parameterClass="orderProduct" resultClass="fgiftMasterExt">
			select 
				b.title
				, e.prdt_name prdtName
				, b.img_url imgUrl
			from tb_order_record_supplement a
			inner join tb_fgift b on a.fgift_seq = b.fgift_seq
			inner join tb_order_product d on a.order_num = d.order_num and a.order_prdt_inseq = d.order_prdt_inseq
			inner join tb_sell_product e on d.sell_prdt_bcode = e.sell_prdt_bcode
			where
				a.order_num = #orderNum#
			<isNotEmpty property="productInnerSequence" prepend="and">
				  a.order_prdt_inseq = #productInnerSequence#
			</isNotEmpty>
			  
		 </select>
		 
		 <!-- 
			주문 완료 사은품 정보 반환
		  -->
		 <select id="selectOrderProductFgiftListByOrderNum" parameterClass="string" resultClass="fgiftMasterExt">
		   select 
				b.title
				, b.img_url imgUrl
			from tb_order_record_fgift a
			inner join tb_fgift b on a.fgift_seq = b.fgift_seq
			where
				a.order_num = #orderNum#
		 </select>
		 
		 <!-- 
			주문 완료 포스터 케이스 정보 반환
		  -->
		 <select id="selectOrderProductPosterCaseListByOrderNum" parameterClass="orderProduct" resultClass="posterCaseExt">
			select
				a.poster_case_seq posterCaseSeq
				, e.prdt_name  prdtName
			from tb_order_record_poster a
			inner join tb_poster_case b on a.poster_case_seq = b.poster_case_seq
			inner join tb_order_product d on a.order_num = d.order_num and a.order_prdt_inseq = d.order_prdt_inseq
			inner join tb_sell_product e on d.sell_prdt_bcode = e.sell_prdt_bcode
			where
				a.order_num = #orderNum#
		   <isNotEmpty property="productInnerSequence" prepend="and">
				  a.order_prdt_inseq = #productInnerSequence#
			</isNotEmpty>
		 </select>
		 
		 <!-- 
			 자동 결제 취소
		  -->
		  <update id="updateAutoPayUseYn" parameterClass="map">
			update tb_auto_pay
			set use_yn = 'N'
			, pay_remove_type = #payRemoveType#
			, remove_dtm = sysdate
			where auto_pay_seq = #autoPaySeq#
			and user_num = #userNum#
		  </update>
		
		<!-- 
			다운로드 가능 횟수 체크
		 -->
		<select id ="selectDownloadCnt" parameterClass="string" resultClass="int">
			select 
				nvl(sum(remainCnt),0)
			from (
				select 
					a.order_num
					, FC_GET_ORDER_STATUS_CODE(a.order_num) order_status_code
					, c.gcard_expiry_day
					, c.gcard_download_cnt * (b.order_count- b.canc_count) - nvl(d.down_cnt,0) as remainCnt
					, case 
					when e.auto_pay_seq is not null and f.use_yn = 'Y' then f.pay_date || to_char( a.order_dtm,'HH24MISS')
					else to_char(c.gcard_expiry_day + a.order_dtm ,'YYYYMMDDHH24MISS')
					end limit_time
				from tb_order a
				inner join tb_order_product b on a.order_num = b.order_num
				inner join tb_sell_product c on b.sell_prdt_bcode = c.sell_prdt_bcode and c.sell_prdt_gbn = 'C'
				left outer join (
					select order_num, count(*) as down_cnt 
					from tb_order_track
					group by order_num
				) d on a.order_num = d.order_num and b.order_prdt_inseq = order_prdt_inseq
				left outer join tb_auto_pay_hist e on a.order_num = e.order_num
				left outer join tb_auto_pay f on e.auto_pay_seq = f.auto_pay_seq
				where a.kyobo_user_num = #userNum#
				and c.gcard_download_yn = 'Y'
				and b.active_yn = 'Y'
			) 
			where order_status_code = 'C0124' 
			and remainCnt > 0
			and limit_time >= to_char(sysdate, 'YYYYMMDDHH24MISS')
		</select>
		  
		  
		<!-- 
			듣기 라이센스 체크
		 -->
		<select id = "selectListenBillingCheck" parameterClass="string" resultClass="order">
			select 
				min(order_num) orderNum 
			from (
				select 
					a.order_num
					, FC_GET_ORDER_STATUS_CODE(a.order_num) order_status_code
					, c.gcard_expiry_day
					, case 
					when d.auto_pay_seq is not null and e.use_yn = 'Y' then e.pay_date || to_char( a.order_dtm,'HH24MISS')
					else to_char(c.gcard_expiry_day + a.order_dtm ,'YYYYMMDDHH24MISS')
					end limit_time
				from tb_order a
				inner join tb_order_product b on a.order_num = b.order_num
				inner join tb_sell_product c on b.sell_prdt_bcode = c.sell_prdt_bcode and c.sell_prdt_gbn = 'C'
				left outer join tb_auto_pay_hist d on a.order_num = d.order_num
				left outer join tb_auto_pay e on d.auto_pay_seq = e.auto_pay_seq
				where a.kyobo_user_num = #userNum#
				and c.gcard_listen_yn = 'Y'
				and b.active_yn = 'Y'
			) 
			where order_status_code = 'C0124'
			and limit_time >= to_char(sysdate, 'YYYYMMDDHH24MISS')
		</select>
		 
		<!-- 
			다운로드 라이센스 체크
		 -->
		<select id = "selectDownloadBillingCheck" parameterClass="string" resultClass="order">
			select 
				min(order_num) orderNum 
			from (
				select 
					a.order_num
					, FC_GET_ORDER_STATUS_CODE(a.order_num) order_status_code
					, c.gcard_expiry_day
					, c.gcard_download_cnt  * (b.order_count- b.canc_count) - nvl(d.down_cnt,0) as remainCnt
					, case 
					when e.auto_pay_seq is not null and f.use_yn = 'Y' then f.pay_date || to_char( a.order_dtm,'HH24MISS')
					else to_char(c.gcard_expiry_day + a.order_dtm ,'YYYYMMDDHH24MISS')
					end limit_time
				from tb_order a
				inner join tb_order_product b on a.order_num = b.order_num
				inner join tb_sell_product c on b.sell_prdt_bcode = c.sell_prdt_bcode and c.sell_prdt_gbn = 'C'
				left outer join (
					select order_num, count(*) as down_cnt 
					from tb_order_track
					group by order_num
				) d on a.order_num = d.order_num and b.order_prdt_inseq = order_prdt_inseq
				left outer join tb_auto_pay_hist e on a.order_num = e.order_num
				left outer join tb_auto_pay f on e.auto_pay_seq = f.auto_pay_seq
				where a.kyobo_user_num = #userNum#
				and c.gcard_download_yn = 'Y'
				and b.active_yn = 'Y'
			) 
			where order_status_code = 'C0124' 
			and remainCnt > 0
			and limit_time >= to_char(sysdate, 'YYYYMMDDHH24MISS')
		</select>
		
		<!-- 
			기존 다운로드 체크
		 -->
		<select id="selectOrderTrack" parameterClass="map" resultClass="orderTrack">
			select *
			from
			(
				select 
					a.trk_id as trkId, 
					a.order_num as orderNum, 
					a.order_prdt_inseq as orderPrdtInseq, 
					a.regst_dtm as regstDtm, 
					a.valid_start_dtm as validStartDtm, 
					a.valid_end_dtm as validEndDtm,
					FC_GET_ORDER_STATUS_CODE(a.order_num) orderStatusCode
				from tb_order_track a
				inner join tb_order_product b on a.order_num = b.order_num and a.order_prdt_inseq = b.ordeR_prdt_inseq
				inner join tb_order c on a.order_num = c.order_num
				where a.trk_id = #trackId#
				and c.kyobo_user_num = #userNum#
				and sysdate between a.valid_start_dtm and a.valid_end_dtm
				and b.active_yn = 'Y'
			)
			where orderStatusCode = 'C0124'
		</select>
		
		<!-- 
			회원 상품권 내역
		-->
		<select id="selectMusicGift" parameterClass="map" resultClass="musicCardInfo">
			select 
			   a.*
			from (
				select 
					a.order_num orderNum
					, b.order_prdt_inseq orderPrdtInseq
					, FC_GET_ORDER_STATUS_CODE(a.order_num) orderStatusCode
					, c.gcard_expiry_day gcardExpiryDay
					, c.prdt_name prdtName
					, a.order_dtm orderDtm
					, c.gcard_expiry_day + a.order_dtm limitDate
					, c.gcard_download_cnt  * (b.order_count- b.canc_count) - nvl((select count(*) from tb_order_track where order_num = a.order_num group by order_num),0) remainCnt
					, case
						when auto_pay_type is not null then auto_pay_type
						when auto_pay_type is null then (select pymnt_means_code from tb_payment where order_num = a.order_num and pymnt_inseq = '01') 
					  end as payment
					, numtodsinterval(c.gcard_expiry_day + a.order_dtm - sysdate, 'day') remainDate
					, e.use_yn useYn
					, case
						when e.use_yn = 'Y' then e.auto_pay_seq
						else null
					  end autoPaySeq
					, nvl((select sum(pymnt_amt + canc_rtn_amt) pymnt_amt from tb_payment where order_num = a.order_num),0) orderPrdtAmt
					, e.pay_date payDate
					, c.gcard_listen_yn gcardListenYn
				    , c.gcard_download_yn gcardDownloadYn
				    , c.gcard_download_cnt gcardDownloadCnt
				    , b.sell_prdt_bcode sellPrdtBcode
				from tb_order a
				inner join tb_order_product b on a.order_num = b.order_num
				inner join tb_sell_product c on b.sell_prdt_bcode = c.sell_prdt_bcode and c.sell_prdt_gbn = 'C'
				left outer join tb_auto_pay_hist d on d.order_num = a.order_num
				left outer join tb_auto_pay e on e.auto_pay_seq = d.auto_pay_seq
				where a.kyobo_user_num = #userNum#
				<isEqual property="type" compareValue="active">
					and c.gcard_expiry_day + a.order_dtm &gt;= sysdate
					and b.active_yn = 'Y'
				</isEqual>
				<isEqual property="type" compareValue="autoPay">
					and d.auto_pay_seq is not null
					and c.gcard_expiry_day + a.order_dtm &gt;= sysdate
					and b.active_yn = 'Y'
				</isEqual>
            ) a
            where orderStatusCode = 'C0124'
            order by a.orderDtm desc
		</select>
		
		<!-- 
			회원 상품권 내역 갯수
		-->
		<select id="selectMusicGiftCnt" parameterClass="map" resultClass="int">
			select 
			   count(a.orderNum)
			from (
				select 
				a.order_num orderNum
				, FC_GET_ORDER_STATUS_CODE(a.order_num) orderStatusCode
				from tb_order a
				inner join tb_order_product b on a.order_num = b.order_num
				inner join tb_sell_product c on b.sell_prdt_bcode = c.sell_prdt_bcode and c.sell_prdt_gbn = 'C'
				left outer join tb_auto_pay_hist d on d.order_num = a.order_num
				left outer join tb_auto_pay e on e.auto_pay_seq = d.auto_pay_seq
				where a.kyobo_user_num = #userNum#
				<isEqual property="type" compareValue="active">
					and c.gcard_expiry_day + a.order_dtm &gt;= sysdate
					and b.active_yn = 'Y'
				</isEqual>
				<isEqual property="type" compareValue="autoPay">
					and d.auto_pay_seq is not null
					and c.gcard_expiry_day + a.order_dtm &gt;= sysdate
					and b.active_yn = 'Y'
				</isEqual>
            ) a
            where orderStatusCode = 'C0124'
		</select>
		
		<!-- 
			상품권 강제 취소
		 -->
		<update id="updateOrderProductActiveYn" parameterClass="map">
			update tb_order_product
			set active_yn = 'N'
			where
				order_num = #orderNum#
			and
				order_prdt_inseq = #orderPrdtInseq#
		</update>
		
		<!-- 
			자동 결제 실패 히스토리 등록
		 -->
		 <insert id="insertAutoPayFailHistory" parameterClass="autoPayFailHist">
		 	<selectKey keyProperty="autoPayFailHistSeq" resultClass="int">
		 		select auto_pay_fail_hist_seq.nextval from dual
		 	</selectKey>
		 	insert into tb_auto_pay_fail_hist
			(
				auto_pay_fail_hist_seq
				, auto_pay_seq
				, pay_dtm
				, success_yn
				, fail_msg
			)
			values
			(
				#autoPayFailHistSeq#
				, #autoPaySeq#
				, sysdate
				, 'N'
				, #failMsg#
			)
		 </insert>
		 
		 <!-- 
		 	다운로드 가능 상품권 갯수
		  -->
		<select id="selectDownloadCardCnt" parameterClass="string" resultClass="int">
			select 
				nvl(count(*),0)
			from (
				select 
					a.order_num
					, FC_GET_ORDER_STATUS_CODE(a.order_num) order_status_code
					, c.gcard_expiry_day
					, c.gcard_download_cnt * (b.order_count- b.canc_count) - nvl(d.down_cnt,0) as remainCnt
					, case 
					when e.auto_pay_seq is not null and f.use_yn = 'Y' then f.pay_date || to_char( a.order_dtm,'HH24MISS')
					else to_char(c.gcard_expiry_day + a.order_dtm ,'YYYYMMDDHH24MISS')
					end limit_time
				from tb_order a
				inner join tb_order_product b on a.order_num = b.order_num
				inner join tb_sell_product c on b.sell_prdt_bcode = c.sell_prdt_bcode and c.sell_prdt_gbn = 'C'
				left outer join (
					select order_num, count(*) as down_cnt 
					from tb_order_track
					group by order_num
				) d on a.order_num = d.order_num and b.order_prdt_inseq = order_prdt_inseq
				left outer join tb_auto_pay_hist e on a.order_num = e.order_num
				left outer join tb_auto_pay f on e.auto_pay_seq = f.auto_pay_seq
				where a.kyobo_user_num = #userNum#
				and c.gcard_download_yn = 'Y'
				and b.active_yn = 'Y'
			) 
			where order_status_code = 'C0124' 
			and remainCnt > 0
			and limit_time >= to_char(sysdate, 'YYYYMMDDHH24MISS')
		</select>
		
		<!-- 
			유저 다운로드 상품권 정보 
		 -->
		<select id="selectDownloadCardInfo" parameterClass="string" resultClass="downloadCardInfo">
			select 
				row_number() over (order by limit_time asc) as cnt
                , order_num orderNum
                , order_prdt_inseq orderPrdtInseq
                , remainCnt
                , limit_time limitTime
                , sell_prdt_bcode sellPrdtBcode
			from (
				select 
					a.order_num
                    , b.order_prdt_inseq
					, FC_GET_ORDER_STATUS_CODE(a.order_num) order_status_code
                    , c.gcard_expiry_day
                    , c.gcard_download_cnt * (b.order_count- b.canc_count) - nvl(d.down_cnt,0) as remainCnt
                    , case 
                    when e.auto_pay_seq is not null and f.use_yn = 'Y' then f.pay_date || to_char( a.order_dtm,'HH24MISS')
                    else to_char(c.gcard_expiry_day + a.order_dtm ,'YYYYMMDDHH24MISS')
                    end limit_time
                    , c.sell_prdt_bcode
                from tb_order a
                inner join tb_order_product b on a.order_num = b.order_num
                inner join tb_sell_product c on b.sell_prdt_bcode = c.sell_prdt_bcode and c.sell_prdt_gbn = 'C'
                left outer join (
                    select order_num, count(*) as down_cnt 
                    from tb_order_track
                    group by order_num
                ) d on a.order_num = d.order_num and b.order_prdt_inseq = order_prdt_inseq
                left outer join tb_auto_pay_hist e on a.order_num = e.order_num
                left outer join tb_auto_pay f on e.auto_pay_seq = f.auto_pay_seq
                where a.kyobo_user_num = #userNum#
                and c.gcard_download_yn = 'Y'
                and b.active_yn = 'Y'
            ) 
            where order_status_code = 'C0124' 
            and remainCnt > 0
            and limit_time >= to_char(sysdate, 'YYYYMMDDHH24MISS')
		</select>
		 
		 <!-- 
		 	수집 대기 주문 갯수 가져오기
		  -->
		<select id="getPreOrderCnt" parameterClass="string" resultClass="int">
			select 
				sum(order_count - canc_count) as cnt
			from tb_order_product a
			inner join tb_order_delivery_product b on a.order_num = b.order_num and a.order_prdt_inseq = b.order_prdt_inseq
			where b.ORDER_DLVY_PRDT_SHIP_STAT_CODE in ( 'C0451', 'C0455', 'C0456', 'C0457')  and a.sell_prdt_bcode = #sellPrdtBcode#
			group by sell_prdt_bcode
		</select>
		
		<!-- 
			주문 상품 차감 - 뮤직샵
		 -->
		<update id="decreaseOrderCntForStockCntRecord" parameterClass="map">
			update tb_rec_prod_stock_last
			set 	stock_cnt_record = stock_cnt_record - #orderCnt#
			where
				rcrd_cd in
				(
					select rcrd_cd from tb_rec_prod_stock_last
					where sell_prdt_bcode = #sellPrdtBcode#
				)
		</update>
		
		<update id="decreaseOrderCntForStockCntProduct" parameterClass="map">
			update tb_rec_prod_stock_last
			set stock_cnt_product = stock_cnt_product - #orderCnt#
			where
				sell_prdt_bcode = #sellPrdtBcode#
		</update>
		
		<!-- 
			음악 상품권 쿠폰 저장
		 -->
		<insert id="insertTrackGcardHist" parameterClass="trackGcardHist">
			<selectKey keyProperty="trackGcardHistSeq" resultClass="int">
				select track_gcard_hist_seq.nextval from dual
			</selectKey>
			insert into tb_track_gcard_hist
			(
				track_gcard_hist_seq
				, track_gcard_num
				, user_num
				, mall_id
				, order_num
				, order_prdt_inseq
				, regst_dtm
			)
			values
			(
				#trackGcardHistSeq#
				, #trackGcardNum#
				, #userNum#
				, #mallId#
				, #orderNum#
				, #orderPrdtInseq#
				, sysdate
			)
		</insert>
		
		<resultMap class="hashmap" id="checkMusicCoupon">
			<result property="saleCode" column="saleCode" javaType="string"/>
			<result property="sellPrdtBcode" column="sellPrdtBcode" javaType="string"/>
		</resultMap>
		
		<select id="checkMusicCoupon" parameterClass="trackGcardHist" resultMap="checkMusicCoupon">
			select 
				FC_MCPN_GET_SALE_YN(#trackGcardNum#, #userNum#) saleCode
				, 
				(
				select sell_prdt_bcode 
				from tb_track_gcard_mst a 
				inner join tb_track_gcard_detail b 
				on a.track_gcard_mst_seq = b.track_gcard_mst_seq 
				where b.track_gcard_num = #trackGcardNum#
				) sellPrdtBcode
			from dual
		</select>
		
		<!-- 
		주문 취소시 쿠폰 복원
		-->
        <insert id="cancelOrderCouponRestore" parameterClass="orderCriteria">
            insert into TB_USER_COUPON (USER_NUM, MALL_ID, USER_CPN_SEQ, CPN_GAIN_DTM, ORDER_NUM, ORDER_PRDT_INSEQ, CPN_USE_DTM, KYOBO_CPN_ID, CPN_VALID_DT, USER_CPN_STAT_CODE, CPN_ID)
			select #userNum# USER_NUM
			     , #mallId# MALL_ID
			     , (select nvl(max(SA.USER_CPN_SEQ),0) + 1 from TB_USER_COUPON SA where SA.USER_NUM = #userNum# and SA.MALL_ID = #mallId#) USER_CPN_SEQ
			     , sysdate CPN_GAIN_DTM
			     , '' ORDER_NUM
			     , '' ORDER_PRDT_INSEQ
			     , '' CPN_USE_DTM
			     , A.KYOBO_CPN_ID
			     , (select max(SB.CPN_VALID_DT) from TB_USER_COUPON SB where SB.USER_NUM = #userNum# and SB.MALL_ID = #mallId# and SB.CPN_ID = A.CPN_ID) CPN_VALID_DT
			     , 'C0611' USER_CPN_STAT_CODE
			     , A.CPN_ID
			  from TB_CART_COUPON_HISTORY A
			 where A.ORDER_NUM = #orderNo#
			   and A.CPN_CANC_YN = 'N'
        </insert>
        
        <insert id="cancelOrderDeliCouponRestore" parameterClass="orderCriteria">
            insert into TB_USER_COUPON (USER_NUM, MALL_ID, USER_CPN_SEQ, CPN_GAIN_DTM, ORDER_NUM, ORDER_PRDT_INSEQ, CPN_USE_DTM, KYOBO_CPN_ID, CPN_VALID_DT, USER_CPN_STAT_CODE, CPN_ID)
            select #userNum# USER_NUM
                 , #mallId# MALL_ID
                 , (select nvl(max(SA.USER_CPN_SEQ),0) from TB_USER_COUPON SA where SA.USER_NUM = #userNum# and SA.MALL_ID = #mallId#) + rownum USER_CPN_SEQ
                 , sysdate CPN_GAIN_DTM
                 , '' ORDER_NUM
                 , '' ORDER_PRDT_INSEQ
                 , '' CPN_USE_DTM
                 , A.KYOBO_CPN_ID
                 , (select max(SB.CPN_VALID_DT) from TB_USER_COUPON SB where SB.USER_NUM = #userNum# and SB.MALL_ID = #mallId# and SB.KYOBO_CPN_ID = A.KYOBO_CPN_ID) CPN_VALID_DT
                 , 'C0611' USER_CPN_STAT_CODE
                 , (select max(SA.CPN_ID) from TB_COUPON_MASTER SA where SA.KYOBO_CPN_ID = A.KYOBO_CPN_ID) CPN_ID
              from TB_ORDER_DELIVERY_REQUEST A   
             where A.ORDER_NUM = #orderNo#
               and A.KYOBO_CPN_ID is not null
        </insert>
        
        <update id="saveOrderCntStock" parameterClass="string">
            { call PR_ORDER_CNT_STOCK(#orderNum#) }
        </update>
        
    <parameterMap id="setLinkPriceInput" class="java.util.Map">
        <parameter property="V_VAL1" javaType="java.lang.String" jdbcType="VARCHAR" mode="IN" />
        <parameter property="V_VAL2" javaType="java.lang.String" jdbcType="VARCHAR" mode="IN" />
        <parameter property="V_VAL3" javaType="java.lang.String" jdbcType="VARCHAR" mode="IN" />
        <parameter property="V_VAL4" javaType="java.lang.String" jdbcType="VARCHAR" mode="IN" />
        <parameter property="V_VAL5" javaType="java.lang.String" jdbcType="VARCHAR" mode="IN" />
        <parameter property="V_VAL6" javaType="java.lang.String" jdbcType="VARCHAR" mode="IN" />
        <parameter property="V_VAL7" javaType="java.lang.String" jdbcType="VARCHAR" mode="IN" />
    </parameterMap>
    
    <procedure id="setLinkPrice" parameterMap="setLinkPriceInput">
        { call PR_LINKPRICE(?,?,?,?,?,?,?) }
    </procedure>
    
	<select id="getCoupangNum" parameterClass="string" resultClass="string">
		select COUPANG_NUM
		  from TB_COUPANG_LIST
		 where KYOBO_CPN_ID = #kyoboCpnId#
	</select>
	
    <select id="getDate" resultClass="backSearchParam">
		select to_char(sysdate,'yyyymmdd')    stRes1
		     , to_char(last_day(sysdate + 365),'yyyymmdd')    stRes2
		  from dual
    </select>
    
    <procedure id="setOrderSavedAmt" parameterClass="string">
        { call PR_ORDERSAVEDAMT(#value#) }
    </procedure>
    
    <parameterMap id="kyoboCallErrorInput" class="java.util.Map">
        <parameter property="V_SELL_PRDT_BCODE" javaType="java.lang.String" jdbcType="VARCHAR" mode="IN" />
        <parameter property="V_ENTCODE" javaType="java.lang.String" jdbcType="VARCHAR" mode="IN" />
        <parameter property="V_SEARCHTYPE" javaType="java.lang.String" jdbcType="VARCHAR" mode="IN" />
        <parameter property="V_QTY" javaType="java.lang.String" jdbcType="VARCHAR" mode="IN" />
    </parameterMap>
    
    <procedure id="kyoboCallError" parameterMap="kyoboCallErrorInput">
        { call PR_KYOBOCALLERR(?,?,?,?) }
    </procedure>
    
    <select id="getTrdt" resultClass="string">
        select to_char(sysdate,'yyyymmddHH24MISS')    stRes1
          from dual
    </select>
    
    <select id="getOrderPaymentInfo" parameterClass="string" resultClass="paymentInfo">
        select PYMNT_MEANS_CODE prmtNum
             , FC_GET_CODE_NAME(PYMNT_MEANS_CODE) pymntStatCode
             , sum(PYMNT_AMT + CANC_RTN_AMT) prdtAmt
          from TB_PAYMENT
         where ORDER_NUM = #value#
         group by PYMNT_MEANS_CODE
        having sum(PYMNT_AMT + CANC_RTN_AMT) != 0 
         order by PYMNT_MEANS_CODE
    </select>
    
    <select id = "getCartProductName" parameterClass="cartCriteria" resultClass="String">
        /* OrderSQL.getCartProductName */
        select B.PRDT_NAME
          FROM  tb_cart A
              , tb_sell_product B
              , tb_sell_product C
              , tb_vendor D
              , tb_vendor_contract E
              , tb_record H
            <isNotEmpty property="orderId">
              , tb_cart_selt_prdt G
            </isNotEmpty>
         WHERE  A.sell_prdt_bcode = B.sell_prdt_bcode
           AND  FC_GET_BARCODE(B.sell_prdt_bcode) = C.sell_prdt_bcode
           AND  C.dlvy_vndr_id = D.vndr_id
           AND  B.vndr_cntrt_id = E.vndr_cntrt_id
           AND  B.rcrd_cd = H.rcrd_cd(+)
        <isNotEmpty property="orderId">
           AND  A.cart_seq = G.cart_seq
           AND  G.order_id = #orderId#
        </isNotEmpty>
        <isEmpty property="orderId" prepend="AND">
            B.sell_prdt_gbn <![CDATA[<>]]> 'C'
        </isEmpty>
        <isEmpty property="orderId" prepend="AND">
            B.sell_prdt_gbn <![CDATA[<>]]> 'F'
        </isEmpty>
        <isEqual property="userYn" compareValue="true" prepend="AND">
                A.user_num = #userNum# AND A.mall_id = #mallId#
        </isEqual>
        <isEqual property="userYn" compareValue="false" prepend="AND">
                A.user_num is null AND A.sesn_hash_key = #sesnHashKey#
        </isEqual>
        <isNotEmpty property="cartSeqList" prepend="AND">
                A.cart_seq IN 
           <iterate open="(" close=")" property="cartSeqList" conjunction=",">
                #cartSeqList[]#
           </iterate>
        </isNotEmpty>
          and rownum = 1
         ORDER BY C.dlvy_vndr_id, A.cart_seq
    </select>
    
    
    <insert id="insertNPayCash" parameterClass="naverNPayCash">
        INSERT INTO TB_NPAYCASHREQ (ORDER_NUM, SEQ, GUBUN, CASHKIND, CASHCARDNUM, BUSINESSNUM, CASHAMT, LGTID, CASHRECEIPTNUM, REG_DT)
                                   (select #orderNum#
                                         , nvl(max(SEQ),0) + 1
                                         , #gubun#
                                         , #cashKind#
                                         , #cashCardNum#
                                         , #businessNum#
                                         , #cashAmt#
                                         , #lgTid#
                                         , #cashReceiptNum#
                                         , sysdate
                                      from TB_NPAYCASHREQ
                                     where ORDER_NUM = #orderNum#)
    </insert>
    
    <select id="getNaverNPayCash" parameterClass="payment" resultClass="naverNPayCash">
        select ORDER_NUM    orderNum
             , GUBUN        gubun
             , CASHKIND     cashKind
             , CASHCARDNUM  cashCardNum
             , BUSINESSNUM  businessNum
             , CASHAMT      cashAmt
             , LGTID        lgTid
             , CASHRECEIPTNUM   cashReceiptNum
          from TB_NPAYCASHREQ
         where ORDER_NUM = #orderNum#
           and SEQ = 1
           and GUBUN = '1' 
    </select>
    
    <!-- 
        작성자: 장진용
        작성일: 2018-07-18
        기능: 사용가능쿠폰을 포함한 결제상품 목록
     -->
    <select id="getOrderProduct4UsableCoupon" parameterClass="cartCriteria" resultClass="cartProductListData">
        /* OrderSQL.getOrderProduct4UsableCoupon */
        SELECT C.CART_SEQ           cartSeq
             , C.PRDT_COUNT         prdtCount
             , C.OPTN_NAME_LIST     optnNameList
             , C.OPTN_VALUE_LIST    optnValueList
             , SP.SELL_PRDT_BCODE   sellPrdtBcode
             , DECODE(SP.SELL_PRDT_GBN, 'S', SP.PRIME_SELL_PRDT_BCODE, SP.SELL_PRDT_BCODE)  primeSellPrdtBcode
             , SP.PRDT_NAME         prdtName
             , SP.SELL_PRDT_GBN     sellPrdtGbn
             , SP.SPEC_NAME         specName
             , FC_GET_LAST_PRICE(SP.SELL_PRDT_BCODE, C.MALL_ID, C.USER_NUM) sellPrice
          FROM TB_CART C
          JOIN TB_CART_SELT_PRDT CSP ON C.CART_SEQ = CSP.CART_SEQ AND CSP.ORDER_ID = #orderId#
          JOIN TB_SELL_PRODUCT SP ON C.SELL_PRDT_BCODE = SP.SELL_PRDT_BCODE
         WHERE C.USER_NUM = #userNum#
           AND C.MALL_ID = #mallId#
           AND C.CART_SEQ IN (
                              /* 상품쿠폰 */
                              SELECT C.CART_SEQ
                                FROM TB_USER_COUPON A
                                JOIN TB_COUPON_APPLY_PRODUCT B ON A.CPN_ID = B.CPN_ID AND  A.KYOBO_CPN_ID = B.KYOBO_CPN_ID
                                JOIN TB_CART C ON A.USER_NUM = C.USER_NUM AND A.MALL_ID = C.MALL_ID AND C.USER_YN = 'Y' AND B.SELL_PRDT_BCODE = C.SELL_PRDT_BCODE
                               WHERE TO_CHAR(SYSDATE, 'yyyyMMdd') &lt;= A.CPN_VALID_DT
                                 AND A.USER_CPN_STAT_CODE = 'C0611'
                               UNION ALL
                              /* 주문쿠폰 */
                              SELECT C.CART_SEQ
                                FROM TB_USER_COUPON A
                                JOIN TB_COUPON_MASTER B ON A.CPN_ID = B.CPN_ID AND  A.KYOBO_CPN_ID = B.KYOBO_CPN_ID AND B.SCOPE_GBN = 'C'
                                JOIN TB_CART C ON A.USER_NUM = C.USER_NUM AND A.MALL_ID = C.MALL_ID AND C.USER_YN = 'Y'
                               WHERE TO_CHAR(SYSDATE, 'yyyyMMdd') &lt;= A.CPN_VALID_DT
                                 AND A.USER_CPN_STAT_CODE = 'C0611'
                                 AND FC_IS_VALID_CTGR_CPN(C.SELL_PRDT_BCODE, A.KYOBO_CPN_ID) = 'Y'
                                 AND (   B.SNGL_PRDT_LIMIT_PRICE = 0 
                                      OR B.SNGL_PRDT_LIMIT_PRICE IS NULL
                                      OR (FC_GET_DC_PRICE(C.SELL_PRDT_BCODE, #mallId#) + FC_GET_DC_PRICE(C.CVSL_BCODE, #mallId#) >= B.SNGL_PRDT_LIMIT_PRICE)
                                     )
                              )
         ORDER BY SP.DLVY_VNDR_ID, C.CART_SEQ
    </select>
    
    <!-- 
        작성자: 장진용
        작성일: 2018-07-18
        기능: 상품별 사용가능 쿠폰 반환
     -->
    <select id="getUsableCouponByProduct" parameterClass="cartCriteria" resultClass="userCouponListData">
        /* OrderSQL.getUsableCouponByProduct*/
        SELECT B.USER_CPN_SEQ       userCouponSequence
             , B.CPN_ID             couponId
             , B.KYOBO_CPN_ID       kyoboCouponId
             , A.CPN_NAME           couponName
             , A.RATE_YN            rateYn
             , A.CPN_DSCNT_AMT      couponDiscountAmount
             , A.CPN_DSCNT_RATE     couponDiscountRate
             , A.COUNT_CPN_YN       countCpnYn
             , NVL(A.SNGL_PRDT_LIMIT_PRICE, 0) snglPrdtLimitPrice
          FROM TB_COUPON_MASTER A
          JOIN TB_USER_COUPON B ON A.CPN_ID = B.CPN_ID AND A.KYOBO_CPN_ID = B.KYOBO_CPN_ID AND TO_CHAR(SYSDATE, 'yyyyMMdd') &lt;= B.CPN_VALID_DT  AND B.USER_CPN_STAT_CODE = 'C0611' AND B.USER_NUM = #userNum# AND B.MALL_ID = #mallId#
         WHERE FC_IS_VALID_CTGR_CPN(#sellPrdtBcode#, B.KYOBO_CPN_ID) = 'Y'
           AND A.SCOPE_GBN = 'C'
           AND (   NVL(A.SNGL_PRDT_LIMIT_PRICE, 0) = 0 
                OR FC_GET_DC_PRICE(#sellPrdtBcode#, #mallId#) >= A.SNGL_PRDT_LIMIT_PRICE
               )
         UNION ALL
        SELECT C.USER_CPN_SEQ       userCouponSequence
             , C.CPN_ID             couponId
             , C.KYOBO_CPN_ID       kyoboCouponId
             , A.CPN_NAME           couponName
             , A.RATE_YN            rateYn
             , A.CPN_DSCNT_AMT      couponDiscountAmount
             , A.CPN_DSCNT_RATE     couponDiscountRate
             , A.COUNT_CPN_YN       countCpnYn
             , NVL(A.SNGL_PRDT_LIMIT_PRICE, 0)  snglPrdtLimitPrice
          FROM TB_COUPON_MASTER A
          JOIN TB_COUPON_APPLY_PRODUCT B ON A.CPN_ID = B.CPN_ID AND B.SELL_PRDT_BCODE = #sellPrdtBcode#
          JOIN TB_USER_COUPON C ON A.CPN_ID = C.CPN_ID AND B.KYOBO_CPN_ID = C.KYOBO_CPN_ID AND TO_CHAR(SYSDATE, 'yyyyMMdd') &lt;= C.CPN_VALID_DT AND C.USER_CPN_STAT_CODE = 'C0611' AND C.USER_NUM = #userNum# AND C.MALL_ID = #mallId#
         WHERE A.SCOPE_GBN = 'P'
    </select>
    
    <!-- 
        작성자: 장진용
        작성일: 2018-07-18
        기능: 사용가능 쿠폰을 갖는 주문 배송업체 목록 반환
     -->
    <select id="getOrderDlvyVndr4UsableCoupon" parameterClass="cartCriteria" resultClass="totalProductPriceByDeliveryVendor">
        /* OrderSQL.getOrderDlvyVndr4UsableCoupon */
        SELECT  A.*
              , CASE
                    WHEN A.dlvyLevyStdAmt - A.sellPriceSum > 0 THEN A.dlvyAmt 
                    ELSE 0
                END AS dlvyAmtResult
          FROM  (
                    SELECT C.VNDR_ID            dlvyVndrId
                         , C.VNDR_NAME          dlvyVndrName
                         , C.DLVY_LEVY_STD_AMT  dlvyLevyStdAmt
                         , SUM((FC_GET_DC_PRICE(A.SELL_PRDT_BCODE, #mallId#) + DECODE(A.CVSL_PRDT_YN, 'Y', A.CVSL_PRICE, 0)) * A.PRDT_COUNT) sellPriceSum
                         , C.DLVY_AMT           dlvyAmt
                         , SUM(A.PRDT_COUNT)    prdtCountSum
                         , MAX(FC_GET_FREE_DLVY_YN(A.SELL_PRDT_BCODE, #mallId#))     freeDlvyVndr
                      FROM TB_CART A
                      JOIN TB_SELL_PRODUCT B ON FC_GET_BARCODE(A.sell_prdt_bcode) = B.sell_prdt_bcode
                      JOIN TB_VENDOR C ON B.DLVY_VNDR_ID = C.VNDR_ID
                      JOIN TB_CART_SELT_PRDT D ON A.CART_SEQ = D.CART_SEQ AND D.ORDER_ID = #orderId#
                     WHERE A.USER_NUM = #userNum#
                       AND A.MALL_ID = #mallId#
                     GROUP BY C.VNDR_ID, C.VNDR_NAME, C.DLVY_LEVY_STD_AMT, C.DLVY_AMT
                ) A
         WHERE  A.dlvyLevyStdAmt > A.sellPriceSum
           AND  A.freeDlvyVndr = 'N'
    </select>
    
    <!-- 
        작성자: 장진용
        작성일: 2018-07-18
        기능: 사용가능 배송 쿠폰 목록 반환
     -->
    <select id="getUsableDeliveryCoupon" parameterClass="cartCriteria" resultClass="userCouponListData">
        /* OrderSQL.getUsableDeliveryCoupon */
        SELECT B.user_cpn_seq                   userCouponSequence
             , B.cpn_id                         couponId
             , B.kyobo_cpn_id                   kyoboCouponId
             , A.cpn_name                       couponName
             , A.rate_yn                        rateYn
             , A.cpn_dscnt_amt                  couponDiscountAmount
             , A.cpn_dscnt_rate                 couponDiscountRate
             , A.count_cpn_yn                   countCpnYn
             , NVL(A.sngl_prdt_limit_price, 0)  snglPrdtLimitPrice
          FROM TB_USER_COUPON B
          JOIN TB_COUPON_MASTER A ON A.CPN_ID = B.CPN_ID AND A.KYOBO_CPN_ID = B.KYOBO_CPN_ID AND A.SCOPE_GBN = 'D' AND A.CPN_STD_AMT &lt;= FC_GET_CART_PRICE(#orderId#)
         WHERE B.user_num = #userNum#
           AND B.mall_id = #mallId#
           AND TO_CHAR(SYSDATE, 'yyyyMMdd') &lt;= B.cpn_valid_dt
           AND B.USER_CPN_STAT_CODE = 'C0611'
    </select>
</sqlMap>